openapi: 3.0.3
info:
  title: WebAppX API
  description: Complete API for WebAppX marketplace platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@webappx.com
servers:
- url: http://localhost:5173/webappx
  description: Development server
- url: https://api.webappx.com
  description: Production server
paths:
  /api/login:
    post:
      summary: Authenticate user
      description: Authenticate a user with username and password, returning a token
        and user information. This endpoint is publicly accessible and does not require
        authorization.
      tags:
      - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              admin_user:
                summary: Admin user login
                value:
                  username: alice
                  password: alice
              buyer_user:
                summary: Buyer user login
                value:
                  username: bob
                  password: bob
              seller_user:
                summary: Seller user login
                value:
                  username: carol
                  password: carol
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/register:
    post:
      summary: Register new user
      description: Create a buyer or seller account. Sellers must provide store details.
      tags:
      - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                exists:
                  summary: Username exists
                  value:
                    MESSAGE: Username already exists
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/me:
    get:
      summary: Get current user profile
      description: Retrieve the current user's profile information using the authentication
        token
      tags:
      - Authentication
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update current user profile
      description: Update the current user's profile information
      tags:
      - Authentication
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's full name
                  example: John Doe
                username:
                  type: string
                  description: User's username (must be unique)
                  example: johndoe
            example:
              name: John Doe
              username: johndoe
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  MESSAGE:
                    type: string
                    example: Username already exists
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/settings:
    get:
      summary: Get application settings
      description: Retrieve all application settings
      tags:
      - Settings
      security: []
      responses:
        '200':
          description: Settings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Setting'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/dashboard:
    get:
      summary: Get admin dashboard statistics
      description: Retrieve dashboard statistics for admin users
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/users:
    get:
      summary: Get all users
      description: Retrieve all users (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/users/{id}:
    get:
      summary: Get user details
      description: Retrieve details of a specific user - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update user status
      description: Update user status (ban/unban) - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  enum:
                  - toggleBan
                  description: Action to perform on the user
            example:
              action: toggleBan
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/sellers:
    get:
      summary: Get all sellers
      description: Retrieve all sellers (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Sellers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seller'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/sellers/{id}:
    get:
      summary: Get seller details
      description: Retrieve details of a specific seller - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Seller ID
      responses:
        '200':
          description: Seller details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update seller status
      description: Approve, reject, activate, or deactivate a seller - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Seller ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  enum:
                  - approve
                  - reject
                  - activate
                  - deactivate
                  description: Action to perform on the seller
            examples:
              approve:
                summary: Approve seller
                value:
                  action: approve
              reject:
                summary: Reject seller
                value:
                  action: reject
      responses:
        '200':
          description: Seller updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/products:
    get:
      summary: Get all products
      description: Retrieve all products (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/products/{id}:
    get:
      summary: Get product details
      description: Retrieve details of a specific product - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update product status
      description: Approve, reject, flag, or remove a product - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  enum:
                  - approve
                  - reject
                  - flag
                  - remove
                  description: Action to perform on the product
            examples:
              approve:
                summary: Approve product
                value:
                  action: approve
              remove:
                summary: Remove product
                value:
                  action: remove
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/reports:
    get:
      summary: Get all reports
      description: Retrieve all reports (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/reports/{id}:
    patch:
      summary: Resolve report
      description: Mark a report as resolved - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Report ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  enum:
                  - resolve
                  description: Action to perform on the report
            example:
              action: resolve
      responses:
        '200':
          description: Report resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/settings:
    get:
      summary: Get admin settings
      description: Retrieve admin settings (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  siteName: MyMarketplace
                  currency: USD
                  payoutDelayDays: '7'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update admin settings
      description: Update admin settings (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            example:
              siteName: MyMarketplace
              currency: USD
              payoutDelayDays: '7'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/admin/products/{id}:
    get:
      summary: Get product details for admin
      description: Retrieve detailed information about a specific product for admin review and management.
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/seller/products:
    get:
      summary: Get seller's products
      description: Retrieve all products created by the authenticated seller. Products
        are the same as regular products but filtered to only show those belonging
        to the authenticated user with role 'seller'.
      tags:
      - Seller
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Seller's products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new product
      description: Create a new product for the authenticated seller. Products created
        here are the same as regular products but are automatically associated with
        the authenticated seller. Only users with role 'seller' can create products.
      tags:
      - Seller
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - price
              properties:
                name:
                  type: string
                  description: Product name
                  example: Wireless Headphones
                  minLength: 1
                  maxLength: 100
                price:
                  type: number
                  format: float
                  description: Product price
                  example: 79.99
                  minimum: 0
                description:
                  type: string
                  description: Product description
                  example: High-quality wireless headphones with noise cancellation
                  maxLength: 500
                imageUrl:
                  type: string
                  description: URL to product image
                  example: https://example.com/headphones.jpg
                  format: uri
            example:
              name: Wireless Headphones
              price: 79.99
              description: High-quality wireless headphones with noise cancellation
              imageUrl: https://example.com/headphones.jpg
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/seller/products/{id}:
    get:
      summary: Get seller's product details
      description: Retrieve details of a specific product created by the authenticated
        seller. Products are the same as regular products but filtered to only show
        those belonging to the authenticated user with role 'seller'.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update seller's product
      description: Update a product created by the authenticated seller. Products
        are the same as regular products but only the seller who created the product
        can update it.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                  example: Wireless Headphones
                  minLength: 1
                  maxLength: 100
                price:
                  type: number
                  format: float
                  description: Product price
                  example: 79.99
                  minimum: 0
                description:
                  type: string
                  description: Product description
                  example: High-quality wireless headphones with noise cancellation
                  maxLength: 500
                imageUrl:
                  type: string
                  description: URL to product image
                  example: https://example.com/headphones.jpg
                  format: uri
            example:
              name: Wireless Headphones
              price: 79.99
              description: High-quality wireless headphones with noise cancellation
              imageUrl: https://example.com/headphones.jpg
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete seller's product
      description: Delete a product created by the authenticated seller. Products
        are the same as regular products but only the seller who created the product
        can delete it.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/buyer/products:
    get:
      summary: Get all products for buyers
      description: Retrieve all available products that buyers can browse and purchase.
      tags:
      - Buyer
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: search
        in: query
        schema:
          type: string
        description: Search term for product name or description
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/buyer/products/{id}:
    get:
      summary: Get product details for buyer
      description: Retrieve detailed information about a specific product for buyers to view.
      tags:
      - Buyer
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/buyer/orders:
    get:
      summary: Get buyer's orders
      description: Retrieve all orders for the current buyer.
      tags:
      - Buyer
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: status
        in: query
        schema:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        description: Filter by order status
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create new order
      description: Create a new order from the buyer's cart items.
      tags:
      - Buyer
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - items
              - shippingAddress
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required:
                    - productId
                    - quantity
                    properties:
                      productId:
                        type: integer
                        description: ID of the product
                      quantity:
                        type: integer
                        description: Quantity of the product
                shippingAddress:
                  type: string
                  description: Shipping address for the order
                paymentMethod:
                  type: string
                  enum: [credit_card, bank_transfer, cash_on_delivery]
                  description: Payment method for the order
            example:
              items:
                - productId: 1
                  quantity: 2
                - productId: 3
                  quantity: 1
              shippingAddress: "123 Main St, City, Country"
              paymentMethod: "credit_card"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/buyer/orders/{id}:
    get:
      summary: Get order details
      description: Retrieve detailed information about a specific order.
      tags:
      - Buyer
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Order ID
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/seller/orders:
    get:
      summary: Get seller's orders
      description: Retrieve all orders for the current seller.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: status
        in: query
        schema:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        description: Filter by order status
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/seller/orders/{id}:
    patch:
      summary: Update order status
      description: Update the status of a specific order (seller only).
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - status
              properties:
                status:
                  type: string
                  enum: [processing, shipped, delivered]
                  description: New status for the order
                trackingNumber:
                  type: string
                  description: Tracking number for shipping
            example:
              status: "shipped"
              trackingNumber: "TRK123456789"
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/seller/profile:
    get:
      summary: Get seller profile
      description: Retrieve the current seller's profile information.
      tags:
      - Seller
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Seller profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update seller profile
      description: Update the current seller's profile information.
      tags:
      - Seller
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerProfile'
      responses:
        '200':
          description: Seller profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/seller/payouts:
    get:
      summary: Get seller payouts
      description: Retrieve payout history for the current seller.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: status
        in: query
        schema:
          type: string
          enum: [pending, processed, failed]
        description: Filter by payout status
      responses:
        '200':
          description: Payouts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SellerPayout'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Request payout
      description: Request a new payout for the current seller.
      tags:
      - Seller
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - amount
              - bankAccount
              properties:
                amount:
                  type: number
                  format: float
                  description: Amount to payout
                bankAccount:
                  type: string
                  description: Bank account details
            example:
              amount: 1500.00
              bankAccount: "1234567890"
      responses:
        '201':
          description: Payout requested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerPayout'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    LoginRequest:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          description: User's username
          example: alice
          minLength: 1
          maxLength: 50
        password:
          type: string
          description: User's password
          example: alice
          minLength: 1
      maxLength: 100
    RegisterRequest:
      type: object
      required:
      - name
      - username
      - password
      - role
      properties:
        name:
          type: string
          example: John Doe
        username:
          type: string
          example: johndoe
        password:
          type: string
          example: secret
        role:
          type: string
          enum: [buyer, seller]
        storeName:
          type: string
          description: Required if role is seller
        contact:
          type: string
        bio:
          type: string
    LoginResponse:
      type: object
      required:
      - token
      - user
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/PublicUser'
    User:
      type: object
      required:
      - id
      - username
      - name
      properties:
        id:
          type: integer
          description: User's unique identifier
          example: 1
        name:
          type: string
          description: User's full name (must be unique)
          example: Alice Johnson
        username:
          type: string
          description: User's username
          example: alice
        password:
          type: string
          description: User's password (only in internal operations)
          example: hashed_password
        role:
          type: string
          description: User's role in the system
          enum:
          - admin
          - buyer
          - seller
          example: admin
        status:
          type: string
          description: User's account status
          enum:
          - active
          - banned
          - inactive
          example: active
    PublicUser:
      allOf:
      - $ref: '#/components/schemas/User'
      - type: object
        not:
          required:
          - password
    Seller:
      type: object
      required:
      - id
      - userId
      - name
      properties:
        id:
          type: integer
          description: Seller's unique identifier
          example: 1
        userId:
          type: integer
          description: ID of the user who owns this seller profile
          example: 3
        name:
          type: string
          description: Seller's business name
          example: Acme Co.
        logo:
          type: string
          description: URL to seller's logo
          example: https://example.com/logo.png
        bio:
          type: string
          description: Seller's business description
          example: Premium electronics retailer
        contact:
          type: string
          description: Seller's contact information
          example: contact@acme.com
        status:
          type: string
          description: Seller's account status
          enum:
          - active
          - inactive
          - pending
          example: active
    Product:
      type: object
      required:
      - id
      - name
      - price
      properties:
        id:
          type: integer
          description: Product's unique identifier
          example: 1
        name:
          type: string
          description: Product name
          example: Wireless Headphones
        price:
          type: number
          format: float
          description: Product price
          example: 79.99
        description:
          type: string
          description: Product description
          example: High-quality wireless headphones with noise cancellation
        imageUrl:
          type: string
          description: URL to product image
          example: https://example.com/headphones.jpg
        sellerId:
          type: integer
          description: ID of the seller who owns this product
          example: 1
        status:
          type: string
          description: Product status
          enum:
          - active
          - inactive
          - pending
          - flagged
          example: active
    SellerOrder:
      type: object
      required:
      - id
      - productId
      - productName
      - quantity
      - total
      properties:
        id:
          type: integer
          description: Order's unique identifier
          example: 1
        productId:
          type: integer
          description: ID of the ordered product
          example: 1
        productName:
          type: string
          description: Name of the ordered product
          example: Wireless Headphones
        quantity:
          type: integer
          description: Quantity ordered
          example: 2
        total:
          type: number
          format: float
          description: Total order amount
          example: 159.98
        status:
          type: string
          description: Order status
          enum:
          - pending
          - shipped
          - delivered
          example: pending
        sellerId:
          type: integer
          description: ID of the seller
          example: 1
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
          example: '2024-01-15T10:30:00Z'
    SellerPayout:
      type: object
      required:
      - id
      - amount
      - date
      properties:
        id:
          type: integer
          description: Payout's unique identifier
          example: 1
        amount:
          type: number
          format: float
          description: Payout amount
          example: 500.0
        date:
          type: string
          format: date
          description: Payout date
          example: '2024-01-15'
        sellerId:
          type: integer
          description: ID of the seller
          example: 1
        status:
          type: string
          description: Payout status
          enum:
          - pending
          - completed
          - failed
          example: pending
    Report:
      type: object
      required:
      - id
      properties:
        id:
          type: integer
          description: Report's unique identifier
          example: 1
        message:
          type: string
          description: Report message
          example: Spam product listing
        status:
          type: string
          description: Report status
          enum:
          - open
          - closed
          - resolved
          example: open
    Setting:
      type: object
      required:
      - key
      properties:
        key:
          type: string
          description: Setting key
          example: siteName
        value:
          type: string
          description: Setting value
          example: MyMarketplace
    DashboardStats:
      type: object
      required:
      - totalUsers
      - totalSellers
      - totalSales
      - openReports
      properties:
        totalUsers:
          type: integer
          description: Total number of users
          example: 150
        totalSellers:
          type: integer
          description: Total number of active sellers
          example: 25
        totalSales:
          type: number
          format: float
          description: Total sales amount
          example: 15000.0
        openReports:
          type: integer
          description: Number of open reports
          example: 5
    CartItem:
      type: object
      required:
      - id
      - userId
      - productId
      - quantity
      properties:
        id:
          type: integer
          description: Cart item's unique identifier
          example: 1
        userId:
          type: integer
          description: ID of the user who owns this cart item
          example: 2
        productId:
          type: integer
          description: ID of the product in cart
          example: 1
        quantity:
          type: integer
          description: Quantity of the product
          example: 2
    Order:
      type: object
      required:
      - id
      - items
      - total
      - status
      - createdAt
      properties:
        id:
          type: integer
          description: Order's unique identifier
          example: 1
        items:
          type: string
          description: JSON string of cart items
          example: '[{"productId": 1, "quantity": 2}]'
        total:
          type: number
          format: float
          description: Total order amount
          example: 159.98
        status:
          type: string
          description: Order status
          enum:
          - pending
          - processing
          - shipped
          - delivered
          - cancelled
          example: pending
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
          example: '2024-01-15T10:30:00Z'
        shippingAddress:
          type: string
          description: Shipping address for the order
          example: "123 Main St, City, Country"
        paymentMethod:
          type: string
          enum: [credit_card, bank_transfer, cash_on_delivery]
          description: Payment method used for the order
          example: "credit_card"
        trackingNumber:
          type: string
          description: Tracking number for shipping
          example: "TRK123456789"
    SellerProfile:
      type: object
      required:
      - id
      - name
      - bio
      properties:
        id:
          type: integer
          description: Seller profile's unique identifier
          example: 1
        name:
          type: string
          description: Store name
          example: "Carol's Electronics"
        bio:
          type: string
          description: Store description
          example: "Quality electronics at affordable prices"
        contact:
          type: string
          description: Contact information
          example: "carol@example.com"
        address:
          type: string
          description: Store address
          example: "456 Business Ave, City, Country"
        website:
          type: string
          description: Store website URL
          example: "https://carols-electronics.com"
        createdAt:
          type: string
          format: date-time
          description: Profile creation timestamp
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Profile last update timestamp
          example: '2024-01-15T10:30:00Z'
    SellerPayout:
      type: object
      required:
      - id
      - amount
      - status
      - createdAt
      properties:
        id:
          type: integer
          description: Payout's unique identifier
          example: 1
        amount:
          type: number
          format: float
          description: Payout amount
          example: 1500.00
        status:
          type: string
          description: Payout status
          enum:
          - pending
          - processed
          - failed
          example: pending
        bankAccount:
          type: string
          description: Bank account details
          example: "1234567890"
        processedAt:
          type: string
          format: date-time
          description: Payout processing timestamp
          example: '2024-01-15T10:30:00Z'
        createdAt:
          type: string
          format: date-time
          description: Payout creation timestamp
          example: '2024-01-15T10:30:00Z'
  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missing_credentials:
              summary: Missing credentials
              value:
                MESSAGE: Username and password are required
            invalid_format:
              summary: Invalid format
              value:
                MESSAGE: Invalid username or password format
    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            invalid_credentials:
              summary: Invalid credentials
              value:
                MESSAGE: Invalid username or password
            invalid_token:
              summary: Invalid token
              value:
                MESSAGE: Invalid authentication token
    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            access_denied:
              summary: Access denied
              value:
                MESSAGE: Access denied
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            user_not_found:
              summary: User not found
              value:
                MESSAGE: User not found
            product_not_found:
              summary: Product not found
              value:
                MESSAGE: Product not found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            server_error:
              summary: Server error
              value:
                MESSAGE: Internal server error
            database_error:
              summary: Database error
              value:
                MESSAGE: Database connection failed
    ErrorResponse:
      type: object
      required:
      - MESSAGE
      properties:
        MESSAGE:
          type: string
          description: Error message
          example: Invalid username or password
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint
tags:
- name: Authentication
  description: User authentication operations
- name: Settings
  description: Application settings management
- name: Admin
  description: Administrative operations (admin only)
- name: Seller
  description: Seller operations (seller only)
- name: Buyer
  description: Buyer operations (buyer only)
