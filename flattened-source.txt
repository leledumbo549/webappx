=== package.json ===
{
  "name": "webappx",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "homepage": "https://leledumbo549.github.io/webappx",
  "scripts": {
    "dev": "vite",
    "prebuild": "node flatten.js",
    "build": "tsc -b && vite build",
    "lint": "eslint . --fix",
    "preview": "vite preview",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d dist",
    "format": "prettier --write \"client/**/*.{js,jsx,ts,tsx,css,md}\"",
    "lint:openapi": "speccy lint openapi.yaml",
    "test": "jest"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.1.1",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@reown/appkit": "^1.7.15",
    "@reown/appkit-adapter-ethers": "^1.7.15",
    "@reown/appkit-siwe": "^1.7.15",
    "@tailwindcss/vite": "^4.1.11",
    "@tanstack/react-table": "^8.21.3",
    "axios": "^1.10.0",
    "bignumber.js": "^9.1.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "drizzle-orm": "^0.44.2",
    "ethers": "^6.15.0",
    "jest": "^30.0.4",
    "jotai": "^2.12.5",
    "lucide-react": "^0.525.0",
    "next-themes": "^0.4.6",
    "react": "^19.1.0",
    "react-day-picker": "^9.8.0",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.60.0",
    "siwe": "^3.0.0",
    "sonner": "^2.0.6",
    "sql.js": "^1.13.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.11",
    "zod": "^4.0.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@stoplight/spectral": "^6.5.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/jest": "^29.5.11",
    "@types/node": "^24.0.10",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@types/react-router-dom": "^5.3.3",
    "@types/react-test-renderer": "^19.1.0",
    "@types/sql.js": "^1.4.9",
    "@vitejs/plugin-react": "^4.5.2",
    "eslint": "^9.29.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "gh-pages": "^6.3.0",
    "globals": "^16.2.0",
    "jest-environment-jsdom": "^30.0.4",
    "msw": "^1.3.5",
    "prettier": "^3.6.2",
    "react-router-dom": "^7.6.3",
    "react-test-renderer": "^19.1.0",
    "speccy": "^0.11.0",
    "ts-jest": "^29.4.0",
    "tw-animate-css": "^1.3.5",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.34.1",
    "vite": "^7.0.0"
  },
  "msw": {
    "workerDirectory": "public"
  }
}

=== openapi.yaml ===
openapi: 3.0.3
info:
  title: WebAppX API
  description: Complete API for WebAppX marketplace platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@webappx.com
servers:
- url: http://localhost:5173/webappx
  description: Development server
- url: https://api.webappx.com
  description: Production server
paths:
  /api/login/siwe:
    post:
      operationId: loginWithSiwe
      summary: Authenticate via Sign-In with Ethereum
      description: Authenticate a user using Sign-In with Ethereum (SIWE) protocol
      tags:
      - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - message
              - signature
              - address
              properties:
                message:
                  type: string
                  description: SIWE message to be signed
                signature:
                  type: string
                  description: Signature of the message
                address:
                  type: string
                  description: Ethereum address
            example:
              message: "webappx.com wants you to sign in with your Ethereum account:\n0x1234567890123456789012345678901234567890\n\nSign in with Ethereum to the app.\n\nURI: https://webappx.com\nVersion: 1\nChain ID: 1\nNonce: 1234567890\nIssued At: 2024-01-15T10:30:00Z"
              signature: "0x1234567890123456789012345678901234567890"
              address: "0x1234567890123456789012345678901234567890"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/register:
    post:
      operationId: registerUser
      summary: Register new user
      description: Create a buyer or seller account. Sellers must provide store details.
      tags:
      - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_credentials:
                  summary: Missing credentials
                  value:
                    MESSAGE: Username and password are required
                invalid_format:
                  summary: Invalid format
                  value:
                    MESSAGE: Invalid username or password format
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                exists:
                  summary: Username exists
                  value:
                    MESSAGE: Username already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/me:
    get:
      operationId: getCurrentUser
      summary: Get current user profile
      description: Retrieve the current user's profile information using the authentication
        token
      tags:
      - Authentication
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    put:
      operationId: updateCurrentUser
      summary: Update current user profile
      description: Update the current user's profile information
      tags:
      - Authentication
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's full name
                  example: John Doe
                username:
                  type: string
                  description: User's username (must be unique)
                  example: johndoe
            example:
              name: John Doe
              username: johndoe
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_credentials:
                  summary: Missing credentials
                  value:
                    MESSAGE: Username and password are required
                invalid_format:
                  summary: Invalid format
                  value:
                    MESSAGE: Invalid username or password format
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  MESSAGE:
                    type: string
                    example: Username already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/wallet:
    get:
      operationId: getWallet
      summary: Get current wallet balance
      description: Retrieve the wallet information for the authenticated user.
      tags:
      - Wallet
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Wallet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/wallet/balance:
    get:
      operationId: getWalletBalance
      summary: Get wallet balance
      description: Retrieve only the stablecoin balance for the authenticated user.
      tags:
      - Wallet
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Wallet balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletBalance'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/wallet/{userId}:
    get:
      operationId: getWalletByUserId
      summary: Get user wallet
      description: Retrieve wallet information for a specific user (admin only).
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
        description: User ID
      responses:
        '200':
          description: Wallet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/balance:
    get:
      operationId: getStabletokenBalance
      summary: Get stabletoken balance
      description: Retrieve the stabletoken balance for the authenticated user.
      tags:
      - Wallet
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    description: Current stabletoken balance
                    example: 1000.50
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/payments/initiate:
    post:
      operationId: initiatePayment
      summary: Initiate payment via Xendit
      description: Initiate a payment transaction via Xendit payment gateway.
      tags:
      - Payments
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - amount
              properties:
                amount:
                  type: number
                  description: Payment amount
                  example: 100.00
                  minimum: 0
            example:
              amount: 100.00
      responses:
        '200':
          description: Payment initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentId:
                    type: string
                    description: Unique payment identifier
                    example: "pay_1705312200000"
                  paymentUrl:
                    type: string
                    description: URL to complete payment
                    example: "https://checkout.xendit.co/pay_1705312200000"
        '400':
          description: Bad request - invalid amount
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/payments/webhook:
    post:
      operationId: handlePaymentWebhook
      summary: Handle payment status update
      description: Webhook endpoint to handle payment status updates from Xendit.
      tags:
      - Payments
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentId:
                  type: string
                  description: Payment identifier
                status:
                  type: string
                  description: Payment status
                  enum: [pending, paid, failed, expired]
                amount:
                  type: number
                  description: Payment amount
            example:
              paymentId: "pay_1705312200000"
              status: "paid"
              amount: 100.00
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: boolean
                    example: true
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/settings:
    get:
      operationId: getApplicationSettings
      summary: Get application settings
      description: Retrieve all application settings
      tags:
      - Settings
      security: []
      responses:
        '200':
          description: Settings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Setting'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/dashboard:
    get:
      operationId: getAdminDashboard
      summary: Get admin dashboard statistics
      description: Retrieve dashboard statistics for admin users
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/users:
    get:
      operationId: getAllUsers
      summary: Get all users
      description: Retrieve all users (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUser'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/users/{id}:
    get:
      operationId: getUserDetails
      summary: Get user details
      description: Retrieve details of a specific user - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                user_not_found:
                  summary: User not found
                  value:
                    MESSAGE: User with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    patch:
      operationId: updateUserStatus
      summary: Update user status
      description: Update user status (ban/unban) - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  enum:
                  - toggleBan
                  description: Action to perform on the user
            example:
              action: toggleBan
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                user_not_found:
                  summary: User not found
                  value:
                    MESSAGE: User with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/sellers:
    get:
      operationId: getAllSellers
      summary: Get all sellers
      description: Retrieve all sellers (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Sellers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seller'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/sellers/{id}:
    get:
      operationId: getSellerDetails
      summary: Get seller details
      description: Retrieve details of a specific seller - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Seller ID
      responses:
        '200':
          description: Seller details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                seller_not_found:
                  summary: Seller not found
                  value:
                    MESSAGE: Seller with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    patch:
      operationId: updateSellerStatus
      summary: Update seller status
      description: Approve, reject, activate, or deactivate a seller - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Seller ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  enum:
                  - approve
                  - reject
                  - activate
                  - deactivate
                  description: Action to perform on the seller
            examples:
              approve:
                summary: Approve seller
                value:
                  action: approve
              reject:
                summary: Reject seller
                value:
                  action: reject
      responses:
        '200':
          description: Seller updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                seller_not_found:
                  summary: Seller not found
                  value:
                    MESSAGE: Seller with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/products:
    get:
      operationId: getAllProducts
      summary: Get all products
      description: Retrieve all products (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/products/{id}:
    get:
      operationId: getProductDetails
      summary: Get product details
      description: Retrieve details of a specific product - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                product_not_found:
                  summary: Product not found
                  value:
                    MESSAGE: Product with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    patch:
      operationId: updateProductStatus
      summary: Update product status
      description: Approve, reject, flag, or remove a product - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  enum:
                  - approve
                  - reject
                  - flag
                  - remove
                  description: Action to perform on the product
            examples:
              approve:
                summary: Approve product
                value:
                  action: approve
              remove:
                summary: Remove product
                value:
                  action: remove
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                product_not_found:
                  summary: Product not found
                  value:
                    MESSAGE: Product with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/wallets:
    get:
      operationId: getAllWallets
      summary: Get all user wallets
      description: Retrieve wallets for all users (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Wallets retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/admin/reports:
    get:
      operationId: getAllReports
      summary: Get all reports
      description: Retrieve all reports (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/reports/{id}:
    patch:
      operationId: resolveReport
      summary: Resolve report
      description: Mark a report as resolved - admin only
      tags:
      - Admin
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Report ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  enum:
                  - resolve
                  description: Action to perform on the report
            example:
              action: resolve
      responses:
        '200':
          description: Report resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                report_not_found:
                  summary: Report not found
                  value:
                    MESSAGE: Report with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/admin/settings:
    get:
      operationId: getAdminSettings
      summary: Get admin settings
      description: Retrieve admin settings (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  siteName: MyMarketplace
                  currency: USD
                  payoutDelayDays: '7'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    put:
      operationId: updateAdminSettings
      summary: Update admin settings
      description: Update admin settings (admin only)
      tags:
      - Admin
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            example:
              siteName: MyMarketplace
              currency: USD
              payoutDelayDays: '7'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/seller/products:
    get:
      operationId: getSellerProducts
      summary: Get seller's products
      description: Retrieve all products created by the authenticated seller. Products
        are the same as regular products but filtered to only show those belonging
        to the authenticated user with role 'seller'.
      tags:
      - Seller
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Seller's products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    post:
      operationId: createSellerProduct
      summary: Create a new product
      description: Create a new product for the authenticated seller. Products created
        here are the same as regular products but are automatically associated with
        the authenticated seller. Only users with role 'seller' can create products.
      tags:
      - Seller
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - price
              properties:
                name:
                  type: string
                  description: Product name
                  example: Wireless Headphones
                  minLength: 1
                  maxLength: 100
                price:
                  type: number
                  format: float
                  description: Product price
                  example: 79.99
                  minimum: 0
                description:
                  type: string
                  description: Product description
                  example: High-quality wireless headphones with noise cancellation
                  maxLength: 500
                imageUrl:
                  type: string
                  description: URL to product image
                  example: https://example.com/headphones.jpg
                  format: uri
            example:
              name: Wireless Headphones
              price: 79.99
              description: High-quality wireless headphones with noise cancellation
              imageUrl: https://example.com/headphones.jpg
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_credentials:
                  summary: Missing credentials
                  value:
                    MESSAGE: Username and password are required
                invalid_format:
                  summary: Invalid format
                  value:
                    MESSAGE: Invalid username or password format
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/seller/products/{id}:
    get:
      operationId: getSellerProductDetails
      summary: Get seller's product details
      description: Retrieve details of a specific product created by the authenticated
        seller. Products are the same as regular products but filtered to only show
        those belonging to the authenticated user with role 'seller'.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                product_not_found:
                  summary: Product not found
                  value:
                    MESSAGE: Product with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    put:
      operationId: updateSellerProduct
      summary: Update seller's product
      description: Update a product created by the authenticated seller. Products
        are the same as regular products but only the seller who created the product
        can update it.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                  example: Wireless Headphones
                  minLength: 1
                  maxLength: 100
                price:
                  type: number
                  format: float
                  description: Product price
                  example: 79.99
                  minimum: 0
                description:
                  type: string
                  description: Product description
                  example: High-quality wireless headphones with noise cancellation
                  maxLength: 500
                imageUrl:
                  type: string
                  description: URL to product image
                  example: https://example.com/headphones.jpg
                  format: uri
            example:
              name: Wireless Headphones
              price: 79.99
              description: High-quality wireless headphones with noise cancellation
              imageUrl: https://example.com/headphones.jpg
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_credentials:
                  summary: Missing credentials
                  value:
                    MESSAGE: Username and password are required
                invalid_format:
                  summary: Invalid format
                  value:
                    MESSAGE: Invalid username or password format
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                product_not_found:
                  summary: Product not found
                  value:
                    MESSAGE: Product with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    delete:
      operationId: deleteSellerProduct
      summary: Delete seller's product
      description: Delete a product created by the authenticated seller. Products
        are the same as regular products but only the seller who created the product
        can delete it.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '204':
          description: Product deleted successfully
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    MESSAGE: Access denied
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                product_not_found:
                  summary: Product not found
                  value:
                    MESSAGE: Product with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/buyer/products:
    get:
      operationId: getBuyerProducts
      summary: Get all products for buyers
      description: Retrieve all available products that buyers can browse and purchase.
      tags:
      - Buyer
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: search
        in: query
        schema:
          type: string
        description: Search term for product name or description
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/buyer/products/{id}:
    get:
      operationId: getBuyerProductDetails
      summary: Get product details for buyer
      description: Retrieve detailed information about a specific product for buyers to view.
      tags:
      - Buyer
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Product ID
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                product_not_found:
                  summary: Product not found
                  value:
                    MESSAGE: Product with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/buyer/orders:
    get:
      operationId: getBuyerOrders
      summary: Get buyer's orders
      description: Retrieve all orders for the current buyer.
      tags:
      - Buyer
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: status
        in: query
        schema:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        description: Filter by order status
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    post:
      operationId: createBuyerOrder
      summary: Create new order
      description: Create a new order from the buyer's cart items.
      tags:
      - Buyer
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - items
              - shippingAddress
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required:
                    - productId
                    - quantity
                    properties:
                      productId:
                        type: integer
                        description: ID of the product
                      quantity:
                        type: integer
                        description: Quantity of the product
                shippingAddress:
                  type: string
                  description: Shipping address for the order
                paymentMethod:
                  type: string
                  enum: [credit_card, bank_transfer, cash_on_delivery]
                  description: Payment method for the order
            example:
              items:
                - productId: 1
                  quantity: 2
                - productId: 3
                  quantity: 1
              shippingAddress: "123 Main St, City, Country"
              paymentMethod: "credit_card"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_credentials:
                  summary: Missing credentials
                  value:
                    MESSAGE: Username and password are required
                invalid_format:
                  summary: Invalid format
                  value:
                    MESSAGE: Invalid username or password format
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/buyer/orders/{id}:
    get:
      operationId: getBuyerOrderDetails
      summary: Get order details
      description: Retrieve detailed information about a specific order.
      tags:
      - Buyer
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Order ID
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                order_not_found:
                  summary: Order not found
                  value:
                    MESSAGE: Order with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/seller/orders:
    get:
      operationId: getSellerOrders
      summary: Get seller's orders
      description: Retrieve all orders for the current seller.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: status
        in: query
        schema:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        description: Filter by order status
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/seller/orders/{id}:
    patch:
      operationId: updateSellerOrderStatus
      summary: Update order status
      description: Update the status of a specific order (seller only).
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - status
              properties:
                status:
                  type: string
                  enum: [processing, shipped, delivered]
                  description: New status for the order
                trackingNumber:
                  type: string
                  description: Tracking number for shipping
            example:
              status: "shipped"
              trackingNumber: "TRK123456789"
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_credentials:
                  summary: Missing credentials
                  value:
                    MESSAGE: Username and password are required
                invalid_format:
                  summary: Invalid format
                  value:
                    MESSAGE: Invalid username or password format
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                order_not_found:
                  summary: Order not found
                  value:
                    MESSAGE: Order with ID 123 not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/seller/profile:
    get:
      operationId: getSellerProfile
      summary: Get seller profile
      description: Retrieve the current seller's profile information.
      tags:
      - Seller
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Seller profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerProfile'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    put:
      operationId: updateSellerProfile
      summary: Update seller profile
      description: Update the current seller's profile information.
      tags:
      - Seller
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerProfile'
      responses:
        '200':
          description: Seller profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerProfile'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_credentials:
                  summary: Missing credentials
                  value:
                    MESSAGE: Username and password are required
                invalid_format:
                  summary: Invalid format
                  value:
                    MESSAGE: Invalid username or password format
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/seller/payouts:
    get:
      operationId: getSellerPayouts
      summary: Get seller payouts
      description: Retrieve payout history for the current seller.
      tags:
      - Seller
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: status
        in: query
        schema:
          type: string
          enum: [pending, processed, failed]
        description: Filter by payout status
      responses:
        '200':
          description: Payouts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SellerPayout'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
    post:
      operationId: requestSellerPayout
      summary: Request payout
      description: Request a new payout for the current seller.
      tags:
      - Seller
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - amount
              - bankAccount
              properties:
                amount:
                  type: number
                  format: float
                  description: Amount to payout
                bankAccount:
                  type: string
                  description: Bank account details
            example:
              amount: 1500.00
              bankAccount: "1234567890"
      responses:
        '201':
          description: Payout requested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerPayout'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_credentials:
                  summary: Missing credentials
                  value:
                    MESSAGE: Username and password are required
                invalid_format:
                  summary: Invalid format
                  value:
                    MESSAGE: Invalid username or password format
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    MESSAGE: Invalid username or password
                invalid_token:
                  summary: Invalid token
                  value:
                    MESSAGE: Invalid authentication token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error
                  value:
                    MESSAGE: Internal server error
                database_error:
                  summary: Database error
                  value:
                    MESSAGE: Database connection failed
  /api/transactions:
    get:
      operationId: getTransactionsForUser
      summary: Get user transaction history
      description: Retrieve transaction history for the authenticated user.
      tags:
      - Transactions
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/mint:
    post:
      operationId: mintStabletoken
      summary: Mint stabletoken (admin only)
      description: Mint stabletokens for a user (admin only).
      tags:
      - Admin
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - amount
              properties:
                amount:
                  type: number
                  description: Amount to mint
                  example: 1000.00
                  minimum: 0
                userId:
                  type: integer
                  description: User ID to mint for (optional, defaults to current user)
                  example: 1
            example:
              amount: 1000.00
              userId: 1
      responses:
        '200':
          description: Tokens minted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    description: New balance after minting
                    example: 1500.00
        '400':
          description: Bad request - invalid amount
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    RegisterRequest:
      type: object
      required:
      - name
      - username
      - password
      - role
      properties:
        name:
          type: string
          example: John Doe
        username:
          type: string
          example: johndoe
        password:
          type: string
          example: secret
        role:
          type: string
          enum: [buyer, seller]
        storeName:
          type: string
          description: Required if role is seller
        contact:
          type: string
        bio:
          type: string
    LoginResponse:
      type: object
      required:
      - token
      - user
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/PublicUser'
    User:
      type: object
      required:
      - id
      - username
      - name
      properties:
        id:
          type: integer
          description: User's unique identifier
          example: 1
        name:
          type: string
          description: User's full name (must be unique)
          example: Alice Johnson
        username:
          type: string
          description: User's username
          example: alice
        password:
          type: string
          description: User's password (only in internal operations)
          example: hashed_password
        role:
          type: string
          description: User's role in the system
          enum:
          - admin
          - buyer
          - seller
          example: admin
        status:
          type: string
          description: User's account status
          enum:
          - active
          - banned
          - inactive
          example: active
    PublicUser:
      allOf:
      - $ref: '#/components/schemas/User'
      - type: object
        not:
          required:
          - password
    Seller:
      type: object
      required:
      - id
      - userId
      - name
      properties:
        id:
          type: integer
          description: Seller's unique identifier
          example: 1
        userId:
          type: integer
          description: ID of the user who owns this seller profile
          example: 3
        name:
          type: string
          description: Seller's business name
          example: Acme Co.
        logo:
          type: string
          description: URL to seller's logo
          example: https://example.com/logo.png
        bio:
          type: string
          description: Seller's business description
          example: Premium electronics retailer
        contact:
          type: string
          description: Seller's contact information
          example: contact@acme.com
        status:
          type: string
          description: Seller's account status
          enum:
          - active
          - inactive
          - pending
          example: active
    Product:
      type: object
      required:
      - id
      - name
      - price
      properties:
        id:
          type: integer
          description: Product's unique identifier
          example: 1
        name:
          type: string
          description: Product name
          example: Wireless Headphones
        price:
          type: number
          format: float
          description: Product price
          example: 79.99
        description:
          type: string
          description: Product description
          example: High-quality wireless headphones with noise cancellation
        imageUrl:
          type: string
          description: URL to product image
          example: https://example.com/headphones.jpg
        sellerId:
          type: integer
          description: ID of the seller who owns this product
          example: 1
        status:
          type: string
          description: Product status
          enum:
          - active
          - inactive
          - pending
          - flagged
          example: active
    SellerOrder:
      type: object
      required:
      - id
      - productId
      - productName
      - quantity
      - total
      properties:
        id:
          type: integer
          description: Order's unique identifier
          example: 1
        productId:
          type: integer
          description: ID of the ordered product
          example: 1
        productName:
          type: string
          description: Name of the ordered product
          example: Wireless Headphones
        quantity:
          type: integer
          description: Quantity ordered
          example: 2
        total:
          type: number
          format: float
          description: Total order amount
          example: 159.98
        status:
          type: string
          description: Order status
          enum:
          - pending
          - shipped
          - delivered
          example: pending
        sellerId:
          type: integer
          description: ID of the seller
          example: 1
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
          example: '2024-01-15T10:30:00Z'
    Report:
      type: object
      required:
      - id
      properties:
        id:
          type: integer
          description: Report's unique identifier
          example: 1
        message:
          type: string
          description: Report message
          example: Spam product listing
        status:
          type: string
          description: Report status
          enum:
          - open
          - closed
          - resolved
          example: open
    Setting:
      type: object
      required:
      - key
      properties:
        key:
          type: string
          description: Setting key
          example: siteName
        value:
          type: string
          description: Setting value
          example: MyMarketplace
    Wallet:
      type: object
      required:
      - id
      - userId
      - balance
      properties:
        id:
          type: integer
          description: Wallet unique identifier
          example: 1
        userId:
          type: integer
          description: ID of the wallet owner
          example: 2
        balance:
          type: string
          description: Current stablecoin balance
          example: "0"
        createdAt:
          type: string
          format: date-time
          description: Wallet creation timestamp
          example: '2024-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Wallet last update timestamp
          example: '2024-01-01T00:00:00Z'
    WalletBalance:
      type: object
      required:
      - balance
      properties:
        balance:
          type: string
          description: Current stablecoin balance
          example: "0"
    DashboardStats:
      type: object
      required:
      - totalUsers
      - totalSellers
      - totalSales
      - openReports
      - totalWallets
      properties:
        totalUsers:
          type: integer
          description: Total number of users
          example: 150
        totalSellers:
          type: integer
          description: Total number of active sellers
          example: 25
        totalSales:
          type: number
          format: float
          description: Total sales amount
          example: 15000.0
        openReports:
          type: integer
          description: Number of open reports
          example: 5
        totalWallets:
          type: integer
          description: Number of registered wallets
          example: 150
    CartItem:
      type: object
      required:
      - id
      - userId
      - productId
      - quantity
      properties:
        id:
          type: integer
          description: Cart item's unique identifier
          example: 1
        userId:
          type: integer
          description: ID of the user who owns this cart item
          example: 2
        productId:
          type: integer
          description: ID of the product in cart
          example: 1
        quantity:
          type: integer
          description: Quantity of the product
          example: 2
    Order:
      type: object
      required:
      - id
      - items
      - total
      - status
      - createdAt
      properties:
        id:
          type: integer
          description: Order's unique identifier
          example: 1
        items:
          type: string
          description: JSON string of cart items
          example: '[{"productId": 1, "quantity": 2}]'
        total:
          type: number
          format: float
          description: Total order amount
          example: 159.98
        status:
          type: string
          description: Order status
          enum:
          - pending
          - processing
          - shipped
          - delivered
          - cancelled
          example: pending
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
          example: '2024-01-15T10:30:00Z'
        shippingAddress:
          type: string
          description: Shipping address for the order
          example: "123 Main St, City, Country"
        paymentMethod:
          type: string
          enum: [credit_card, bank_transfer, cash_on_delivery]
          description: Payment method used for the order
          example: "credit_card"
        trackingNumber:
          type: string
          description: Tracking number for shipping
          example: "TRK123456789"
    SellerProfile:
      type: object
      required:
      - id
      - name
      - bio
      properties:
        id:
          type: integer
          description: Seller profile's unique identifier
          example: 1
        name:
          type: string
          description: Store name
          example: "Carol's Electronics"
        bio:
          type: string
          description: Store description
          example: "Quality electronics at affordable prices"
        contact:
          type: string
          description: Contact information
          example: "carol@example.com"
        address:
          type: string
          description: Store address
          example: "456 Business Ave, City, Country"
        website:
          type: string
          description: Store website URL
          example: "https://carols-electronics.com"
        createdAt:
          type: string
          format: date-time
          description: Profile creation timestamp
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Profile last update timestamp
          example: '2024-01-15T10:30:00Z'
    SellerPayout:
      type: object
      required:
      - id
      - amount
      - status
      - createdAt
      properties:
        id:
          type: integer
          description: Payout's unique identifier
          example: 1
        amount:
          type: number
          format: float
          description: Payout amount
          example: 1500.00
        status:
          type: string
          description: Payout status
          enum:
          - pending
          - processed
          - failed
          example: pending
        bankAccount:
          type: string
          description: Bank account details
          example: "1234567890"
        processedAt:
          type: string
          format: date-time
          description: Payout processing timestamp
          example: '2024-01-15T10:30:00Z'
        createdAt:
          type: string
          format: date-time
          description: Payout creation timestamp
          example: '2024-01-15T10:30:00Z'
    Transaction:
      type: object
      required:
      - id
      - userId
      - type
      - amount
      - createdAt
      properties:
        id:
          type: integer
          description: Transaction's unique identifier
          example: 1
        userId:
          type: integer
          description: ID of the user who made the transaction
          example: 1
        type:
          type: string
          description: Transaction type
          enum:
          - mint
          - burn
          - transfer
          - payment
          example: mint
        amount:
          type: number
          format: float
          description: Transaction amount
          example: 100.00
        description:
          type: string
          description: Transaction description
          example: "Minted tokens for user"
        createdAt:
          type: string
          format: date-time
          description: Transaction creation timestamp
          example: '2024-01-15T10:30:00Z'
    ErrorResponse:
      type: object
      required:
      - MESSAGE
      properties:
        MESSAGE:
          type: string
          description: Error message
          example: Invalid username or password
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint
tags:
- name: Admin
  description: Administrative operations (admin only)
- name: Authentication
  description: User authentication operations
- name: Buyer
  description: Buyer operations (buyer only)
- name: Payments
  description: Payment processing operations
- name: Seller
  description: Seller operations (seller only)
- name: Settings
  description: Application settings management
- name: Transactions
  description: Transaction history operations
- name: Wallet
  description: Wallet operations


=== client/App.tsx ===
import { HashRouter, Routes, Route } from 'react-router-dom';
import { useAtom } from 'jotai';
import { tokenAtom, userAtom } from '@/atoms/loginAtoms';
import { useEffect } from 'react';
import axios from '@/lib/axios';
import Loading from './pages/Loading';
import Login from './pages/Login';
import Register from './pages/Register';
import Navbar from './components/Navbar';
import Container from './components/Container';
import Home from './pages/buyer/Home';
import Catalog from './pages/buyer/Catalog';
import Cart from './pages/buyer/Cart';
import Orders from './pages/buyer/Orders';
import OrderDetail from './pages/buyer/OrderDetail';
import Profile from './pages/buyer/Profile';
import ProductDetail from './pages/buyer/ProductDetail';
import SellerDashboard from './pages/seller/SellerDashboard';
import AddProduct from './pages/seller/AddProduct';
import EditProduct from './pages/seller/EditProduct';
import ViewProduct from './pages/seller/ViewProduct';
import MyProducts from './pages/seller/MyProducts';
import OrdersReceived from './pages/seller/OrdersReceived';
import Payouts from './pages/seller/Payouts';
import StoreProfile from './pages/seller/StoreProfile';
import AdminDashboard from './pages/admin/AdminDashboard';
import Dashboard from './pages/Dashboard';
import ManageUsers from './pages/admin/ManageUsers';
import ViewUser from './pages/admin/ViewUser';
import ManageSellers from './pages/admin/ManageSellers';
import ViewSeller from './pages/admin/ViewSeller';
import ManageProducts from './pages/admin/ManageProducts';
import AdminViewProduct from './pages/admin/ViewProduct';
import Reports from './pages/admin/Reports';
import SiteSettings from './pages/admin/SiteSettings';
import WalletUserManager from './pages/admin/WalletUserManager';
import Checkout from './pages/buyer/Checkout';
import AccountRecovery from './pages/AccountRecovery';
import { Toaster } from './components/ui/sonner';

function App() {
  const [token] = useAtom(tokenAtom);
  const [, setUser] = useAtom(userAtom);

  // Validate stored token on app startup
  useEffect(() => {
    const validateStoredToken = async () => {
      if (token) {
        try {
          const res = await axios.get('/api/me');
          setUser(res.data);
        } catch {
          // Token is invalid, clear it
          localStorage.removeItem('auth_token');
          localStorage.removeItem('auth_user');
          window.location.hash = '/login';
        }
      }
    };

    validateStoredToken();
  }, [token, setUser]);

  return (
    <HashRouter>
      <div className="min-h-screen bg-background">
        <Navbar />
        <main className="py-6">
          <Container>
            <Routes>
              <Route path="/" element={<Loading />} />
              <Route path="/login" element={<Login />} />
              <Route path="/register" element={<Register />} />
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/account-recovery" element={<AccountRecovery />} />

              {/* Buyer Routes */}
              <Route path="/home" element={<Home />} />
              <Route path="/catalog" element={<Catalog />} />
              <Route path="/cart" element={<Cart />} />
              <Route path="/buyer/checkout" element={<Checkout />} />
              <Route path="/orders" element={<Orders />} />
              <Route path="/orders/:id" element={<OrderDetail />} />
              <Route path="/profile" element={<Profile />} />
              <Route path="/buyer/product/:id" element={<ProductDetail />} />

              {/* Seller Routes */}
              <Route path="/seller" element={<SellerDashboard />} />
              <Route path="/seller/dashboard" element={<SellerDashboard />} />
              <Route path="/seller/products" element={<MyProducts />} />
              <Route path="/seller/add-product" element={<AddProduct />} />
              <Route
                path="/seller/edit-product/:id"
                element={<EditProduct />}
              />
              <Route
                path="/seller/view-product/:id"
                element={<ViewProduct />}
              />
              <Route path="/seller/orders" element={<OrdersReceived />} />
              <Route path="/seller/payouts" element={<Payouts />} />
              <Route path="/seller/profile" element={<StoreProfile />} />

              {/* Admin Routes */}
              <Route path="/admin" element={<AdminDashboard />} />
              <Route path="/admin/users" element={<ManageUsers />} />
              <Route path="/admin/users/:id" element={<ViewUser />} />
              <Route path="/admin/wallets" element={<WalletUserManager />} />
              <Route path="/admin/sellers" element={<ManageSellers />} />
              <Route path="/admin/sellers/:id" element={<ViewSeller />} />
              <Route path="/admin/products" element={<ManageProducts />} />
              <Route
                path="/admin/products/:id"
                element={<AdminViewProduct />}
              />
              <Route path="/admin/reports" element={<Reports />} />
              <Route path="/admin/settings" element={<SiteSettings />} />
            </Routes>
          </Container>
        </main>
      </div>
      <Toaster />
    </HashRouter>
  );
}

export default App;


=== client/atoms/cartAtoms.ts ===
import { atom } from 'jotai';
import type { Product } from '@/types/Product';

export interface CartItemWithProduct {
  id: number;
  userId: number;
  productId: number;
  quantity: number;
  product: Product;
}

const CART_KEY = 'cart_items';

const getStoredCart = (): CartItemWithProduct[] => {
  try {
    const data = localStorage.getItem(CART_KEY);
    return data ? (JSON.parse(data) as CartItemWithProduct[]) : [];
  } catch {
    return [];
  }
};

const setStoredCart = (items: CartItemWithProduct[]) => {
  try {
    localStorage.setItem(CART_KEY, JSON.stringify(items));
  } catch {
    // ignore
  }
};

export const cartAtom = atom<CartItemWithProduct[]>(getStoredCart());

export const cartTotalAtom = atom((get) =>
  get(cartAtom).reduce(
    (sum, item) => sum + item.product.price * item.quantity,
    0
  )
);

export const loadCartAtom = atom(null, async (_get, set) => {
  const stored = getStoredCart();
  set(cartAtom, stored);
});

export const addToCartAtom = atom(null, async (get, set, product: Product) => {
  const cart = get(cartAtom);
  const existing = cart.find((i) => i.productId === product.id);
  let updated: CartItemWithProduct[];
  if (existing) {
    updated = cart.map((i) =>
      i.productId === product.id ? { ...i, quantity: i.quantity + 1 } : i
    );
  } else {
    const newItem: CartItemWithProduct = {
      id: product.id,
      userId: 0,
      productId: product.id,
      quantity: 1,
      product,
    };
    updated = [...cart, newItem];
  }
  set(cartAtom, updated);
  setStoredCart(updated);
});

export const removeFromCartAtom = atom(
  null,
  async (get, set, productId: number) => {
    const updated = get(cartAtom).filter((i) => i.productId !== productId);
    set(cartAtom, updated);
    setStoredCart(updated);
  }
);

export const updateCartQuantityAtom = atom(
  null,
  async (
    get,
    set,
    { productId, quantity }: { productId: number; quantity: number }
  ) => {
    let updated: CartItemWithProduct[];
    if (quantity <= 0) {
      updated = get(cartAtom).filter((i) => i.productId !== productId);
    } else {
      updated = get(cartAtom).map((i) =>
        i.productId === productId ? { ...i, quantity } : i
      );
    }
    set(cartAtom, updated);
    setStoredCart(updated);
  }
);

export const clearCartAtom = atom(null, async (_get, set) => {
  set(cartAtom, []);
  setStoredCart([]);
});


=== client/atoms/loginAtoms.ts ===
// loginAtoms.ts
import type { User } from '@/server/schema';
import { atom } from 'jotai';
import { clearWalletAtom } from './walletAtoms';

// Helper functions for localStorage
const getStoredToken = (): string | null => {
  try {
    return localStorage.getItem('auth_token');
  } catch {
    return null;
  }
};

const getStoredUser = (): User | null => {
  try {
    const userStr = localStorage.getItem('auth_user');
    return userStr ? JSON.parse(userStr) : null;
  } catch {
    return null;
  }
};

const setStoredToken = (token: string | null) => {
  try {
    if (token) {
      localStorage.setItem('auth_token', token);
    } else {
      localStorage.removeItem('auth_token');
    }
  } catch {
    // Ignore localStorage errors
  }
};

const setStoredUser = (user: User | null) => {
  try {
    if (user) {
      localStorage.setItem('auth_user', JSON.stringify(user));
    } else {
      localStorage.removeItem('auth_user');
    }
  } catch {
    // Ignore localStorage errors
  }
};

export const tokenAtom = atom<string | null>(getStoredToken());
export const userAtom = atom<User | null>(getStoredUser());

export const loginAtom = atom(
  null,
  (_get, set, { token, user }: { token: string; user: User }) => {
    set(tokenAtom, token);
    set(userAtom, user);
    setStoredToken(token);
    setStoredUser(user);
  }
);

export const logoutAtom = atom(null, (_get, set) => {
  set(tokenAtom, null);
  set(userAtom, null);
  set(clearWalletAtom);
  setStoredToken(null);
  setStoredUser(null);
});

export const isAuthenticatedAtom = atom(
  (get) => !!get(tokenAtom) && !!get(userAtom)
);


=== client/atoms/sellerAtoms.ts ===
import { atom } from 'jotai';

// Refresh counter for seller products list
export const sellerProductsRefreshAtom = atom(0);

// Function to trigger refresh
export const refreshSellerProductsAtom = atom(null, (get, set) => {
  const current = get(sellerProductsRefreshAtom);
  set(sellerProductsRefreshAtom, current + 1);
});


=== client/atoms/stabletokenAtoms.ts ===
import { atom } from 'jotai';
import type { StabletokenTransaction } from '@/server/schema';
import axios from '@/lib/axios';

export const stabletokenBalanceAtom = atom(0);
export const transactionsAtom = atom<StabletokenTransaction[]>([]);

export const refreshBalanceAtom = atom(null, async (_get, set) => {
  const res = await axios.get<{ balance: number }>('/api/balance');
  set(stabletokenBalanceAtom, res.data.balance);
});

export const refreshTransactionsAtom = atom(null, async (_get, set) => {
  const res = await axios.get<{ transactions: StabletokenTransaction[] }>(
    '/api/transactions'
  );
  set(transactionsAtom, res.data.transactions);
});


=== client/atoms/walletAtoms.ts ===
import { atom } from 'jotai';
import type { Wallet } from '@/server/schema';
import axios from '@/lib/axios';

const WALLET_KEY = 'wallet_info';

const getStoredWallet = (): Wallet | null => {
  try {
    const data = localStorage.getItem(WALLET_KEY);
    return data ? (JSON.parse(data) as Wallet) : null;
  } catch {
    return null;
  }
};

const setStoredWallet = (wallet: Wallet | null) => {
  try {
    if (wallet) {
      localStorage.setItem(WALLET_KEY, JSON.stringify(wallet));
    } else {
      localStorage.removeItem(WALLET_KEY);
    }
  } catch {
    // ignore storage errors
  }
};

export const walletAtom = atom<Wallet | null>(getStoredWallet());

export const balanceAtom = atom((get) => get(walletAtom)?.balance || '0');

export const loadWalletAtom = atom(null, async (_get, set) => {
  try {
    const res = await axios.get<Wallet>('/api/wallet');
    set(walletAtom, res.data);
    setStoredWallet(res.data);
  } catch {
    // ignore errors for now
  }
});

export const clearWalletAtom = atom(null, async (_get, set) => {
  set(walletAtom, null);
  setStoredWallet(null);
});


=== client/components/CartItem.tsx ===
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent } from './ui/card';
import { Badge } from './ui/badge';
import type { Product } from '@/types/Product';
import { Package, Minus, Plus, Trash2 } from 'lucide-react';

interface Props {
  product: Product;
  quantity: number;
  onRemove?: () => void;
  onChange?: (qty: number) => void;
}

function CartItem({ product, quantity, onRemove, onChange }: Props) {
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
    }).format(price);
  };

  const handleQuantityChange = (newQuantity: number) => {
    if (newQuantity >= 1 && newQuantity <= 99) {
      onChange?.(newQuantity);
    }
  };

  const totalPrice = product.price * quantity;

  return (
    <Card>
      <CardContent className="p-4">
        <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
          {/* Product Image */}
          <div className="relative w-16 h-16 rounded-lg overflow-hidden bg-muted flex-shrink-0">
            {product.imageUrl ? (
              <img
                src={product.imageUrl}
                alt={product.name}
                className="w-full h-full object-cover"
              />
            ) : (
              <div className="flex items-center justify-center w-full h-full">
                <Package className="h-6 w-6 text-muted-foreground" />
              </div>
            )}
          </div>

          {/* Product Info */}
          <div className="flex-1 min-w-0">
            <div className="flex items-start justify-between">
              <div className="space-y-1">
                <h3 className="font-semibold text-sm leading-tight line-clamp-2">
                  {product.name}
                </h3>
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium text-primary">
                    {formatPrice(product.price)}
                  </span>
                  <Badge variant="outline" className="text-xs">
                    {product.status || 'unknown'}
                  </Badge>
                </div>
              </div>
            </div>
          </div>

          {/* Quantity Controls */}
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuantityChange(quantity - 1)}
              disabled={quantity <= 1}
              className="h-8 w-8 p-0"
            >
              <Minus className="h-3 w-3" />
            </Button>

            <Input
              type="number"
              min={1}
              max={99}
              value={quantity}
              onChange={(e) => handleQuantityChange(Number(e.target.value))}
              className="w-16 h-8 text-center text-sm"
            />

            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuantityChange(quantity + 1)}
              disabled={quantity >= 99}
              className="h-8 w-8 p-0"
            >
              <Plus className="h-3 w-3" />
            </Button>
          </div>

          {/* Total Price */}
          <div className="text-right min-w-0">
            <div className="font-semibold text-sm">
              {formatPrice(totalPrice)}
            </div>
            {quantity > 1 && (
              <div className="text-xs text-muted-foreground">
                {quantity} × {formatPrice(product.price)}
              </div>
            )}
          </div>

          {/* Remove Button */}
          {onRemove && (
            <Button
              variant="ghost"
              size="sm"
              onClick={onRemove}
              className="h-8 w-8 p-0 text-destructive hover:text-destructive hover:bg-destructive/10"
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

export default CartItem;


=== client/components/Container.tsx ===
import type { ReactNode } from 'react';

interface Props {
  children: ReactNode;
  className?: string;
}

function Container({ children, className = '' }: Props) {
  return (
    <div
      className={`mx-auto w-full max-w-7xl px-4 sm:px-6 lg:px-8 ${className}`}
    >
      {children}
    </div>
  );
}

export default Container;


=== client/components/DataTable.tsx ===
import * as React from 'react';
import type {
  ColumnDef,
  SortingState,
  ColumnFiltersState,
  PaginationState,
  Row,
} from '@tanstack/react-table';
import {
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from '@tanstack/react-table';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from './ui/table';
import { Input } from './ui/input';
import { Button } from './ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from './ui/select';
import { Skeleton } from './ui/skeleton';
import { Card, CardContent } from './ui/card';
import { cn } from '@/lib/utils';
import {
  ArrowDown,
  ArrowUp,
  ArrowUpDown,
  ChevronLeft,
  ChevronRight,
} from 'lucide-react';

export interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  isLoading?: boolean;
  filterColumnId?: string;
  filterOptions?: string[];
  onRowClick?: (row: Row<TData>) => void;
}

export function DataTable<TData, TValue>({
  columns,
  data,
  isLoading,
  filterColumnId,
  filterOptions = [],
  onRowClick,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [globalFilter, setGlobalFilter] = React.useState('');
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  );
  const [pagination, setPagination] = React.useState<PaginationState>({
    pageIndex: 0,
    pageSize: 10,
  });

  const table = useReactTable({
    data,
    columns,
    state: { sorting, globalFilter, columnFilters, pagination },
    onSortingChange: setSorting,
    onGlobalFilterChange: setGlobalFilter,
    onColumnFiltersChange: setColumnFilters,
    onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  });

  return (
    <div className="space-y-4">
      {/* Search and Filter Controls */}
      <div className="flex flex-wrap items-center gap-2">
        <Input
          placeholder="Search..."
          value={globalFilter}
          onChange={(e) => setGlobalFilter(e.target.value)}
          className="max-w-xs"
        />
        {filterColumnId && filterOptions.length > 0 && (
          <Select
            value={
              (table.getColumn(filterColumnId)?.getFilterValue() as string) ??
              '__all__'
            }
            onValueChange={(value) => {
              if (value === '__all__') {
                table.getColumn(filterColumnId)?.setFilterValue(undefined);
              } else {
                table.getColumn(filterColumnId)?.setFilterValue(value);
              }
            }}
          >
            <SelectTrigger className="w-[150px]">
              <SelectValue placeholder="All" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="__all__">All</SelectItem>
              {filterOptions.map((opt) => (
                <SelectItem key={opt} value={opt}>
                  {opt}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        )}
      </div>

      {/* Desktop Table View */}
      <div className="hidden md:block rounded-md border overflow-x-auto">
        <Table className="table-fixed">
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  const canSort = header.column.getCanSort();
                  const sorted = header.column.getIsSorted();
                  const meta = header.column.columnDef.meta as
                    | { widthClass?: string }
                    | undefined;
                  return (
                    <TableHead
                      key={header.id}
                      onClick={
                        canSort
                          ? header.column.getToggleSortingHandler()
                          : undefined
                      }
                      className={cn(
                        canSort ? 'cursor-pointer select-none' : '',
                        meta?.widthClass,
                        header.column.id === 'actions' ? 'text-right' : ''
                      )}
                    >
                      <div
                        className={cn(
                          'flex items-center gap-1',
                          header.column.id === 'actions' ? 'justify-end' : ''
                        )}
                      >
                        {flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                        {canSort &&
                          (sorted === 'asc' ? (
                            <ArrowUp className="size-3.5" />
                          ) : sorted === 'desc' ? (
                            <ArrowDown className="size-3.5" />
                          ) : (
                            <ArrowUpDown className="size-3.5 text-muted-foreground" />
                          ))}
                      </div>
                    </TableHead>
                  );
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {isLoading ? (
              [...Array(3)].map((_, i) => (
                <TableRow key={i}>
                  <TableCell colSpan={columns.length}>
                    <Skeleton className="h-6 w-full" />
                  </TableCell>
                </TableRow>
              ))
            ) : table.getRowModel().rows.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  onClick={() => onRowClick?.(row)}
                  className={
                    onRowClick ? 'cursor-pointer hover:bg-muted/50' : ''
                  }
                >
                  {row.getVisibleCells().map((cell) => {
                    const meta = cell.column.columnDef.meta as
                      | { widthClass?: string; cellClass?: string }
                      | undefined;
                    return (
                      <TableCell
                        key={cell.id}
                        className={cn(
                          cell.column.id === 'actions' ? 'text-right' : '',
                          meta?.widthClass,
                          meta?.cellClass
                        )}
                        style={meta?.widthClass ? undefined : {}}
                      >
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </TableCell>
                    );
                  })}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No results
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {/* Mobile Card View */}
      <div className="md:hidden space-y-3">
        {isLoading ? (
          [...Array(3)].map((_, i) => (
            <Card key={i}>
              <CardContent className="p-4">
                <Skeleton className="h-4 w-full mb-2" />
                <Skeleton className="h-4 w-3/4" />
              </CardContent>
            </Card>
          ))
        ) : table.getRowModel().rows.length ? (
          table.getRowModel().rows.map((row) => (
            <Card
              key={row.id}
              onClick={() => onRowClick?.(row)}
              className={cn(
                onRowClick
                  ? 'cursor-pointer hover:bg-muted/50 transition-colors'
                  : '',
                'border-border'
              )}
            >
              <CardContent className="p-4">
                <div className="space-y-3">
                  {row.getVisibleCells().map((cell) => {
                    const header = cell.column.columnDef.header;
                    const headerText =
                      typeof header === 'string' ? header : cell.column.id;
                    const isActions = cell.column.id === 'actions';

                    // Skip rendering actions column as a separate field in mobile view
                    if (isActions) {
                      return (
                        <div
                          key={cell.id}
                          className="flex justify-end pt-2 border-t"
                        >
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext()
                          )}
                        </div>
                      );
                    }

                    return (
                      <div key={cell.id} className="flex flex-col space-y-1">
                        <div className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                          {headerText}
                        </div>
                        <div className="text-sm">
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext()
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          ))
        ) : (
          <Card>
            <CardContent className="p-8 text-center">
              <div className="text-muted-foreground">No results</div>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Pagination Controls */}
      <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
        <div className="text-sm text-muted-foreground">
          Page {table.getState().pagination.pageIndex + 1} of{' '}
          {table.getPageCount()}
        </div>
        <div className="flex items-center gap-2">
          <Select
            value={String(table.getState().pagination.pageSize)}
            onValueChange={(value) => table.setPageSize(Number(value))}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {[5, 10, 50, 100].map((size) => (
                <SelectItem key={size} value={String(size)}>
                  {size}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            <ChevronLeft className="size-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            <ChevronRight className="size-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}


=== client/components/Footer.tsx ===
function Footer() {
  return (
    <footer className="py-4 border-t text-center text-sm text-gray-500">
      <small>
        commit {__COMMIT_HASH__}: {__COMMIT_MSG__}
      </small>
    </footer>
  );
}

export default Footer;


=== client/components/Navbar.tsx ===
import { useAtom } from 'jotai';
import { useNavigate, useLocation } from 'react-router-dom';
import { userAtom, logoutAtom } from '@/atoms/loginAtoms';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  NavigationMenu,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  navigationMenuTriggerStyle,
} from '@/components/ui/navigation-menu';
import {
  ShoppingCart,
  Store,
  Settings,
  User,
  LogOut,
  Home,
  Package,
  BarChart3,
  Users,
  FileText,
  CreditCard,
  Menu,
  X,
} from 'lucide-react';
import { useState } from 'react';
import { cn } from '@/lib/utils';
import { useAppKitAccount, useAppKit } from '@reown/appkit/react';
import Container from './Container';

function Navbar() {
  const [user] = useAtom(userAtom);
  const [, logout] = useAtom(logoutAtom);
  const navigate = useNavigate();
  const location = useLocation();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { isConnected } = useAppKitAccount();
  const { open } = useAppKit();

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const isActive = (path: string) => location.pathname === path;

  const getGuestNavItems = () => [
    {
      label: 'Home',
      path: '/home',
      icon: Home,
      description: 'Browse products and discover deals',
    },
    {
      label: 'Catalog',
      path: '/catalog',
      icon: Package,
      description: 'View all available products',
    },
    {
      label: 'Cart',
      path: '/cart',
      icon: ShoppingCart,
      description: 'Manage your shopping cart',
    },
    {
      label: 'Login',
      path: '/login',
      icon: User,
      description: 'Sign in to your account',
    },
  ];

  const getBuyerNavItems = () => [
    {
      label: 'Home',
      path: '/home',
      icon: Home,
      description: 'Browse products and discover deals',
    },
    {
      label: 'Catalog',
      path: '/catalog',
      icon: Package,
      description: 'View all available products',
    },
    {
      label: 'Cart',
      path: '/cart',
      icon: ShoppingCart,
      description: 'Manage your shopping cart',
    },
    {
      label: 'Orders',
      path: '/orders',
      icon: FileText,
      description: 'Track your order history',
    },
    {
      label: 'Profile',
      path: '/profile',
      icon: User,
      description: 'Manage your account settings',
    },
  ];

  const getSellerNavItems = () => [
    {
      label: 'Dashboard',
      path: '/seller/dashboard',
      icon: BarChart3,
      description: 'View your store analytics',
    },
    {
      label: 'My Products',
      path: '/seller/products',
      icon: Package,
      description: 'Manage your product catalog',
    },
    {
      label: 'Orders',
      path: '/seller/orders',
      icon: FileText,
      description: 'Process customer orders',
    },
    {
      label: 'Payouts',
      path: '/seller/payouts',
      icon: Store,
      description: 'Track your earnings and payouts',
    },
    {
      label: 'Store Profile',
      path: '/seller/profile',
      icon: User,
      description: 'Update your store information',
    },
  ];

  const getAdminNavItems = () => [
    {
      label: 'Dashboard',
      path: '/admin',
      icon: BarChart3,
      description: 'Platform overview and statistics',
    },
    {
      label: 'Users',
      path: '/admin/users',
      icon: Users,
      description: 'Manage user accounts and permissions',
    },
    {
      label: 'Sellers',
      path: '/admin/sellers',
      icon: Store,
      description: 'Approve and manage seller accounts',
    },
    {
      label: 'Products',
      path: '/admin/products',
      icon: Package,
      description: 'Review and moderate products',
    },
    {
      label: 'Wallets',
      path: '/admin/wallets',
      icon: CreditCard,
      description: 'Manage user wallets',
    },
    {
      label: 'Reports',
      path: '/admin/reports',
      icon: FileText,
      description: 'Handle user reports and issues',
    },
    {
      label: 'Settings',
      path: '/admin/settings',
      icon: Settings,
      description: 'Configure platform settings',
    },
  ];

  const getNavItems = () => {
    if (!user) return getGuestNavItems();
    switch (user.role) {
      case 'buyer':
        return getBuyerNavItems();
      case 'seller':
        return getSellerNavItems();
      case 'admin':
        return getAdminNavItems();
      default:
        return [];
    }
  };

  const navItems = getNavItems();

  const getInitials = (name: string) => {
    return name
      .split(' ')
      .map((n) => n[0])
      .join('')
      .toUpperCase();
  };

  const getRoleBadgeVariant = (role: string) => {
    switch (role) {
      case 'admin':
        return 'destructive';
      case 'seller':
        return 'secondary';
      case 'buyer':
        return 'default';
      default:
        return 'outline';
    }
  };

  return (
    <nav className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <Container>
        <div className="flex h-16 items-center justify-between">
          {/* Logo/Brand */}
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              className="flex items-center space-x-2 p-0 h-auto"
              onClick={() => navigate('/home')}
            >
              <div className="p-1 bg-primary/10 rounded-lg">
                <Store className="h-5 w-5 text-primary" />
              </div>
              <span className="font-bold text-xl hidden sm:inline">
                MarketPlace
              </span>
              <span className="font-bold text-xl sm:hidden">MP</span>
            </Button>
          </div>

          {/* Desktop Navigation */}
          <div className="hidden lg:flex items-center space-x-6">
            <NavigationMenu>
              <NavigationMenuList>
                {navItems.map((item) => {
                  const Icon = item.icon;
                  return (
                    <NavigationMenuItem key={item.path}>
                      <NavigationMenuLink
                        asChild
                        className={cn(
                          navigationMenuTriggerStyle(),
                          isActive(item.path) &&
                            'bg-accent text-accent-foreground'
                        )}
                      >
                        <Button
                          variant="ghost"
                          onClick={() => navigate(item.path)}
                          className="flex items-center space-x-2"
                        >
                          <Icon className="h-4 w-4" />
                          <span>{item.label}</span>
                        </Button>
                      </NavigationMenuLink>
                    </NavigationMenuItem>
                  );
                })}
              </NavigationMenuList>
            </NavigationMenu>
          </div>

          {/* User Menu */}
          <div className="flex items-center space-x-2 sm:space-x-4">
            {user ? (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    className="flex items-center space-x-2"
                  >
                    <Avatar className="h-8 w-8">
                      <AvatarFallback className="text-xs">
                        {getInitials(user.name || user.username || 'U')}
                      </AvatarFallback>
                    </Avatar>
                    <div className="hidden sm:flex flex-col items-start">
                      <span className="text-sm font-medium">
                        {user.name || user.username}
                      </span>
                      <Badge
                        variant={getRoleBadgeVariant(user.role || 'buyer')}
                        className="text-xs"
                      >
                        {user.role}
                      </Badge>
                    </div>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <DropdownMenuLabel>
                    <div className="flex flex-col space-y-1">
                      <p className="text-sm font-medium leading-none">
                        {user.name || user.username}
                      </p>
                      <p className="text-xs leading-none text-muted-foreground">
                        {user.username}
                      </p>
                    </div>
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={() => navigate('/profile')}>
                    <User className="mr-2 h-4 w-4" />
                    Profile
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={handleLogout}>
                    <LogOut className="mr-2 h-4 w-4" />
                    Logout
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            ) : (
              <Button
                variant="ghost"
                onClick={() => navigate('/login')}
                className="hidden sm:flex"
              >
                Login
              </Button>
            )}

            <Button
              variant={isConnected ? 'default' : 'secondary'}
              onClick={() => open()}
              className="flex items-center"
              size="sm"
            >
              <span className="hidden sm:inline">
                {isConnected ? 'Wallet Connected' : 'Connect Wallet'}
              </span>
              <span className="sm:hidden">
                {isConnected ? 'Connected' : 'Connect'}
              </span>
            </Button>

            {/* Mobile Menu Button */}
            <Button
              variant="ghost"
              size="sm"
              className="lg:hidden ml-1"
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            >
              {isMobileMenuOpen ? (
                <X className="h-4 w-4" />
              ) : (
                <Menu className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMobileMenuOpen && (
          <div className="lg:hidden py-4 border-t">
            <div className="flex flex-col space-y-2">
              {navItems.map((item) => {
                const Icon = item.icon;
                return (
                  <Button
                    key={item.path}
                    variant={isActive(item.path) ? 'default' : 'ghost'}
                    onClick={() => {
                      navigate(item.path);
                      setIsMobileMenuOpen(false);
                    }}
                    className="justify-start h-auto py-3"
                  >
                    <Icon className="mr-3 h-4 w-4" />
                    <div className="flex flex-col items-start">
                      <span className="font-medium">{item.label}</span>
                      <span className="text-xs text-muted-foreground">
                        {item.description}
                      </span>
                    </div>
                  </Button>
                );
              })}
            </div>
          </div>
        )}
      </Container>
    </nav>
  );
}

export default Navbar;


=== client/components/ProductCard.tsx ===
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import type { Product } from '@/types/Product';
import { Package, Eye, ShoppingCart } from 'lucide-react';

interface Props {
  product: Product;
  onAdd?: () => void;
  onView?: () => void;
}

function ProductCard({ product, onAdd, onView }: Props) {
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
    }).format(price);
  };

  const getStatusBadgeVariant = (status: string | null) => {
    switch (status) {
      case 'active':
        return 'default';
      case 'inactive':
        return 'secondary';
      case 'pending':
        return 'outline';
      case 'flagged':
        return 'destructive';
      default:
        return 'outline';
    }
  };

  return (
    <Card className="group overflow-hidden transition-all duration-200 hover:shadow-lg hover:scale-[1.02]">
      {/* Product Image */}
      <div className="relative aspect-square overflow-hidden bg-muted">
        {product.imageUrl ? (
          <img
            src={product.imageUrl}
            alt={product.name}
            className="h-full w-full object-cover transition-transform duration-200 group-hover:scale-105"
          />
        ) : (
          <div className="flex h-full w-full items-center justify-center">
            <Package className="h-12 w-12 text-muted-foreground" />
          </div>
        )}

        {/* Status Badge */}
        <div className="absolute top-2 right-2">
          <Badge
            variant={getStatusBadgeVariant(product.status)}
            className="text-xs"
          >
            {product.status || 'unknown'}
          </Badge>
        </div>
      </div>

      <CardHeader className="pb-3">
        <CardTitle className="text-lg font-semibold line-clamp-2 leading-tight">
          {product.name}
        </CardTitle>
      </CardHeader>

      <CardContent className="pb-3">
        {product.description ? (
          <p className="text-sm text-muted-foreground line-clamp-3 leading-relaxed">
            {product.description}
          </p>
        ) : (
          <p className="text-sm text-muted-foreground italic">
            No description available
          </p>
        )}
      </CardContent>

      <CardFooter className="flex flex-col gap-3 pt-0">
        {/* Price */}
        <div className="w-full">
          <span className="text-xl font-bold text-primary">
            {formatPrice(product.price)}
          </span>
        </div>

        {/* Action Buttons */}
        <div className="flex w-full gap-2">
          {onView && (
            <Button
              variant="outline"
              size="sm"
              onClick={onView}
              className="flex-1"
            >
              <Eye className="mr-2 h-4 w-4" />
              View
            </Button>
          )}
          {onAdd && (
            <Button size="sm" onClick={onAdd} className="flex-1">
              <ShoppingCart className="mr-2 h-4 w-4" />
              Add to Cart
            </Button>
          )}
        </div>
      </CardFooter>
    </Card>
  );
}

export default ProductCard;


=== client/components/SectionTitle.tsx ===
import type { ReactNode } from 'react';
import { cn } from '@/lib/utils';

interface SectionTitleProps {
  children: ReactNode;
  className?: string;
}

function SectionTitle({ children, className }: SectionTitleProps) {
  return (
    <h2 className={cn('text-2xl font-bold mb-4', className)}>{children}</h2>
  );
}

export default SectionTitle;


=== client/components/Title.tsx ===
interface TitleProps {
  onClick?: () => void;
  className?: string;
}

import { Button } from './ui/button';

const Title = ({ onClick, className = '' }: TitleProps) => (
  <Button
    type="button"
    variant="ghost"
    className={`flex items-center gap-2 text-4xl font-bold focus-visible:ring ${className}`}
    onClick={onClick || (() => window.location.replace('#/'))}
    aria-label="WEBX"
  >
    <span>
      WEB<span className="text-blue-900">X</span>
    </span>
  </Button>
);

export default Title;


=== client/components/WalletTutorial.tsx ===
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';

function WalletTutorial() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <button type="button" className="text-sm underline">
          Wallet Help
        </button>
      </DialogTrigger>
      <DialogContent className="space-y-4">
        <DialogHeader>
          <DialogTitle>Connecting Your Wallet</DialogTitle>
        </DialogHeader>
        <DialogDescription className="space-y-2">
          <p>Install a compatible wallet extension like MetaMask.</p>
          <p>Unlock your wallet then click &quot;Connect Wallet&quot;.</p>
          <p>Approve the connection request in the wallet popup.</p>
        </DialogDescription>
        <DialogFooter>
          <DialogClose asChild>
            <Button>Got it</Button>
          </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

export default WalletTutorial;


=== client/components/ui/accordion.tsx ===
import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDownIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />;
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn('border-b last:border-b-0', className)}
      {...props}
    />
  );
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180',
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  );
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn('pt-0 pb-4', className)}>{children}</div>
    </AccordionPrimitive.Content>
  );
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };


=== client/components/ui/alert-dialog.tsx ===
'use client';

import * as React from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />;
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  );
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  );
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className
      )}
      {...props}
    />
  );
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  );
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}
      {...props}
    />
  );
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',
        className
      )}
      {...props}
    />
  );
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn('text-lg font-semibold', className)}
      {...props}
    />
  );
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  );
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: 'outline' }), className)}
      {...props}
    />
  );
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};


=== client/components/ui/alert.tsx ===
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const alertVariants = cva(
  'relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',
  {
    variants: {
      variant: {
        default: 'bg-card text-card-foreground',
        destructive:
          'text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  );
}

function AlertTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        'col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight',
        className
      )}
      {...props}
    />
  );
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed',
        className
      )}
      {...props}
    />
  );
}

export { Alert, AlertTitle, AlertDescription };


=== client/components/ui/avatar.tsx ===
import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

import { cn } from '@/lib/utils';

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        'relative flex size-8 shrink-0 overflow-hidden rounded-full',
        className
      )}
      {...props}
    />
  );
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn('aspect-square size-full', className)}
      {...props}
    />
  );
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        'bg-muted flex size-full items-center justify-center rounded-full',
        className
      )}
      {...props}
    />
  );
}

export { Avatar, AvatarImage, AvatarFallback };


=== client/components/ui/badge.tsx ===
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const badgeVariants = cva(
  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',
        destructive:
          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        outline:
          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<'span'> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'span';

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  );
}

export { Badge, badgeVariants };


=== client/components/ui/button.tsx ===
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
        destructive:
          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        outline:
          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',
        secondary:
          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
        ghost:
          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };


=== client/components/ui/calendar.tsx ===
'use client';

import * as React from 'react';
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from 'lucide-react';
import { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker';

import { cn } from '@/lib/utils';
import { Button, buttonVariants } from '@/components/ui/button';

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = 'label',
  buttonVariant = 'ghost',
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>['variant'];
}) {
  const defaultClassNames = getDefaultClassNames();

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString('default', { month: 'short' }),
        ...formatters,
      }}
      classNames={{
        root: cn('w-fit', defaultClassNames.root),
        months: cn(
          'flex gap-4 flex-col md:flex-row relative',
          defaultClassNames.months
        ),
        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),
        nav: cn(
          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',
          defaultClassNames.button_next
        ),
        month_caption: cn(
          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          'absolute bg-popover inset-0 opacity-0',
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          'select-none font-medium',
          captionLayout === 'label'
            ? 'text-sm'
            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',
          defaultClassNames.caption_label
        ),
        table: 'w-full border-collapse',
        weekdays: cn('flex', defaultClassNames.weekdays),
        weekday: cn(
          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',
          defaultClassNames.weekday
        ),
        week: cn('flex w-full mt-2', defaultClassNames.week),
        week_number_header: cn(
          'select-none w-(--cell-size)',
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          'text-[0.8rem] select-none text-muted-foreground',
          defaultClassNames.week_number
        ),
        day: cn(
          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',
          defaultClassNames.day
        ),
        range_start: cn(
          'rounded-l-md bg-accent',
          defaultClassNames.range_start
        ),
        range_middle: cn('rounded-none', defaultClassNames.range_middle),
        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),
        today: cn(
          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',
          defaultClassNames.today
        ),
        outside: cn(
          'text-muted-foreground aria-selected:text-muted-foreground',
          defaultClassNames.outside
        ),
        disabled: cn(
          'text-muted-foreground opacity-50',
          defaultClassNames.disabled
        ),
        hidden: cn('invisible', defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          );
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === 'left') {
            return (
              <ChevronLeftIcon className={cn('size-4', className)} {...props} />
            );
          }

          if (orientation === 'right') {
            return (
              <ChevronRightIcon
                className={cn('size-4', className)}
                {...props}
              />
            );
          }

          return (
            <ChevronDownIcon className={cn('size-4', className)} {...props} />
          );
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          );
        },
        ...components,
      }}
      {...props}
    />
  );
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames();

  const ref = React.useRef<HTMLButtonElement>(null);
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus();
  }, [modifiers.focused]);

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  );
}

export { Calendar, CalendarDayButton };


=== client/components/ui/card.tsx ===
import * as React from 'react';

import { cn } from '@/lib/utils';

function Card({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card"
      className={cn(
        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',
        className
      )}
      {...props}
    />
  );
}

function CardHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',
        className
      )}
      {...props}
    />
  );
}

function CardTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-title"
      className={cn('leading-none font-semibold', className)}
      {...props}
    />
  );
}

function CardDescription({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

function CardAction({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',
        className
      )}
      {...props}
    />
  );
}

function CardContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-content"
      className={cn('px-6', className)}
      {...props}
    />
  );
}

function CardFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-footer"
      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}
      {...props}
    />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
};


=== client/components/ui/checkbox.tsx ===
import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { CheckIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        'peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  );
}

export { Checkbox };


=== client/components/ui/dialog.tsx ===
import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { XIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean;
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="dialog-header"
      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',
        className
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn('text-lg leading-none font-semibold', className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};


=== client/components/ui/dropdown-menu.tsx ===
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  );
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  );
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  );
}

function DropdownMenuItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: 'default' | 'destructive';
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  );
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
        className
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};


=== client/components/ui/form.tsx ===
import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

function FormItem({ className, ...props }: React.ComponentProps<'div'>) {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn('grid gap-2', className)}
        {...props}
      />
    </FormItemContext.Provider>
  );
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField();

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn('data-[error=true]:text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
}

function FormDescription({ className, ...props }: React.ComponentProps<'p'>) {
  const { formDescriptionId } = useFormField();

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

function FormMessage({ className, ...props }: React.ComponentProps<'p'>) {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? '') : props.children;

  if (!body) {
    return null;
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn('text-destructive text-sm', className)}
      {...props}
    >
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};


=== client/components/ui/input.tsx ===
import * as React from 'react';

import { cn } from '@/lib/utils';

function Input({ className, type, ...props }: React.ComponentProps<'input'>) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',
        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',
        className
      )}
      {...props}
    />
  );
}

export { Input };


=== client/components/ui/label.tsx ===
import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';

import { cn } from '@/lib/utils';

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',
        className
      )}
      {...props}
    />
  );
}

export { Label };


=== client/components/ui/navigation-menu.tsx ===
import * as React from 'react';
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';
import { cva } from 'class-variance-authority';
import { ChevronDownIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean;
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        'group/navigation-menu relative flex max-w-max flex-1 items-center justify-center',
        className
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  );
}

function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        'group flex flex-1 list-none items-center justify-center gap-1',
        className
      )}
      {...props}
    />
  );
}

function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn('relative', className)}
      {...props}
    />
  );
}

const navigationMenuTriggerStyle = cva(
  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1'
);

function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), 'group', className)}
      {...props}
    >
      {children}{' '}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  );
}

function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        'data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto',
        'group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none',
        className
      )}
      {...props}
    />
  );
}

function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={cn(
        'absolute top-full left-0 isolate z-50 flex justify-center'
      )}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          'origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]',
          className
        )}
        {...props}
      />
    </div>
  );
}

function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  );
}

function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        'data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',
        className
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  );
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
};


=== client/components/ui/popover.tsx ===
'use client';

import * as React from 'react';
import * as PopoverPrimitive from '@radix-ui/react-popover';

import { cn } from '@/lib/utils';

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />;
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />;
}

function PopoverContent({
  className,
  align = 'center',
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  );
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />;
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };


=== client/components/ui/progress.tsx ===
'use client';

import * as React from 'react';
import * as ProgressPrimitive from '@radix-ui/react-progress';

import { cn } from '@/lib/utils';

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  );
}

export { Progress };


=== client/components/ui/radio-group.tsx ===
'use client';

import * as React from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { CircleIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn('grid gap-3', className)}
      {...props}
    />
  );
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        'border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
}

export { RadioGroup, RadioGroupItem };


=== client/components/ui/scroll-area.tsx ===
'use client';

import * as React from 'react';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';

import { cn } from '@/lib/utils';

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn('relative', className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  );
}

function ScrollBar({
  className,
  orientation = 'vertical',
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        'flex touch-none p-px transition-colors select-none',
        orientation === 'vertical' &&
          'h-full w-2.5 border-l border-l-transparent',
        orientation === 'horizontal' &&
          'h-2.5 flex-col border-t border-t-transparent',
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  );
}

export { ScrollArea, ScrollBar };


=== client/components/ui/select.tsx ===
import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = 'default',
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: 'sm' | 'default';
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = 'popper',
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',
          position === 'popper' &&
            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            'p-1',
            position === 'popper' &&
              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1'
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        'flex cursor-default items-center justify-center py-1',
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        'flex cursor-default items-center justify-center py-1',
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};


=== client/components/ui/sheet.tsx ===
import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { XIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />;
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />;
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />;
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />;
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className
      )}
      {...props}
    />
  );
}

function SheetContent({
  className,
  children,
  side = 'right',
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: 'top' | 'right' | 'bottom' | 'left';
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
          side === 'right' &&
            'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',
          side === 'left' &&
            'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',
          side === 'top' &&
            'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b',
          side === 'bottom' &&
            'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t',
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  );
}

function SheetHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sheet-header"
      className={cn('flex flex-col gap-1.5 p-4', className)}
      {...props}
    />
  );
}

function SheetFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn('mt-auto flex flex-col gap-2 p-4', className)}
      {...props}
    />
  );
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn('text-foreground font-semibold', className)}
      {...props}
    />
  );
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};


=== client/components/ui/skeleton.tsx ===
import { cn } from '@/lib/utils';

function Skeleton({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="skeleton"
      className={cn('bg-accent animate-pulse rounded-md', className)}
      {...props}
    />
  );
}

export { Skeleton };


=== client/components/ui/sonner.tsx ===
import { useTheme } from 'next-themes';
import { Toaster as Sonner } from 'sonner';
import type { ToasterProps } from 'sonner';

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'system' } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      className="toaster group"
      style={
        {
          '--normal-bg': 'var(--popover)',
          '--normal-text': 'var(--popover-foreground)',
          '--normal-border': 'var(--border)',
        } as React.CSSProperties
      }
      {...props}
    />
  );
};

export { Toaster };


=== client/components/ui/spinner.tsx ===
import { Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

function Spinner({ className }: { className?: string }) {
  return (
    <div className={cn('flex justify-center items-center py-10', className)}>
      <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
      <span className="sr-only">Loading...</span>
    </div>
  );
}

export { Spinner };


=== client/components/ui/switch.tsx ===
import * as React from 'react';
import * as SwitchPrimitive from '@radix-ui/react-switch';

import { cn } from '@/lib/utils';

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0'
        )}
      />
    </SwitchPrimitive.Root>
  );
}

export { Switch };


=== client/components/ui/table.tsx ===
import * as React from 'react';

import { cn } from '@/lib/utils';

function Table({ className, ...props }: React.ComponentProps<'table'>) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn('w-full caption-bottom text-sm', className)}
        {...props}
      />
    </div>
  );
}

function TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {
  return (
    <thead
      data-slot="table-header"
      className={cn('[&_tr]:border-b', className)}
      {...props}
    />
  );
}

function TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {
  return (
    <tbody
      data-slot="table-body"
      className={cn('[&_tr:last-child]:border-0', className)}
      {...props}
    />
  );
}

function TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',
        className
      )}
      {...props}
    />
  );
}

function TableRow({ className, ...props }: React.ComponentProps<'tr'>) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',
        className
      )}
      {...props}
    />
  );
}

function TableHead({ className, ...props }: React.ComponentProps<'th'>) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
        className
      )}
      {...props}
    />
  );
}

function TableCell({ className, ...props }: React.ComponentProps<'td'>) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
        className
      )}
      {...props}
    />
  );
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<'caption'>) {
  return (
    <caption
      data-slot="table-caption"
      className={cn('text-muted-foreground mt-4 text-sm', className)}
      {...props}
    />
  );
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};


=== client/components/ui/tabs.tsx ===
'use client';

import * as React from 'react';
import * as TabsPrimitive from '@radix-ui/react-tabs';

import { cn } from '@/lib/utils';

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn('flex flex-col gap-2', className)}
      {...props}
    />
  );
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',
        className
      )}
      {...props}
    />
  );
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  );
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn('flex-1 outline-none', className)}
      {...props}
    />
  );
}

export { Tabs, TabsList, TabsTrigger, TabsContent };


=== client/components/ui/textarea.tsx ===
import * as React from 'react';

import { cn } from '@/lib/utils';

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.TextareaHTMLAttributes<HTMLTextAreaElement>
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = 'Textarea';

export { Textarea };


=== client/components/ui/tooltip.tsx ===
import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '@/lib/utils';

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  );
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  );
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          'bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  );
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };


=== client/index.css ===
@import 'tailwindcss';
@import 'tw-animate-css';

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}

.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.21 0.034 264.665);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.21 0.034 264.665);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.928 0.006 264.531);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
    overflow-y: scroll;
  }
}


=== client/lib/axios.ts ===
import axios from 'axios';
import { getDefaultStore } from 'jotai';
import { tokenAtom, userAtom } from '@/atoms/loginAtoms';

export const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '';
const instance = axios.create({
  baseURL: API_BASE_URL,
});

// Request interceptor to add authorization header
instance.interceptors.request.use(
  (config) => {
    const store = getDefaultStore();
    const token = store.get(tokenAtom);

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

instance.interceptors.response.use(
  (response) => response,
  (error) => {
    if (axios.isAxiosError(error)) {
      const status = error.response?.status;
      if (status === 401 || status === 403) {
        // Clear stored auth data and redirect to login
        const store = getDefaultStore();
        store.set(tokenAtom, null);
        store.set(userAtom, null);
        localStorage.removeItem('auth_token');
        localStorage.removeItem('auth_user');
        window.location.hash = '/login';
      }
    }
    return Promise.reject(error);
  }
);

export default instance;
export { isAxiosError } from 'axios';


=== client/lib/utils.ts ===
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatIDR(value: number) {
  return new Intl.NumberFormat('id-ID', {
    style: 'currency',
    currency: 'IDR',
  }).format(value);
}


=== client/main.tsx ===
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App';
import { initDrizzle } from '../server/db';

async function enableMocking() {
  await initDrizzle();
  const { worker } = await import('./mocks/browser');
  await worker.start({
    serviceWorker: { url: '/webappx/mockServiceWorker.js' },
  });
}

enableMocking().then(() => {
  createRoot(document.getElementById('root')!).render(
    <StrictMode>
      <App />
    </StrictMode>
  );
});


=== client/mocks/browser.ts ===
// client/mocks/browser.ts
import { setupWorker } from 'msw';
import { handlers } from '../../server/handlers';

export const worker = setupWorker(...handlers);


=== client/pages/AccountRecovery.tsx ===
import { useAtom } from 'jotai';
import { userAtom } from '@/atoms/loginAtoms';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

function AccountRecovery() {
  const [user] = useAtom(userAtom);
  return (
    <div className="flex justify-center p-4">
      <Card className="w-full max-w-lg">
        <CardHeader>
          <CardTitle>Account Recovery</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p>
            If you lost access to your wallet, contact our support team to
            verify your identity and update your address.
          </p>
          <div className="space-y-2">
            <Label>Registered Address</Label>
            <Input readOnly value={user?.ethereumAddress || ''} />
          </div>
          <Button asChild>
            <a href="mailto:support@example.com">Contact Support</a>
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}

export default AccountRecovery;


=== client/pages/Dashboard.tsx ===
import { useEffect, useState } from 'react';
import { useAtom, useAtomValue, useSetAtom } from 'jotai';
import axios from '@/lib/axios';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { DataTable } from '@/components/DataTable';
import type { ColumnDef } from '@tanstack/react-table';
import type { StabletokenTransaction } from '@/types/Transaction';
import {
  stabletokenBalanceAtom,
  transactionsAtom,
  refreshBalanceAtom,
  refreshTransactionsAtom,
} from '@/atoms/stabletokenAtoms';

function Dashboard() {
  const [amount, setAmount] = useState('');
  const [fiatAmount, setFiatAmount] = useState('');
  const [pending, setPending] = useState<{ id: string; amount: number }[]>([]);

  const [balance] = useAtom(stabletokenBalanceAtom);
  const transactions = useAtomValue(transactionsAtom);
  const refreshBalance = useSetAtom(refreshBalanceAtom);
  const refreshTransactions = useSetAtom(refreshTransactionsAtom);

  useEffect(() => {
    refreshBalance();
    refreshTransactions();
  }, [refreshBalance, refreshTransactions]);

  useEffect(() => {
    if (!pending.length) return;
    const interval = setInterval(() => {
      refreshTransactions();
      refreshBalance();
    }, 3000);
    return () => clearInterval(interval);
  }, [pending, refreshTransactions, refreshBalance]);

  useEffect(() => {
    if (!pending.length) return;
    setPending((p) =>
      p.filter((pp) => !transactions.find((t) => t.reference === pp.id))
    );
  }, [transactions, pending]);

  const handleMint = async () => {
    try {
      await axios.post('/api/mint', { amount: Number(amount) });
      setAmount('');
      refreshBalance();
      refreshTransactions();
    } catch (err) {
      console.error('Mint failed:', err);
    }
  };

  const handleFiatMint = async () => {
    try {
      const res = await axios.post('/api/payments/initiate', {
        amount: Number(fiatAmount),
      });
      window.open(res.data.paymentUrl, '_blank');
      setPending((p) => [
        ...p,
        { id: res.data.paymentId, amount: Number(fiatAmount) },
      ]);
      setFiatAmount('');
    } catch (err) {
      console.error('Payment initiate failed:', err);
    }
  };

  interface TxRow extends StabletokenTransaction {
    status?: string;
  }

  const columns: ColumnDef<TxRow>[] = [
    { accessorKey: 'id', header: 'ID', meta: { widthClass: 'w-24' } },
    { accessorKey: 'type', header: 'Type', meta: { widthClass: 'w-28' } },
    { accessorKey: 'amount', header: 'Amount', meta: { widthClass: 'w-28' } },
    {
      accessorKey: 'status',
      header: 'Status',
      meta: { widthClass: 'w-28' },
    },
    {
      accessorKey: 'createdAt',
      header: 'Date',
      meta: { widthClass: 'w-36' },
    },
  ];

  const tableData: TxRow[] = [
    ...pending.map((p, idx) => ({
      id: -1 - idx,
      userId: 0,
      amount: p.amount,
      type: 'payment',
      reference: p.id,
      createdAt: new Date().toISOString(),
      status: 'pending',
    })),
    ...transactions.map((t) => ({ ...t, status: 'completed' })),
  ];

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">Your Stabletoken Balance</h2>
        <div className="text-2xl font-bold">{balance}</div>
        <div className="flex space-x-2">
          <Input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            placeholder="Amount"
          />
          <Button onClick={handleMint}>Mint</Button>
        </div>
      </div>

      <div className="space-y-2">
        <h3 className="text-lg font-semibold">
          Mint Stabletoken (Pay by Fiat)
        </h3>
        <div className="flex space-x-2">
          <Input
            type="number"
            value={fiatAmount}
            onChange={(e) => setFiatAmount(e.target.value)}
            placeholder="Amount"
          />
          <Button onClick={handleFiatMint}>Pay</Button>
        </div>
      </div>

      <div className="pt-4">
        <h3 className="text-lg font-semibold mb-2">Recent Transactions</h3>
        <DataTable columns={columns} data={tableData} isLoading={false} />
      </div>
    </div>
  );
}

export default Dashboard;


=== client/pages/Loading.tsx ===
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAtom } from 'jotai';
import { tokenAtom, userAtom } from '../atoms/loginAtoms';
import Footer from '../components/Footer';

// Redirect users based on authentication. Guests are sent to the public home
// page while authenticated users land on their respective dashboards.
function Loading() {
  const navigate = useNavigate();
  const [token] = useAtom(tokenAtom);
  const [user] = useAtom(userAtom);

  useEffect(() => {
    console.log('Loading component - token:', token, 'user:', user);
    console.log('Current location:', window.location.href);

    // If authenticated, route to the proper dashboard
    if (token && user) {
      console.log('User authenticated, navigating to:', user.role);
      if (user.role === 'buyer') {
        navigate('/home', { replace: true });
      } else if (user.role === 'seller') {
        navigate('/seller', { replace: true });
      } else if (user.role === 'admin') {
        navigate('/admin', { replace: true });
      }
    } else {
      // Guests should land on the public home page
      navigate('/home', { replace: true });
    }
  }, [navigate, token, user]);

  return (
    <div className="flex flex-col items-center justify-center h-screen space-y-4">
      <div className="animate-spin rounded-full h-16 w-16 border-4 border-gray-300 border-t-transparent" />
      <Footer />
    </div>
  );
}

export default Loading;


=== client/pages/Login.tsx ===
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAtom, useSetAtom } from 'jotai';
import { tokenAtom, userAtom } from '@/atoms/loginAtoms';
import { loadWalletAtom } from '@/atoms/walletAtoms';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { AlertCircle, Loader2 } from 'lucide-react';
import WalletTutorial from '@/components/WalletTutorial';
import axios from '@/lib/axios';
import {
  createAppKit,
  useAppKit,
  useAppKitAccount,
  useAppKitNetworkCore,
  useAppKitProvider,
} from '@reown/appkit/react';
import { SiweMessage } from 'siwe';
import { EthersAdapter } from '@reown/appkit-adapter-ethers';
import { arbitrum, mainnet } from '@reown/appkit/networks';
import { BrowserProvider, JsonRpcSigner, type Eip1193Provider } from 'ethers';

// Initialize AppKit once
// createAppKit({
//   projectId: '3dc8fb97b90a536ce400e5d65a3f5ff8',
//   networks: [mainnet],
//   defaultNetwork: mainnet,
// features: {
//   email: true, // default to true
//   socials: [
//     "google",
//     "x",
//     "github",
//     "discord",
//     "apple",
//     "facebook",
//     "farcaster",
//   ],
//   emailShowWallets: true, // default to true
// },
// })

const metadata = {
  name: 'WebappX',
  description: 'WebappX',
  url: 'https://leledumbo549.github.io/webappx/',
  icons: ['https://leledumbo549.github.io/webappx/vite.svg'],
};

createAppKit({
  adapters: [new EthersAdapter()],
  networks: [mainnet, arbitrum],
  metadata,
  projectId: '4c36910043a61e836e1f9fdeec53cba3',
  defaultAccountTypes: { eip155: 'eoa' },
  enableNetworkSwitch: false,
  features: {
    email: false,
    socials: ['google', 'facebook'],
    emailShowWallets: false, // default to true
  },
});

function Login() {
  const navigate = useNavigate();
  const [, setToken] = useAtom(tokenAtom);
  const [, setUser] = useAtom(userAtom);
  const loadWallet = useSetAtom(loadWalletAtom);
  const { open } = useAppKit();
  const { address, isConnected } = useAppKitAccount();
  const { walletProvider } = useAppKitProvider<unknown>('eip155');
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);

  // const { address, isConnected } = useAppKitAccount();
  const { chainId } = useAppKitNetworkCore();
  // const { walletProvider } = useAppKitProvider('eip155');

  const handleConnect = async () => {
    setError(null);
    setIsConnecting(true);
    try {
      await Promise.resolve(open());
    } catch (err) {
      let msg = err instanceof Error ? err.message : 'Wallet connection failed';

      // Handle COOP-specific errors
      if (msg.includes('Cross-Origin-Opener-Policy') || msg.includes('COOP')) {
        msg =
          'Wallet popup blocked by browser security. Please allow popups for this site or try refreshing the page.';
      }

      setError(msg);
      console.error('Wallet connection error:', err);
    } finally {
      setIsConnecting(false);
    }
  };

  const handleSignIn = async () => {
    if (!walletProvider || !address) return;
    setIsLoading(true);
    setError(null);

    try {
      const nonce = Math.random().toString(36).substring(2, 10);
      const cfg = {
        domain: window.location.host,
        address,
        statement: 'Sign in with Ethereum to MarketPlace',
        uri: window.location.origin,
        version: '1',
        chainId: chainId,
        nonce,
      };

      const msg = new SiweMessage(cfg as Partial<SiweMessage>);
      const message = msg.prepareMessage();
      const signerProvider = new BrowserProvider(
        walletProvider as unknown as Eip1193Provider,
        Number(chainId)
      );
      const signer = new JsonRpcSigner(signerProvider, address);
      const signature = await signer.signMessage(message);

      // const signature = await (
      //   walletProvider as unknown as {
      //     request: (args: {
      //       method: string
      //       params: unknown[]
      //     }) => Promise<string>
      //   }
      // ).request({
      //   method: 'personal_sign',
      //   params: [message, address],
      // })

      const res = await axios.post('/api/login/siwe', { message, signature });
      setToken(res.data.token);
      setUser(res.data.user);
      await loadWallet();
      navigate('/home', { replace: true });
    } catch (err) {
      console.log('!!!');
      const msg = err instanceof Error ? err.message : 'Login failed';
      setError(msg);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted/20">
      <Card className="w-full max-w-md shadow-lg border-0">
        <CardHeader>
          <CardTitle className="text-xl text-center">
            Sign In with Ethereum
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-center text-sm">
            Wallet Status:{' '}
            <Badge variant={isConnected ? 'default' : 'secondary'}>
              {isConnected ? 'Connected' : 'Not Connected'}
            </Badge>
          </p>

          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {isConnected ? (
            <div className="space-y-4">
              <Input readOnly value={address} />
              <Button
                className="w-full"
                onClick={handleSignIn}
                disabled={isLoading || isConnecting}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Signing
                    in...
                  </>
                ) : (
                  'Sign In'
                )}
              </Button>
            </div>
          ) : (
            <div className="space-y-2">
              <Button
                className="w-full"
                onClick={handleConnect}
                disabled={isConnecting || isLoading}
              >
                {isConnecting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />{' '}
                    Connecting...
                  </>
                ) : (
                  'Connect Wallet'
                )}
              </Button>
              <p className="text-xs text-muted-foreground text-center">
                If connection fails, try allowing popups or refresh the page
              </p>
            </div>
          )}
          <div className="text-center">
            <WalletTutorial />
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default Login;


=== client/pages/Register.tsx ===
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAtom, useSetAtom } from 'jotai';
import { tokenAtom, userAtom } from '@/atoms/loginAtoms';
import { loadWalletAtom } from '@/atoms/walletAtoms';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '../components/ui/card';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Button } from '../components/ui/button';
import { RadioGroup, RadioGroupItem } from '../components/ui/radio-group';
import { Textarea } from '../components/ui/textarea';
import { Alert, AlertDescription } from '../components/ui/alert';
import axios from '@/lib/axios';
import {
  createAppKit,
  useAppKit,
  useAppKitAccount,
  useAppKitNetworkCore,
  useAppKitProvider,
} from '@reown/appkit/react';
import { EthersAdapter } from '@reown/appkit-adapter-ethers';
import { arbitrum, mainnet } from '@reown/appkit/networks';
import { BrowserProvider, JsonRpcSigner, type Eip1193Provider } from 'ethers';
import { SiweMessage } from 'siwe';
import { Store, AlertCircle, CheckCircle2, Loader2 } from 'lucide-react';
import WalletTutorial from '@/components/WalletTutorial';

createAppKit({
  adapters: [new EthersAdapter()],
  networks: [mainnet, arbitrum],
  projectId: '3dc8fb97b90a536ce400e5d65a3f5ff8',
  defaultAccountTypes: { eip155: 'eoa' },
  enableNetworkSwitch: false,
  features: {
    email: false,
    socials: ['google', 'facebook'],
    emailShowWallets: false,
  },
});

function Register() {
  const navigate = useNavigate();
  const [, setToken] = useAtom(tokenAtom);
  const [, setUser] = useAtom(userAtom);
  const loadWallet = useSetAtom(loadWalletAtom);
  const { open } = useAppKit();
  const { address, isConnected } = useAppKitAccount();
  const { walletProvider } = useAppKitProvider<unknown>('eip155');
  const { chainId } = useAppKitNetworkCore();
  const [role, setRole] = useState<'buyer' | 'seller'>('buyer');
  const [isLoading, setIsLoading] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  const handleConnect = async () => {
    setError(null);
    setIsConnecting(true);
    try {
      await Promise.resolve(open());
    } catch (err) {
      const msg =
        err instanceof Error ? err.message : 'Wallet connection failed';
      setError(msg);
    } finally {
      setIsConnecting(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!walletProvider || !address) {
      await handleConnect();
      if (!walletProvider || !address) return;
    }
    setError(null);
    setSuccess(false);
    setIsLoading(true);

    const formData = new FormData(e.currentTarget);

    try {
      const nonce = Math.random().toString(36).substring(2, 10);
      const msg = new SiweMessage({
        domain: window.location.host,
        address,
        statement: 'Sign in with Ethereum to MarketPlace',
        uri: window.location.origin,
        version: '1',
        chainId,
        nonce,
      } as Partial<SiweMessage>);
      const message = msg.prepareMessage();
      const signerProvider = new BrowserProvider(
        walletProvider as unknown as Eip1193Provider,
        Number(chainId)
      );
      const signer = new JsonRpcSigner(signerProvider, address);
      const signature = await signer.signMessage(message);
      const res = await axios.post('/api/login/siwe', { message, signature });
      setToken(res.data.token);
      setUser(res.data.user);

      const profile: Record<string, unknown> = {
        name: formData.get('name'),
        username: formData.get('username'),
        role,
      };
      await axios.put('/api/me', profile, {
        headers: { Authorization: `Bearer ${res.data.token}` },
      });

      if (role === 'seller') {
        await axios.put(
          '/api/seller/profile',
          {
            name: formData.get('storeName'),
            contact: formData.get('contact'),
            bio: formData.get('bio'),
          },
          { headers: { Authorization: `Bearer ${res.data.token}` } }
        );
      }

      await loadWallet();
      setSuccess(true);
      setTimeout(() => navigate('/home', { replace: true }), 500);
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to register';
      setError(message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted/20">
      <div className="w-full max-w-md space-y-6">
        <div className="text-center space-y-2">
          <div className="flex items-center justify-center space-x-2">
            <div className="p-2 bg-primary/10 rounded-lg">
              <Store className="h-6 w-6 text-primary" />
            </div>
            <span className="font-bold text-2xl">MarketPlace</span>
          </div>
          <h2 className="text-xl font-semibold text-foreground">
            Create an account
          </h2>
        </div>
        <Card className="shadow-lg border-0">
          <CardHeader className="space-y-1 pb-4">
            <CardTitle className="text-xl text-center">Register</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="name" className="text-sm font-medium">
                  Full Name
                </Label>
                <Input id="name" name="name" required disabled={isLoading} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="username" className="text-sm font-medium">
                  Username
                </Label>
                <Input
                  id="username"
                  name="username"
                  required
                  disabled={isLoading}
                />
              </div>
              <div className="space-y-2">
                <Label className="text-sm font-medium">Role</Label>
                <RadioGroup
                  value={role}
                  onValueChange={(val) => setRole(val as 'buyer' | 'seller')}
                  className="flex gap-4"
                >
                  <Label className="flex items-center gap-2">
                    <RadioGroupItem value="buyer" /> Buyer
                  </Label>
                  <Label className="flex items-center gap-2">
                    <RadioGroupItem value="seller" /> Seller
                  </Label>
                </RadioGroup>
              </div>
              {role === 'seller' && (
                <>
                  <div className="space-y-2">
                    <Label htmlFor="storeName" className="text-sm font-medium">
                      Store Name
                    </Label>
                    <Input
                      id="storeName"
                      name="storeName"
                      required
                      disabled={isLoading}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="contact" className="text-sm font-medium">
                      Contact
                    </Label>
                    <Input id="contact" name="contact" disabled={isLoading} />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="bio" className="text-sm font-medium">
                      Bio
                    </Label>
                    <Textarea
                      id="bio"
                      name="bio"
                      rows={3}
                      disabled={isLoading}
                    />
                  </div>
                </>
              )}
              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {success && (
                <Alert>
                  <CheckCircle2 className="h-4 w-4" />
                  <AlertDescription>
                    Account created, redirecting...
                  </AlertDescription>
                </Alert>
              )}
              {isConnected ? (
                <div className="space-y-4">
                  <Input readOnly value={address} />
                  <Button
                    type="submit"
                    className="w-full h-10"
                    disabled={isLoading || isConnecting}
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />{' '}
                        Registering...
                      </>
                    ) : (
                      'Register'
                    )}
                  </Button>
                </div>
              ) : (
                <Button
                  type="button"
                  className="w-full"
                  onClick={handleConnect}
                  disabled={isConnecting || isLoading}
                >
                  {isConnecting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />{' '}
                      Connecting...
                    </>
                  ) : (
                    'Connect Wallet'
                  )}
                </Button>
              )}
              <div className="text-center">
                <WalletTutorial />
              </div>
            </form>
          </CardContent>
        </Card>
        <p className="text-center text-sm">
          Already have an account?{' '}
          <button
            type="button"
            className="underline"
            onClick={() => navigate('/login')}
          >
            Login
          </button>
        </p>
      </div>
    </div>
  );
}

export default Register;


=== client/pages/admin/AdminDashboard.tsx ===
import { useEffect, useState } from 'react';
import axios from '@/lib/axios';
import { Skeleton } from '@/components/ui/skeleton';
import { formatIDR } from '@/lib/utils';

interface Stats {
  totalUsers: number;
  totalSellers: number;
  totalSales: number;
  openReports: number;
  totalWallets: number;
}

function AdminDashboard() {
  const [stats, setStats] = useState<Stats | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchStats = async () => {
      setLoading(true);
      try {
        const res = await axios.get<Stats>('/api/admin/dashboard');
        setStats(res.data);
      } catch (error) {
        console.error('AdminDashboard: Error fetching stats:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchStats();
  }, []);

  if (loading || !stats) {
    return (
      <div className="grid grid-cols-2 gap-4">
        {[...Array(4)].map((_, i) => (
          <Skeleton key={i} className="h-24" />
        ))}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-2 gap-4">
      <div className="p-4 border rounded">
        <p className="text-sm text-muted-foreground">Total Users</p>
        <p className="text-2xl font-bold">{stats.totalUsers}</p>
      </div>
      <div className="p-4 border rounded">
        <p className="text-sm text-muted-foreground">Total Sellers</p>
        <p className="text-2xl font-bold">{stats.totalSellers}</p>
      </div>
      <div className="p-4 border rounded">
        <p className="text-sm text-muted-foreground">Total Sales</p>
        <p className="text-2xl font-bold">{formatIDR(stats.totalSales)}</p>
      </div>
      <div className="p-4 border rounded">
        <p className="text-sm text-muted-foreground">Open Reports</p>
        <p className="text-2xl font-bold">{stats.openReports}</p>
      </div>
      <div className="p-4 border rounded">
        <p className="text-sm text-muted-foreground">Total Wallets</p>
        <p className="text-2xl font-bold">{stats.totalWallets}</p>
      </div>
    </div>
  );
}

export default AdminDashboard;


=== client/pages/admin/ManageProducts.tsx ===
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import { DataTable } from '@/components/DataTable';
import { Button } from '@/components/ui/button';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import type { ColumnDef } from '@tanstack/react-table';
import type { AdminProduct } from '@/types/Admin';
import { Eye } from 'lucide-react';
import { formatIDR } from '@/lib/utils';

function ManageProducts() {
  const [data, setData] = useState<AdminProduct[]>([]);
  const [loading, setLoading] = useState(false);
  const [target, setTarget] = useState<{
    product: AdminProduct;
    action: 'approve' | 'reject' | 'flag' | 'remove' | 'unflag';
  } | null>(null);
  const navigate = useNavigate();

  const fetchData = async () => {
    setLoading(true);
    const res = await axios.get<AdminProduct[]>('/api/admin/products');
    setData(res.data);
    setLoading(false);
  };

  useEffect(() => {
    fetchData();
  }, []);

  const updateStatus = async (p: AdminProduct, action: string) => {
    await axios.patch(`/api/admin/products/${p.id}`, { action });
    fetchData();
  };

  const columns: ColumnDef<AdminProduct>[] = [
    {
      accessorKey: 'name',
      header: 'Name',
      meta: { widthClass: 'w-40', cellClass: 'truncate' },
    },
    {
      accessorKey: 'price',
      header: 'Price',
      cell: ({ row }) => formatIDR(row.original.price),
      meta: { widthClass: 'hidden md:table-cell w-24', cellClass: 'truncate' },
    },
    {
      accessorKey: 'status',
      header: 'Status',
      meta: { widthClass: 'w-24', cellClass: 'truncate' },
    },
    {
      id: 'actions',
      header: 'Actions',
      cell: ({ row }) => {
        const p = row.original;
        return (
          <div className="flex gap-1 justify-end">
            <Button
              size="sm"
              variant="outline"
              onClick={() => navigate(`/admin/products/${p.id}`)}
            >
              <Eye className="h-4 w-4" />
            </Button>
            {p.status === 'pending' && (
              <>
                <Button
                  size="sm"
                  onClick={() => setTarget({ product: p, action: 'approve' })}
                >
                  Approve
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => setTarget({ product: p, action: 'reject' })}
                >
                  Reject
                </Button>
              </>
            )}
            {p.status === 'active' && (
              <>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setTarget({ product: p, action: 'flag' })}
                >
                  Flag
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => setTarget({ product: p, action: 'remove' })}
                >
                  Remove
                </Button>
              </>
            )}
          </div>
        );
      },
      enableSorting: false,
      meta: { widthClass: 'w-40' },
    },
  ];

  return (
    <>
      <DataTable columns={columns} data={data} isLoading={loading} />
      <AlertDialog open={!!target} onOpenChange={(o) => !o && setTarget(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              {(() => {
                if (!target) return '';
                const label =
                  target.action === 'unflag'
                    ? 'Unflag'
                    : target.action.charAt(0).toUpperCase() +
                      target.action.slice(1);
                return `${label} this product?`;
              })()}
            </AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (target)
                  updateStatus(
                    target.product,
                    target.action === 'unflag' ? 'approve' : target.action
                  );
                setTarget(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default ManageProducts;


=== client/pages/admin/ManageSellers.tsx ===
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import { DataTable } from '@/components/DataTable';
import { Button } from '@/components/ui/button';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import type { ColumnDef } from '@tanstack/react-table';
import type { AdminSeller } from '@/types/Admin';
import { Eye } from 'lucide-react';

function ManageSellers() {
  const [data, setData] = useState<AdminSeller[]>([]);
  const [loading, setLoading] = useState(false);
  const [target, setTarget] = useState<{
    seller: AdminSeller;
    action: 'activate' | 'deactivate' | 'approve' | 'reject';
  } | null>(null);
  const navigate = useNavigate();

  const fetchData = async () => {
    setLoading(true);
    const res = await axios.get<AdminSeller[]>('/api/admin/sellers');
    setData(res.data);
    setLoading(false);
  };

  useEffect(() => {
    fetchData();
  }, []);

  const updateStatus = async (s: AdminSeller, action: string) => {
    await axios.patch(`/api/admin/sellers/${s.id}`, { action });
    fetchData();
  };

  const columns: ColumnDef<AdminSeller>[] = [
    {
      accessorKey: 'name',
      header: 'Name',
      meta: { widthClass: 'w-40', cellClass: 'truncate' },
    },
    {
      accessorKey: 'status',
      header: 'Status',
      meta: { widthClass: 'hidden md:table-cell w-28', cellClass: 'truncate' },
    },
    {
      id: 'actions',
      header: 'Actions',
      cell: ({ row }) => {
        const s = row.original;
        return (
          <div className="flex gap-1 justify-end">
            <Button
              size="sm"
              variant="outline"
              onClick={() => navigate(`/admin/sellers/${s.id}`)}
            >
              <Eye className="h-4 w-4" />
            </Button>
            {s.status === 'pending' && (
              <>
                <Button
                  size="sm"
                  onClick={() => setTarget({ seller: s, action: 'approve' })}
                >
                  Approve
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => setTarget({ seller: s, action: 'reject' })}
                >
                  Reject
                </Button>
              </>
            )}
            {s.status === 'active' && (
              <Button
                variant="destructive"
                size="sm"
                onClick={() => setTarget({ seller: s, action: 'deactivate' })}
              >
                Deactivate
              </Button>
            )}
            {s.status === 'inactive' && (
              <Button
                size="sm"
                onClick={() => setTarget({ seller: s, action: 'activate' })}
              >
                Activate
              </Button>
            )}
          </div>
        );
      },
      enableSorting: false,
      meta: { widthClass: 'w-40' },
    },
  ];

  return (
    <>
      <DataTable columns={columns} data={data} isLoading={loading} />
      <AlertDialog open={!!target} onOpenChange={(o) => !o && setTarget(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              {`${
                target?.action
                  ? target.action.charAt(0).toUpperCase() +
                    target.action.slice(1)
                  : ''
              }`}{' '}
              this seller?
            </AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (target) updateStatus(target.seller, target.action);
                setTarget(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default ManageSellers;


=== client/pages/admin/ManageUsers.tsx ===
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import { DataTable } from '@/components/DataTable';
import type { ColumnDef } from '@tanstack/react-table';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import type { AdminUser } from '@/types/Admin';
import { Eye } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

function ManageUsers() {
  const [data, setData] = useState<AdminUser[]>([]);
  const [loading, setLoading] = useState(false);
  const [target, setTarget] = useState<AdminUser | null>(null);
  const navigate = useNavigate();

  const getRoleBadgeClass = (role: string) => {
    switch (role) {
      case 'admin':
        return 'bg-purple-100 text-purple-800';
      case 'seller':
        return 'bg-blue-100 text-blue-800';
      case 'buyer':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'banned':
        return 'bg-red-100 text-red-800';
      case 'inactive':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const fetchData = async () => {
    setLoading(true);
    const res = await axios.get<AdminUser[]>('/api/admin/users');
    setData(res.data);
    setLoading(false);
  };

  useEffect(() => {
    fetchData();
  }, []);

  const toggleBan = async (user: AdminUser) => {
    await axios.patch(`/api/admin/users/${user.id}`, { action: 'toggleBan' });
    fetchData();
  };

  const columns: ColumnDef<AdminUser>[] = [
    {
      accessorKey: 'name',
      header: 'Name',
      meta: { widthClass: 'w-40', cellClass: 'truncate' },
    },
    {
      accessorKey: 'ethereumAddress',
      header: 'Address',
      meta: { widthClass: 'hidden md:table-cell w-64', cellClass: 'truncate' },
    },
    {
      accessorKey: 'role',
      header: 'Role',
      cell: ({ row }) => (
        <Badge
          variant="secondary"
          className={`capitalize rounded-full ${getRoleBadgeClass(
            row.original.role || 'buyer'
          )}`}
        >
          {row.original.role}
        </Badge>
      ),
      meta: { widthClass: 'hidden md:table-cell w-24', cellClass: 'truncate' },
    },
    {
      accessorKey: 'status',
      header: 'Status',
      cell: ({ row }) => (
        <Badge
          variant="secondary"
          className={`capitalize rounded-full ${getStatusBadgeClass(
            row.original.status || 'active'
          )}`}
        >
          {row.original.status}
        </Badge>
      ),
      meta: { widthClass: 'w-24', cellClass: 'truncate' },
    },
    {
      id: 'actions',
      header: 'Actions',
      cell: ({ row }) => {
        const u = row.original;
        return (
          <div className="flex gap-1 justify-end">
            <Button
              size="sm"
              variant="outline"
              onClick={() => navigate(`/admin/users/${u.id}`)}
            >
              <Eye className="h-4 w-4" />
            </Button>
            <Button
              variant={u.status === 'banned' ? 'secondary' : 'destructive'}
              size="sm"
              onClick={() => setTarget(u)}
            >
              {u.status === 'banned' ? 'Unban' : 'Ban'}
            </Button>
          </div>
        );
      },
      enableSorting: false,
      meta: { widthClass: 'w-24' },
    },
  ];

  return (
    <>
      <DataTable columns={columns} data={data} isLoading={loading} />
      <AlertDialog open={!!target} onOpenChange={(o) => !o && setTarget(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              {target?.status === 'banned' ? 'Unban' : 'Ban'} this user?
            </AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (target) toggleBan(target);
                setTarget(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default ManageUsers;


=== client/pages/admin/Reports.tsx ===
import { useEffect, useState } from 'react';
import axios from '@/lib/axios';
import { DataTable } from '@/components/DataTable';
import { Button } from '@/components/ui/button';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import type { ColumnDef } from '@tanstack/react-table';
import type { AdminReport } from '@/types/Admin';

function Reports() {
  const [data, setData] = useState<AdminReport[]>([]);
  const [loading, setLoading] = useState(false);
  const [target, setTarget] = useState<AdminReport | null>(null);

  const fetchData = async () => {
    setLoading(true);
    const res = await axios.get<AdminReport[]>('/api/admin/reports');
    setData(res.data);
    setLoading(false);
  };

  useEffect(() => {
    fetchData();
  }, []);

  const resolve = async (r: AdminReport) => {
    await axios.patch(`/api/admin/reports/${r.id}`, { action: 'resolve' });
    fetchData();
  };

  const columns: ColumnDef<AdminReport>[] = [
    {
      accessorKey: 'message',
      header: 'Message',
      meta: {
        widthClass: 'w-64',
        cellClass: 'whitespace-normal break-words',
      },
    },
    {
      accessorKey: 'status',
      header: 'Status',
      meta: { widthClass: 'hidden md:table-cell w-24', cellClass: 'truncate' },
    },
    {
      id: 'actions',
      header: 'Actions',
      cell: ({ row }) => {
        const rep = row.original;
        return rep.status === 'open' ? (
          <Button size="sm" onClick={() => setTarget(rep)}>
            Resolve
          </Button>
        ) : null;
      },
      enableSorting: false,
      meta: { widthClass: 'w-24' },
    },
  ];

  return (
    <>
      <DataTable columns={columns} data={data} isLoading={loading} />
      <AlertDialog open={!!target} onOpenChange={(o) => !o && setTarget(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Resolve this report?</AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (target) resolve(target);
                setTarget(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default Reports;


=== client/pages/admin/SiteSettings.tsx ===
import { useEffect, useState } from 'react';
import axios from '@/lib/axios';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Skeleton } from '@/components/ui/skeleton';
import { toast } from 'sonner';
import type { AdminSettings } from '@/types/Admin';
import { Settings, Save, AlertCircle, Loader2 } from 'lucide-react';

function SiteSettings() {
  const [data, setData] = useState<AdminSettings | null>(null);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await axios.get<AdminSettings>('/api/admin/settings');
      setData(res.data);
    } catch (err) {
      console.error('Failed to load settings:', err);
      setError('Failed to load settings. Please try again.');
      toast.error('Failed to load settings');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!data) return;

    setSaving(true);
    setError(null);

    try {
      const res = await axios.put<AdminSettings>('/api/admin/settings', data);
      setData(res.data);
      toast.success('Settings saved successfully!');
    } catch (err) {
      console.error('Failed to save settings:', err);
      setError('Failed to save settings. Please try again.');
      toast.error('Failed to save settings');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="space-y-2">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-4 w-64" />
        </div>
        <Card>
          <CardContent className="p-6 space-y-4">
            {Array.from({ length: 2 }).map((_, i) => (
              <div key={i} className="space-y-2">
                <Skeleton className="h-4 w-32" />
                <Skeleton className="h-10 w-full" />
              </div>
            ))}
            <Skeleton className="h-10 w-24" />
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  if (!data) {
    return (
      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>No settings data available</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <div className="p-2 bg-primary/10 rounded-lg">
            <Settings className="h-5 w-5 text-primary" />
          </div>
          <h1 className="text-3xl font-bold tracking-tight">Site Settings</h1>
        </div>
        <p className="text-muted-foreground">
          Configure global marketplace settings and preferences
        </p>
      </div>

      {/* Settings Form */}
      <Card>
        <CardHeader>
          <CardTitle>General Settings</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="fees" className="text-sm font-medium">
                  Marketplace Fee (%)
                </Label>
                <Input
                  id="fees"
                  type="number"
                  min="0"
                  max="100"
                  step="0.1"
                  value={data.fees || ''}
                  onChange={(e) =>
                    setData({ ...data, fees: Number(e.target.value) })
                  }
                  placeholder="Enter fee percentage"
                  disabled={saving}
                />
                <p className="text-xs text-muted-foreground">
                  Percentage fee charged on each transaction
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="payout" className="text-sm font-medium">
                  Payout Delay (days)
                </Label>
                <Input
                  id="payout"
                  type="number"
                  min="0"
                  max="365"
                  value={data.payoutDelay || ''}
                  onChange={(e) =>
                    setData({ ...data, payoutDelay: Number(e.target.value) })
                  }
                  placeholder="Enter delay in days"
                  disabled={saving}
                />
                <p className="text-xs text-muted-foreground">
                  Number of days before sellers receive payouts
                </p>
              </div>
            </div>

            <div className="flex items-center gap-4 pt-4">
              <Button
                type="submit"
                disabled={saving || loading}
                className="min-w-[120px]"
              >
                {saving ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="mr-2 h-4 w-4" />
                    Save Settings
                  </>
                )}
              </Button>

              {saving && (
                <p className="text-sm text-muted-foreground">
                  Updating settings...
                </p>
              )}
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

export default SiteSettings;


=== client/pages/admin/ViewProduct.tsx ===
import { useEffect, useState, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import type { Product } from '@/types/Product';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft } from 'lucide-react';
import { Spinner } from '@/components/ui/spinner';
import { formatIDR } from '@/lib/utils';

function ViewProduct() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [product, setProduct] = useState<Product | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [targetAction, setTargetAction] = useState<
    'approve' | 'reject' | 'flag' | 'remove' | 'unflag' | null
  >(null);

  const fetchProduct = useCallback(async () => {
    if (!id) return;

    setLoading(true);
    try {
      const res = await axios.get<Product>(`/api/admin/products/${id}`);
      setProduct(res.data);
    } catch (err) {
      console.error('Failed to load product:', err);
      setError('Failed to load product details');
    } finally {
      setLoading(false);
    }
  }, [id]);

  const handleStatusUpdate = async (action: string) => {
    if (!product) return;

    try {
      await axios.patch(`/api/admin/products/${product.id}`, { action });
      await fetchProduct(); // Refresh the product data
    } catch (err) {
      console.error('Failed to update product status:', err);
      setError('Failed to update product status');
    }
  };

  useEffect(() => {
    fetchProduct();
  }, [fetchProduct]);

  if (loading) return <Spinner />;
  if (error) return <div className="text-red-600">{error}</div>;
  if (!product) return <div>Product not found.</div>;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'inactive':
        return 'bg-gray-100 text-gray-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'flagged':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <>
      <div className="max-w-4xl mx-auto p-6">
        <div className="flex items-center gap-4 mb-6">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigate('/admin/products')}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Products
          </Button>
          <h1 className="text-2xl font-bold">Product Details</h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                {product.name}
                <Badge
                  variant="secondary"
                  className={`rounded-full ${getStatusColor(product.status || 'inactive')}`}
                >
                  {product.status}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {product.imageUrl && (
                <div className="aspect-square overflow-hidden rounded-lg">
                  <img
                    src={product.imageUrl}
                    alt={product.name}
                    className="w-full h-full object-cover"
                  />
                </div>
              )}

              <div className="space-y-2">
                <div>
                  <span className="font-semibold">Price:</span>{' '}
                  {formatIDR(product.price)}
                </div>
                <div>
                  <span className="font-semibold">Seller ID:</span>{' '}
                  {product.sellerId}
                </div>
                {product.description && (
                  <div>
                    <span className="font-semibold">Description:</span>
                    <p className="mt-1 text-sm text-gray-600">
                      {product.description}
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Admin Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {product.status === 'pending' && (
                <>
                  <Button
                    className="w-full"
                    onClick={() => setTargetAction('approve')}
                  >
                    Approve Product
                  </Button>
                  <Button
                    variant="destructive"
                    className="w-full"
                    onClick={() => setTargetAction('reject')}
                  >
                    Reject Product
                  </Button>
                </>
              )}

              {product.status === 'active' && (
                <>
                  <Button
                    variant="outline"
                    className="w-full"
                    onClick={() => setTargetAction('flag')}
                  >
                    Flag Product
                  </Button>
                  <Button
                    variant="destructive"
                    className="w-full"
                    onClick={() => setTargetAction('remove')}
                  >
                    Remove Product
                  </Button>
                </>
              )}

              {product.status === 'flagged' && (
                <>
                  <Button
                    className="w-full"
                    onClick={() => setTargetAction('unflag')}
                  >
                    Unflag Product
                  </Button>
                  <Button
                    variant="destructive"
                    className="w-full"
                    onClick={() => setTargetAction('remove')}
                  >
                    Remove Product
                  </Button>
                </>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
      <AlertDialog
        open={!!targetAction}
        onOpenChange={(o) => !o && setTargetAction(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              {(() => {
                if (!targetAction) return '';
                const label =
                  targetAction === 'unflag'
                    ? 'Unflag'
                    : targetAction.charAt(0).toUpperCase() +
                      targetAction.slice(1);
                return `${label} product?`;
              })()}
            </AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (targetAction)
                  handleStatusUpdate(
                    targetAction === 'unflag' ? 'approve' : targetAction
                  );
                setTargetAction(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default ViewProduct;


=== client/pages/admin/ViewSeller.tsx ===
import { useEffect, useState, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import type { Seller } from '@/server/schema';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { ArrowLeft } from 'lucide-react';
import { Spinner } from '@/components/ui/spinner';

function ViewSeller() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [seller, setSeller] = useState<Seller | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [targetAction, setTargetAction] = useState<
    'activate' | 'deactivate' | 'approve' | 'reject' | null
  >(null);

  const fetchSeller = useCallback(async () => {
    if (!id) return;

    setLoading(true);
    try {
      const res = await axios.get<Seller>(`/api/admin/sellers/${id}`);
      setSeller(res.data);
    } catch (err) {
      console.error('Failed to load seller:', err);
      setError('Failed to load seller details');
    } finally {
      setLoading(false);
    }
  }, [id]);

  const handleStatusUpdate = async (action: string) => {
    if (!seller) return;

    try {
      await axios.patch(`/api/admin/sellers/${seller.id}`, { action });
      await fetchSeller(); // Refresh the seller data
    } catch (err) {
      console.error('Failed to update seller status:', err);
      setError('Failed to update seller status');
    }
  };

  useEffect(() => {
    fetchSeller();
  }, [fetchSeller]);

  if (loading) return <Spinner />;
  if (error) return <div className="text-red-600">{error}</div>;
  if (!seller) return <div>Seller not found.</div>;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'inactive':
        return 'bg-gray-100 text-gray-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <>
      <div className="max-w-4xl mx-auto p-6">
        <div className="flex items-center gap-4 mb-6">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigate('/admin/sellers')}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Sellers
          </Button>
          <h1 className="text-2xl font-bold">Seller Details</h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                {seller.name}
                <Badge
                  variant="secondary"
                  className={`rounded-full ${getStatusColor(seller.status || 'inactive')}`}
                >
                  {seller.status}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {seller.logo && (
                <div className="aspect-square w-32 overflow-hidden rounded-lg">
                  <img
                    src={seller.logo}
                    alt={seller.name}
                    className="w-full h-full object-cover"
                  />
                </div>
              )}

              <div className="space-y-2">
                <div>
                  <span className="font-semibold">Seller ID:</span> {seller.id}
                </div>
                <div>
                  <span className="font-semibold">User ID:</span>{' '}
                  {seller.userId}
                </div>
                {seller.bio && (
                  <div>
                    <span className="font-semibold">Bio:</span>
                    <p className="mt-1 text-sm text-gray-600">{seller.bio}</p>
                  </div>
                )}
                {seller.contact && (
                  <div>
                    <span className="font-semibold">Contact:</span>
                    <p className="mt-1 text-sm text-gray-600">
                      {seller.contact}
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Admin Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {seller.status === 'pending' && (
                <>
                  <Button
                    className="w-full"
                    onClick={() => setTargetAction('approve')}
                  >
                    Approve Seller
                  </Button>
                  <Button
                    variant="destructive"
                    className="w-full"
                    onClick={() => setTargetAction('reject')}
                  >
                    Reject Seller
                  </Button>
                </>
              )}

              {seller.status === 'active' && (
                <Button
                  variant="destructive"
                  className="w-full"
                  onClick={() => setTargetAction('deactivate')}
                >
                  Deactivate Seller
                </Button>
              )}

              {seller.status === 'inactive' && (
                <Button
                  className="w-full"
                  onClick={() => setTargetAction('activate')}
                >
                  Activate Seller
                </Button>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
      <AlertDialog
        open={!!targetAction}
        onOpenChange={(o) => !o && setTargetAction(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              {targetAction
                ? `${targetAction.charAt(0).toUpperCase()}${targetAction.slice(1)}`
                : ''}{' '}
              seller?
            </AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (targetAction) handleStatusUpdate(targetAction);
                setTargetAction(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default ViewSeller;


=== client/pages/admin/ViewUser.tsx ===
import { useEffect, useState, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import type { User } from '@/server/schema';
import { Button } from '@/components/ui/button';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft } from 'lucide-react';
import { Spinner } from '@/components/ui/spinner';
import { Badge } from '@/components/ui/badge';

function ViewUser() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [confirm, setConfirm] = useState(false);

  const fetchUser = useCallback(async () => {
    if (!id) return;

    setLoading(true);
    try {
      const res = await axios.get<User>(`/api/admin/users/${id}`);
      setUser(res.data);
    } catch (err) {
      console.error('Failed to load user:', err);
      setError('Failed to load user details');
    } finally {
      setLoading(false);
    }
  }, [id]);

  const handleToggleBan = async () => {
    if (!user) return;

    try {
      await axios.patch(`/api/admin/users/${user.id}`, { action: 'toggleBan' });
      await fetchUser(); // Refresh the user data
    } catch (err) {
      console.error('Failed to toggle user ban status:', err);
      setError('Failed to update user status');
    }
  };

  useEffect(() => {
    fetchUser();
  }, [fetchUser]);

  if (loading) return <Spinner />;
  if (error) return <div className="text-red-600">{error}</div>;
  if (!user) return <div>User not found.</div>;

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'banned':
        return 'bg-red-100 text-red-800';
      case 'inactive':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getRoleBadgeClass = (role: string) => {
    switch (role) {
      case 'admin':
        return 'bg-purple-100 text-purple-800';
      case 'seller':
        return 'bg-blue-100 text-blue-800';
      case 'buyer':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <>
      <div className="max-w-4xl mx-auto p-6">
        <div className="flex items-center gap-4 mb-6">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigate('/admin/users')}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Users
          </Button>
          <h1 className="text-2xl font-bold">User Details</h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                {user.name}
                <div className="flex gap-2">
                  <Badge
                    variant="secondary"
                    className={`rounded-full ${getRoleBadgeClass(user.role || 'buyer')}`}
                  >
                    {user.role}
                  </Badge>
                  <Badge
                    variant="secondary"
                    className={`rounded-full ${getStatusBadgeClass(user.status || 'inactive')}`}
                  >
                    {user.status}
                  </Badge>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <div>
                  <span className="font-semibold">User ID:</span> {user.id}
                </div>
                <div>
                  <span className="font-semibold">Username:</span>{' '}
                  {user.username}
                </div>
                <div>
                  <span className="font-semibold">Ethereum Address:</span>{' '}
                  {user.ethereumAddress}
                </div>
                <div>
                  <span className="font-semibold">Name:</span> {user.name}
                </div>
                <div>
                  <span className="font-semibold">Role:</span>
                  <Badge
                    variant="secondary"
                    className={`ml-2 rounded-full ${getRoleBadgeClass(user.role || 'buyer')}`}
                  >
                    {user.role}
                  </Badge>
                </div>
                <div>
                  <span className="font-semibold">Status:</span>
                  <Badge
                    variant="secondary"
                    className={`ml-2 rounded-full ${getStatusBadgeClass(user.status || 'inactive')}`}
                  >
                    {user.status}
                  </Badge>
                </div>
                {user.createdAt && (
                  <div>
                    <span className="font-semibold">Created:</span>
                    <p className="mt-1 text-sm text-gray-600">
                      {new Date(user.createdAt).toLocaleString()}
                    </p>
                  </div>
                )}
                {user.updatedAt && (
                  <div>
                    <span className="font-semibold">Last Updated:</span>
                    <p className="mt-1 text-sm text-gray-600">
                      {new Date(user.updatedAt).toLocaleString()}
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Admin Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                variant={user.status === 'banned' ? 'secondary' : 'destructive'}
                className="w-full"
                onClick={() => setConfirm(true)}
              >
                {user.status === 'banned' ? 'Unban User' : 'Ban User'}
              </Button>

              <div className="text-sm text-gray-600 mt-4">
                <p>
                  <strong>Note:</strong> Banning a user will prevent them from
                  accessing the platform.
                </p>
                <p className="mt-2">Unbanning will restore their access.</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
      <AlertDialog open={confirm} onOpenChange={(o) => !o && setConfirm(false)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              {user?.status === 'banned' ? 'Unban' : 'Ban'} this user?
            </AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                handleToggleBan();
                setConfirm(false);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default ViewUser;


=== client/pages/admin/WalletUserManager.tsx ===
import { useEffect, useState } from 'react';
import axios from '@/lib/axios';
import { DataTable } from '@/components/DataTable';
import type { ColumnDef } from '@tanstack/react-table';
import type { Wallet, PublicUser } from '@/server/schema';

interface WalletRow extends Wallet {
  username: string;
  ethereumAddress: string;
}

function WalletUserManager() {
  const [data, setData] = useState<WalletRow[]>([]);
  const [loading, setLoading] = useState(false);

  const fetchData = async () => {
    setLoading(true);
    const [walletRes, userRes] = await Promise.all([
      axios.get<Wallet[]>('/api/admin/wallets'),
      axios.get<PublicUser[]>('/api/admin/users'),
    ]);
    const userMap = new Map(userRes.data.map((u) => [u.id, u]));
    setData(
      walletRes.data.map((w) => ({
        ...w,
        username: userMap.get(w.userId)?.username || '',
        ethereumAddress: userMap.get(w.userId)?.ethereumAddress || '',
      }))
    );
    setLoading(false);
  };

  useEffect(() => {
    fetchData();
  }, []);

  const columns: ColumnDef<WalletRow>[] = [
    { accessorKey: 'userId', header: 'User ID', meta: { widthClass: 'w-16' } },
    {
      accessorKey: 'username',
      header: 'Username',
      meta: { widthClass: 'w-32', cellClass: 'truncate' },
    },
    {
      accessorKey: 'ethereumAddress',
      header: 'Address',
      meta: { widthClass: 'w-64', cellClass: 'truncate' },
    },
    { accessorKey: 'balance', header: 'Balance', meta: { widthClass: 'w-24' } },
  ];

  return <DataTable columns={columns} data={data} isLoading={loading} />;
}

export default WalletUserManager;


=== client/pages/buyer/Cart.tsx ===
import { useAtom, useSetAtom } from 'jotai';
import {
  cartAtom,
  removeFromCartAtom,
  updateCartQuantityAtom,
  cartTotalAtom,
  loadCartAtom,
} from '@/atoms/cartAtoms';
import CartItem from '@/components/CartItem';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Skeleton } from '@/components/ui/skeleton';
import { useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';
import {
  ShoppingCart,
  Package,
  AlertCircle,
  ArrowRight,
  Trash2,
} from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

function Cart() {
  const [items] = useAtom(cartAtom);
  const total = useAtom(cartTotalAtom)[0];
  const remove = useSetAtom(removeFromCartAtom);
  const update = useSetAtom(updateCartQuantityAtom);
  const loadCart = useSetAtom(loadCartAtom);
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [targetRemoveId, setTargetRemoveId] = useState<number | null>(null);
  const [confirmClear, setConfirmClear] = useState(false);

  useEffect(() => {
    const fetchCart = async () => {
      setLoading(true);
      setError(null);
      try {
        await loadCart();
      } catch (error) {
        console.error('Failed to load cart:', error);
        setError('Failed to load your cart. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    fetchCart();
  }, [loadCart]);

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
    }).format(price);
  };

  const handleClearCart = () => {
    items.forEach((item) => remove(item.productId));
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="space-y-2">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-4 w-32" />
        </div>
        <div className="space-y-4">
          {Array.from({ length: 3 }).map((_, i) => (
            <Card key={i}>
              <CardContent className="p-6">
                <div className="flex items-center space-x-4">
                  <Skeleton className="h-16 w-16 rounded" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-4 w-3/4" />
                    <Skeleton className="h-4 w-1/2" />
                  </div>
                  <Skeleton className="h-8 w-20" />
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  if (!items.length) {
    return (
      <div className="flex flex-col items-center justify-center py-12 space-y-4">
        <div className="p-4 bg-muted rounded-full">
          <ShoppingCart className="h-12 w-12 text-muted-foreground" />
        </div>
        <div className="text-center space-y-2">
          <h2 className="text-2xl font-semibold">Your cart is empty</h2>
          <p className="text-muted-foreground">
            Start shopping to add items to your cart
          </p>
        </div>
        <Button onClick={() => navigate('/catalog')}>
          <Package className="mr-2 h-4 w-4" />
          Browse Products
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-3xl font-bold tracking-tight">Shopping Cart</h1>
          <div className="flex items-center gap-4 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <ShoppingCart className="h-4 w-4" />
              <span>{items.length} items</span>
            </div>
            <Badge variant="secondary">
              {items.reduce((acc, item) => acc + item.quantity, 0)} total items
            </Badge>
          </div>
        </div>

        <Button
          variant="outline"
          size="sm"
          onClick={() => setConfirmClear(true)}
          className="text-destructive hover:text-destructive"
        >
          <Trash2 className="mr-2 h-4 w-4" />
          Clear Cart
        </Button>
      </div>

      {/* Cart Items */}
      <div className="space-y-4">
        {items.map((item) => (
          <CartItem
            key={item.id}
            product={item.product}
            quantity={item.quantity}
            onRemove={() => setTargetRemoveId(item.productId)}
            onChange={(q) => update({ productId: item.productId, quantity: q })}
          />
        ))}
      </div>

      {/* Cart Summary */}
      <Card>
        <CardHeader>
          <CardTitle>Order Summary</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex justify-between items-center py-2 border-b">
            <span className="text-sm text-muted-foreground">Subtotal</span>
            <span className="font-medium">{formatPrice(total)}</span>
          </div>
          <div className="flex justify-between items-center py-2 border-b">
            <span className="text-sm text-muted-foreground">Shipping</span>
            <span className="font-medium">Free</span>
          </div>
          <div className="flex justify-between items-center py-2">
            <span className="text-lg font-semibold">Total</span>
            <span className="text-xl font-bold text-primary">
              {formatPrice(total)}
            </span>
          </div>

          <Button
            onClick={() => navigate('/buyer/checkout')}
            className="w-full"
            size="lg"
          >
            Proceed to Checkout
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </CardContent>
      </Card>
      <AlertDialog
        open={confirmClear}
        onOpenChange={(o) => !o && setConfirmClear(false)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Clear all items from cart?</AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                handleClearCart();
                setConfirmClear(false);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      <AlertDialog
        open={targetRemoveId !== null}
        onOpenChange={(o) => !o && setTargetRemoveId(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Remove this item from cart?</AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (targetRemoveId !== null) remove(targetRemoveId);
                setTargetRemoveId(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

export default Cart;


=== client/pages/buyer/Catalog.tsx ===
import { useEffect, useState } from 'react';
import axios from '@/lib/axios';
import { isAxiosError } from '@/lib/axios';
import type { Product } from '@/types/Product';
import ProductCard from '@/components/ProductCard';
import { Skeleton } from '@/components/ui/skeleton';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Card, CardContent } from '@/components/ui/card';
import { useSetAtom, useAtom } from 'jotai';
import { addToCartAtom, cartAtom } from '@/atoms/cartAtoms';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';
import { Search, Package, AlertCircle, ShoppingCart } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

function Catalog() {
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const add = useSetAtom(addToCartAtom);
  const [cart] = useAtom(cartAtom);
  const navigate = useNavigate();
  const [targetProduct, setTargetProduct] = useState<Product | null>(null);

  const fetchData = async () => {
    setLoading(true);
    try {
      const res = await axios.get<Product[]>('/api/buyer/products');
      setProducts(res.data);
      setFilteredProducts(res.data);
    } catch (err: unknown) {
      if (isAxiosError(err)) setError(err.message);
      else setError('Failed to load products');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    const filtered = products.filter(
      (product) =>
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (product.description &&
          product.description.toLowerCase().includes(searchTerm.toLowerCase()))
    );
    setFilteredProducts(filtered);
  }, [searchTerm, products]);

  const handleAddToCart = async (product: Product) => {
    try {
      // Check if product already exists in cart before adding
      const existingItem = cart.find((item) => item.productId === product.id);

      await add(product);

      if (existingItem) {
        toast.success(`${product.name} quantity updated in cart!`);
      } else {
        toast.success(`${product.name} added to cart!`);
      }
    } catch {
      toast.error('Failed to add item to cart');
    }
  };

  const getStatusCount = () => {
    const activeProducts = products.filter((p) => p.status === 'active');
    return activeProducts.length;
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div className="space-y-2">
            <Skeleton className="h-8 w-48" />
            <Skeleton className="h-4 w-32" />
          </div>
          <Skeleton className="h-10 w-64" />
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {Array.from({ length: 8 }).map((_, i) => (
            <Card key={i}>
              <CardContent className="p-6">
                <Skeleton className="h-48 w-full mb-4" />
                <Skeleton className="h-4 w-3/4 mb-2" />
                <Skeleton className="h-4 w-1/2 mb-2" />
                <Skeleton className="h-8 w-full" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div className="space-y-1">
          <h1 className="text-3xl font-bold tracking-tight">Product Catalog</h1>
          <div className="flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <Package className="h-4 w-4" />
              <span>{products.length} products</span>
            </div>
            <div className="flex items-center gap-2">
              <ShoppingCart className="h-4 w-4" />
              <span>{cart.length} items in cart</span>
            </div>
            <Badge variant="secondary">
              {getStatusCount()} active products
            </Badge>
          </div>
        </div>

        {/* Search */}
        <div className="relative w-full sm:w-80">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search products..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* Results */}
      {!filteredProducts.length && products.length > 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Search className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-lg font-semibold mb-2">No products found</h3>
            <p className="text-muted-foreground text-center">
              Try adjusting your search terms or browse all products
            </p>
            <Button
              variant="outline"
              onClick={() => setSearchTerm('')}
              className="mt-4"
            >
              Clear search
            </Button>
          </CardContent>
        </Card>
      ) : !products.length ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Package className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-lg font-semibold mb-2">
              No products available
            </h3>
            <p className="text-muted-foreground text-center">
              Check back later for new products
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {filteredProducts.map((product) => (
            <ProductCard
              key={product.id}
              product={product}
              onAdd={() => setTargetProduct(product)}
              onView={() => navigate(`/buyer/product/${product.id}`)}
            />
          ))}
        </div>
      )}
      <AlertDialog
        open={!!targetProduct}
        onOpenChange={(o) => !o && setTargetProduct(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Add this item to cart?</AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (targetProduct) handleAddToCart(targetProduct);
                setTargetProduct(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

export default Catalog;


=== client/pages/buyer/Checkout.tsx ===
import { useState } from 'react';
import { useAtomValue, useSetAtom } from 'jotai';
import { cartAtom, clearCartAtom } from '@/atoms/cartAtoms';
import { isAuthenticatedAtom } from '@/atoms/loginAtoms';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import axios from '@/lib/axios';
import { useNavigate } from 'react-router-dom';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

function Checkout() {
  const cart = useAtomValue(cartAtom);
  const isAuthenticated = useAtomValue(isAuthenticatedAtom);
  const clearCart = useSetAtom(clearCartAtom);
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [confirmCheckout, setConfirmCheckout] = useState(false);

  const total = cart.reduce(
    (sum, item) => sum + item.product.price * item.quantity,
    0
  );

  const handleCheckout = async () => {
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }
    setLoading(true);
    setError(null);
    try {
      const items = cart.map((item) => ({
        productId: item.product.id,
        quantity: item.quantity,
      }));
      // For demo, use a static shipping address and payment method
      await axios.post('/api/buyer/orders', {
        items,
        shippingAddress: '123 Main St, City, Country',
        paymentMethod: 'credit_card',
      });
      clearCart();
      navigate('/orders');
    } catch {
      setError('Failed to create order');
    } finally {
      setLoading(false);
    }
  };

  if (!cart.length) {
    return <div>Your cart is empty.</div>;
  }

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle>Checkout</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {cart.map((item) => (
              <div key={item.id} className="flex justify-between">
                <span>{item.product.name}</span>
                <span>
                  {new Intl.NumberFormat('id-ID', {
                    style: 'currency',
                    currency: 'IDR',
                  }).format(item.product.price * item.quantity)}
                </span>
              </div>
            ))}
            <div className="border-t pt-4">
              <div className="flex justify-between font-bold">
                <span>Total:</span>
                <span>
                  {new Intl.NumberFormat('id-ID', {
                    style: 'currency',
                    currency: 'IDR',
                  }).format(total)}
                </span>
              </div>
            </div>
            {error && <div className="text-red-600">{error}</div>}
            <Button
              onClick={() => {
                if (!isAuthenticated) {
                  navigate('/login');
                } else {
                  setConfirmCheckout(true);
                }
              }}
              disabled={loading}
              className="w-full"
            >
              {loading ? 'Processing...' : 'Place Order'}
            </Button>
          </div>
        </CardContent>
      </Card>
      <AlertDialog
        open={confirmCheckout}
        onOpenChange={(o) => !o && setConfirmCheckout(false)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Place this order?</AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                handleCheckout();
                setConfirmCheckout(false);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default Checkout;


=== client/pages/buyer/Home.tsx ===
import { useAtom } from 'jotai';
import { userAtom } from '@/atoms/loginAtoms';
import SectionTitle from '@/components/SectionTitle';
import { Button } from '@/components/ui/button';
import { ShoppingCart, Store, ShieldCheck, Users } from 'lucide-react';

function BuyerHome() {
  const [user] = useAtom(userAtom);
  const greeting = user ? `Welcome, ${user.name}` : 'Welcome to MarketPlace';

  const features = [
    {
      icon: ShoppingCart,
      title: 'Seamless Shopping',
      description: 'Browse and purchase from thousands of products with ease.',
    },
    {
      icon: Store,
      title: 'Open Your Store',
      description:
        'Become a seller and reach customers across the globe in minutes.',
    },
    {
      icon: ShieldCheck,
      title: 'Secure Payments',
      description:
        'Every transaction is protected with industry-standard security.',
    },
    {
      icon: Users,
      title: 'Community Support',
      description: 'Join a vibrant network of buyers and sellers.',
    },
  ];

  return (
    <div className="space-y-12">
      <div className="space-y-4 text-center">
        <SectionTitle className="text-4xl md:text-5xl">{greeting}</SectionTitle>
        <p className="text-lg text-muted-foreground">
          Discover a new way to buy and sell online with MarketPlace
        </p>
        <div className="flex flex-col items-center justify-center gap-4 pt-4 md:flex-row">
          <Button size="lg" onClick={() => (window.location.hash = '/catalog')}>
            Explore Catalog
          </Button>
          {!user && (
            <Button
              size="lg"
              variant="secondary"
              onClick={() => (window.location.hash = '/register')}
            >
              Create Account
            </Button>
          )}
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        {features.map(({ icon: Icon, title, description }) => (
          <div
            key={title}
            className="flex flex-col items-center gap-4 rounded-lg border p-6 text-center"
          >
            <div className="rounded-full bg-primary/10 p-3">
              <Icon className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-lg font-semibold">{title}</h3>
            <p className="text-sm text-muted-foreground">{description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

export default BuyerHome;


=== client/pages/buyer/OrderDetail.tsx ===
import { useEffect, useState, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, Package, Truck, CheckCircle, Clock } from 'lucide-react';
import { Spinner } from '@/components/ui/spinner';
import { formatIDR } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';

// Interface matching the OpenAPI specification
interface OrderDetail {
  id: number;
  items: string; // JSON string of cart items
  total: number;
  status: string;
  createdAt: string;
  shippingAddress?: string;
  paymentMethod?: string;
  trackingNumber?: string;
}

interface OrderItem {
  productId: number;
  quantity: number;
}

function OrderDetail() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [order, setOrder] = useState<OrderDetail | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchOrder = useCallback(async () => {
    if (!id) return;

    setLoading(true);
    try {
      const res = await axios.get<OrderDetail>(`/api/buyer/orders/${id}`);
      setOrder(res.data);
    } catch (err) {
      console.error('Failed to load order:', err);
      setError('Failed to load order details');
    } finally {
      setLoading(false);
    }
  }, [id]);

  useEffect(() => {
    fetchOrder();
  }, [fetchOrder]);

  if (loading) return <Spinner />;
  if (error) return <div className="text-red-600">{error}</div>;
  if (!order) return <div>Order not found.</div>;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'processing':
        return 'bg-blue-100 text-blue-800';
      case 'shipped':
        return 'bg-purple-100 text-purple-800';
      case 'delivered':
        return 'bg-green-100 text-green-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending':
        return <Clock className="h-4 w-4" />;
      case 'processing':
        return <Package className="h-4 w-4" />;
      case 'shipped':
        return <Truck className="h-4 w-4" />;
      case 'delivered':
        return <CheckCircle className="h-4 w-4" />;
      case 'cancelled':
        return <Clock className="h-4 w-4" />;
      default:
        return <Clock className="h-4 w-4" />;
    }
  };

  // Parse items from JSON string
  const orderItems: OrderItem[] = order.items ? JSON.parse(order.items) : [];

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="flex items-center gap-4 mb-6">
        <Button variant="outline" size="sm" onClick={() => navigate('/orders')}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Orders
        </Button>
        <h1 className="text-2xl font-bold">Order #{order.id}</h1>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Order Details */}
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {getStatusIcon(order.status)}
                Order Status
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <Badge
                  variant="secondary"
                  className={`rounded-full ${getStatusColor(order.status || 'pending')}`}
                >
                  {order.status}
                </Badge>
                <span className="text-sm text-gray-500">
                  {order.createdAt &&
                    new Date(order.createdAt).toLocaleDateString()}
                </span>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Order Items</CardTitle>
            </CardHeader>
            <CardContent>
              {orderItems.length > 0 ? (
                <div className="space-y-3">
                  {orderItems.map((item: OrderItem, index: number) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-3 border rounded"
                    >
                      <div>
                        <p className="font-medium">
                          Product ID: {item.productId}
                        </p>
                        <p className="text-sm text-gray-600">
                          Quantity: {item.quantity}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">No items found</p>
              )}
            </CardContent>
          </Card>

          {order.shippingAddress && (
            <Card>
              <CardHeader>
                <CardTitle>Shipping Address</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-700">{order.shippingAddress}</p>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Order Summary */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Order Summary</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between">
                <span>Order ID:</span>
                <span className="font-medium">#{order.id}</span>
              </div>
              <div className="flex justify-between">
                <span>Total Amount:</span>
                <span className="font-bold text-lg text-green-600">
                  {formatIDR(order.total ?? 0)}
                </span>
              </div>
              {order.paymentMethod && (
                <div className="flex justify-between">
                  <span>Payment Method:</span>
                  <span className="font-medium capitalize">
                    {order.paymentMethod.replace('_', ' ')}
                  </span>
                </div>
              )}
              {order.trackingNumber && (
                <div className="flex justify-between">
                  <span>Tracking Number:</span>
                  <span className="font-medium">{order.trackingNumber}</span>
                </div>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Timeline</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <div>
                    <p className="text-sm font-medium">Order Placed</p>
                    <p className="text-xs text-gray-500">
                      {order.createdAt &&
                        new Date(order.createdAt).toLocaleString()}
                    </p>
                  </div>
                </div>

                {order.status !== 'pending' && (
                  <div className="flex items-center gap-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                    <div>
                      <p className="text-sm font-medium">Processing</p>
                      <p className="text-xs text-gray-500">
                        Order is being processed
                      </p>
                    </div>
                  </div>
                )}

                {['shipped', 'delivered'].includes(order.status) && (
                  <div className="flex items-center gap-3">
                    <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                    <div>
                      <p className="text-sm font-medium">Shipped</p>
                      <p className="text-xs text-gray-500">
                        Order has been shipped
                      </p>
                    </div>
                  </div>
                )}

                {order.status === 'delivered' && (
                  <div className="flex items-center gap-3">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <div>
                      <p className="text-sm font-medium">Delivered</p>
                      <p className="text-xs text-gray-500">
                        Order has been delivered
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

export default OrderDetail;


=== client/pages/buyer/Orders.tsx ===
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import { isAxiosError } from '@/lib/axios';
import type { Order } from '@/server/schema';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';
import { Eye } from 'lucide-react';
import { formatIDR } from '@/lib/utils';

function Orders() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const fetchData = async () => {
    setLoading(true);
    try {
      const res = await axios.get<Order[]>('/api/buyer/orders');
      setOrders(res.data);
    } catch (err: unknown) {
      if (isAxiosError(err)) setError(err.message);
      else setError('Failed to load orders');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'processing':
        return 'bg-blue-100 text-blue-800';
      case 'shipped':
        return 'bg-purple-100 text-purple-800';
      case 'delivered':
        return 'bg-green-100 text-green-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) return <Skeleton className="h-20" />;
  if (error) return <div className="text-red-600">{error}</div>;
  if (!orders.length) return <div>No orders yet.</div>;

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">My Orders</h2>
      <div className="space-y-4">
        {orders.map((o) => (
          <div key={o.id} className="border p-4 rounded-lg">
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <div className="flex items-center gap-4">
                  <div>
                    <span className="font-semibold">Order #{o.id}</span>
                  </div>
                  <div>
                    <span className="text-sm text-gray-600">Status: </span>
                    <Badge
                      variant="secondary"
                      className={`rounded-full ${getStatusColor(o.status || 'pending')}`}
                    >
                      {o.status}
                    </Badge>
                  </div>
                </div>
                <div className="mt-2">
                  <span className="text-sm text-gray-600">Total: </span>
                  <span className="font-semibold">{formatIDR(o.total)}</span>
                </div>
                <div className="text-xs text-muted-foreground mt-1">
                  {o.createdAt
                    ? new Date(o.createdAt).toLocaleString('en-US')
                    : 'N/A'}
                </div>
              </div>
              <Button
                size="sm"
                variant="outline"
                onClick={() => navigate(`/orders/${o.id}`)}
              >
                <Eye className="h-4 w-4 mr-2" />
                View Details
              </Button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Orders;


=== client/pages/buyer/ProductDetail.tsx ===
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import { isAxiosError } from '@/lib/axios';
import type { Product } from '@/types/Product';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { useSetAtom, useAtom } from 'jotai';
import { addToCartAtom, cartAtom } from '@/atoms/cartAtoms';
import SectionTitle from '@/components/SectionTitle';
import { toast } from 'sonner';
import { ArrowLeft } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Spinner } from '@/components/ui/spinner';

function ProductDetail() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [product, setProduct] = useState<Product | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const add = useSetAtom(addToCartAtom);
  const [cart] = useAtom(cartAtom);
  const [confirmAdd, setConfirmAdd] = useState(false);

  const fetchData = async (idval: string | null) => {
    if (!idval) return;

    setLoading(true);
    try {
      const res = await axios.get<Product>(`/api/buyer/products/${idval}`);
      setProduct(res.data);
    } catch (err) {
      if (isAxiosError(err)) setError(err.message);
      else setError('Failed to load product');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (id) {
      fetchData(id);
    }
  }, [id]);

  const handleAddToCart = async () => {
    if (product) {
      try {
        // Check if product already exists in cart before adding
        const existingItem = cart.find((item) => item.productId === product.id);

        await add(product);

        if (existingItem) {
          toast.success(`${product.name} quantity updated in cart!`);
        } else {
          toast.success(`${product.name} added to cart!`);
        }
      } catch {
        toast.error('Failed to add item to cart');
      }
    }
  };

  if (loading) return <Spinner />;
  if (error) return <div className="text-red-600">{error}</div>;
  if (!product) return <div>Product not found.</div>;

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4 mb-2">
        <Button
          variant="outline"
          size="sm"
          onClick={() => navigate('/catalog')}
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Catalog
        </Button>
        <SectionTitle>{product.name}</SectionTitle>
      </div>

      <Card>
        <CardContent className="p-6">
          <div className="space-y-4">
            <div>
              <h3 className="text-lg font-semibold">Description</h3>
              <p className="text-muted-foreground">{product.description}</p>
            </div>

            <div>
              <h3 className="text-lg font-semibold">Price</h3>
              <p className="text-2xl font-bold text-green-600">
                {new Intl.NumberFormat('id-ID', {
                  style: 'currency',
                  currency: 'IDR',
                }).format(product.price)}
              </p>
            </div>

            <Button onClick={() => setConfirmAdd(true)} className="w-full">
              Add to Cart
            </Button>
          </div>
        </CardContent>
      </Card>
      <AlertDialog
        open={confirmAdd}
        onOpenChange={(o) => !o && setConfirmAdd(false)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Add this item to cart?</AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                handleAddToCart();
                setConfirmAdd(false);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

export default ProductDetail;


=== client/pages/buyer/Profile.tsx ===
import { useAtom, useSetAtom } from 'jotai';
import { userAtom } from '@/atoms/loginAtoms';
import { balanceAtom, loadWalletAtom } from '@/atoms/walletAtoms';
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAppKit, useAppKitAccount } from '@reown/appkit/react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { toast } from 'sonner';
import axios from '@/lib/axios';
import { User, Save, AlertCircle, Loader2, UserCheck } from 'lucide-react';

function Profile() {
  const [user, setUser] = useAtom(userAtom);
  const [name, setName] = useState(user?.name || '');
  const [username, setUsername] = useState(user?.username || '');
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [balance] = useAtom(balanceAtom);
  const loadWallet = useSetAtom(loadWalletAtom);
  const { open } = useAppKit();
  const { isConnected } = useAppKitAccount();
  const navigate = useNavigate();
  const [connecting, setConnecting] = useState(false);

  // Update form when user data changes
  useEffect(() => {
    if (user) {
      setName(user.name || '');
      setUsername(user.username || '');
    }
  }, [user]);

  useEffect(() => {
    loadWallet();
  }, [loadWallet]);

  const handleConnect = async () => {
    setConnecting(true);
    try {
      await Promise.resolve(open());
      await loadWallet();
    } catch (err) {
      const msg =
        err instanceof Error ? err.message : 'Wallet connection failed';
      toast.error(msg);
    } finally {
      setConnecting(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!user) {
      toast.error('User data not available');
      return;
    }

    setSaving(true);
    setError(null);

    try {
      const res = await axios.put('/api/me', {
        name: name.trim(),
        username: username.trim(),
      });

      // Update the user atom with new data
      setUser(res.data);

      toast.success('Profile updated successfully!');
    } catch (err: unknown) {
      console.error('Failed to update profile:', err);

      const axiosError = err as { response?: { status?: number } };

      if (axiosError.response?.status === 409) {
        setError(
          'Username already exists. Please choose a different username.'
        );
        toast.error('Username already exists');
      } else if (axiosError.response?.status === 400) {
        setError('Invalid data provided. Please check your input.');
        toast.error('Invalid data provided');
      } else {
        setError('Failed to update profile. Please try again.');
        toast.error('Failed to update profile');
      }
    } finally {
      setSaving(false);
    }
  };

  const getRoleBadgeVariant = (role: string) => {
    switch (role) {
      case 'admin':
        return 'destructive';
      case 'seller':
        return 'secondary';
      case 'buyer':
        return 'default';
      default:
        return 'outline';
    }
  };

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case 'active':
        return 'default';
      case 'banned':
        return 'destructive';
      case 'inactive':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  if (!user) {
    return (
      <div className="space-y-6">
        <div className="space-y-2">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-4 w-64" />
        </div>
        <Card>
          <CardContent className="p-6 space-y-4">
            {Array.from({ length: 4 }).map((_, i) => (
              <div key={i} className="space-y-2">
                <Skeleton className="h-4 w-32" />
                <Skeleton className="h-10 w-full" />
              </div>
            ))}
            <Skeleton className="h-10 w-24" />
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <div className="p-2 bg-primary/10 rounded-lg">
            <User className="h-5 w-5 text-primary" />
          </div>
          <h1 className="text-3xl font-bold tracking-tight">
            Profile Settings
          </h1>
        </div>
        <p className="text-muted-foreground">
          Manage your account information and preferences
        </p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Wallet</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p>
            Status:{' '}
            <Badge variant={isConnected ? 'default' : 'secondary'}>
              {isConnected ? 'Connected' : 'Not Connected'}
            </Badge>
          </p>
          <p className="text-2xl font-bold">{balance}</p>
          <Input readOnly value={user.ethereumAddress} />
          {!isConnected && (
            <Button onClick={handleConnect} disabled={connecting}>
              {connecting ? 'Connecting...' : 'Connect Wallet'}
            </Button>
          )}
        </CardContent>
      </Card>

      {/* Profile Form */}
      <Card>
        <CardHeader>
          <CardTitle>Account Information</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="name" className="text-sm font-medium">
                  Full Name
                </Label>
                <Input
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="Enter your full name"
                  disabled={saving}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="username" className="text-sm font-medium">
                  Username
                </Label>
                <Input
                  id="username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  placeholder="Enter your username"
                  disabled={saving}
                  required
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label className="text-sm font-medium">Role</Label>
                <div className="flex items-center gap-2">
                  <Badge variant={getRoleBadgeVariant(user.role || 'buyer')}>
                    {user.role}
                  </Badge>
                  <UserCheck className="h-4 w-4 text-muted-foreground" />
                </div>
                <p className="text-xs text-muted-foreground">
                  Your account role cannot be changed
                </p>
              </div>

              <div className="space-y-2">
                <Label className="text-sm font-medium">Status</Label>
                <div className="flex items-center gap-2">
                  <Badge
                    variant={getStatusBadgeVariant(user.status || 'active')}
                  >
                    {user.status}
                  </Badge>
                </div>
                <p className="text-xs text-muted-foreground">
                  Account status is managed by administrators
                </p>
              </div>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="flex items-center gap-4 pt-4">
              <Button type="submit" disabled={saving} className="min-w-[120px]">
                {saving ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="mr-2 h-4 w-4" />
                    Save Changes
                  </>
                )}
              </Button>

              {saving && (
                <p className="text-sm text-muted-foreground">
                  Updating profile...
                </p>
              )}
            </div>
          </form>
          <div className="text-sm">
            <button
              type="button"
              className="underline"
              onClick={() => navigate('/account-recovery')}
            >
              Account Recovery
            </button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default Profile;


=== client/pages/seller/AddProduct.tsx ===
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSetAtom } from 'jotai';
import axios from '@/lib/axios';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { refreshSellerProductsAtom } from '@/atoms/sellerAtoms';

function AddProduct() {
  const navigate = useNavigate();
  const refreshProducts = useSetAtom(refreshSellerProductsAtom);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    const formData = new FormData(e.currentTarget);
    const productData = {
      name: formData.get('name') as string,
      price: Number(formData.get('price')),
      description: formData.get('description') as string,
      imageUrl: (formData.get('imageUrl') as string) || undefined,
    };

    try {
      await axios.post('/api/seller/products', productData);
      // Trigger refresh of product list
      refreshProducts();
      navigate('/seller/products');
    } catch (err: unknown) {
      console.error('Failed to create product:', err);
      const errorMessage =
        err instanceof Error ? err.message : 'Failed to create product';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Add Product</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="name">Product Name</Label>
            <Input id="name" name="name" required />
          </div>
          <div>
            <Label htmlFor="price">Price</Label>
            <Input
              id="price"
              name="price"
              type="number"
              step="0.01"
              min="0"
              required
            />
          </div>
          <div>
            <Label htmlFor="description">Description</Label>
            <Textarea id="description" name="description" rows={3} />
          </div>
          <div>
            <Label htmlFor="imageUrl">Image URL (optional)</Label>
            <Input id="imageUrl" name="imageUrl" type="url" />
          </div>
          {error && <div className="text-red-600">{error}</div>}
          <div className="flex gap-2">
            <Button type="submit" disabled={loading}>
              {loading ? 'Creating...' : 'Create Product'}
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={() => navigate('/seller/products')}
            >
              Cancel
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}

export default AddProduct;


=== client/pages/seller/EditProduct.tsx ===
import { useEffect, useState, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useSetAtom } from 'jotai';
import axios from '@/lib/axios';
import type { SellerProduct } from '@/types/Seller';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Spinner } from '@/components/ui/spinner';
import { refreshSellerProductsAtom } from '@/atoms/sellerAtoms';

function EditProduct() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const refreshProducts = useSetAtom(refreshSellerProductsAtom);
  const [product, setProduct] = useState<SellerProduct | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchProduct = useCallback(async () => {
    if (!id) return;

    setLoading(true);
    try {
      const res = await axios.get<SellerProduct>(`/api/seller/products/${id}`);
      setProduct(res.data);
    } catch (err) {
      console.error('Failed to load product:', err);
      setError('Failed to load product details');
    } finally {
      setLoading(false);
    }
  }, [id]);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!product) return;

    setLoading(true);
    setError(null);

    const formData = new FormData(e.currentTarget);
    const productData = {
      name: formData.get('name') as string,
      price: Number(formData.get('price')),
      description: formData.get('description') as string,
      imageUrl: (formData.get('imageUrl') as string) || undefined,
    };

    try {
      await axios.put(`/api/seller/products/${id}`, productData);
      // Trigger refresh of product list
      refreshProducts();
      navigate('/seller/products');
    } catch (err: unknown) {
      console.error('Failed to update product:', err);
      const errorMessage =
        err instanceof Error ? err.message : 'Failed to update product';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProduct();
  }, [fetchProduct]);

  if (loading && !product) return <Spinner />;
  if (error && !product) return <div className="text-red-600">{error}</div>;
  if (!product) return <div>Product not found.</div>;

  return (
    <Card>
      <CardHeader>
        <CardTitle>Edit Product</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="name">Product Name</Label>
            <Input id="name" name="name" defaultValue={product.name} required />
          </div>
          <div>
            <Label htmlFor="price">Price</Label>
            <Input
              id="price"
              name="price"
              type="number"
              step="0.01"
              min="0"
              defaultValue={product.price}
              required
            />
          </div>
          <div>
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              name="description"
              rows={3}
              defaultValue={product.description || ''}
            />
          </div>
          <div>
            <Label htmlFor="imageUrl">Image URL (optional)</Label>
            <Input
              id="imageUrl"
              name="imageUrl"
              type="url"
              defaultValue={product.imageUrl || ''}
            />
          </div>
          {error && <div className="text-red-600">{error}</div>}
          <div className="flex gap-2">
            <Button type="submit" disabled={loading}>
              {loading ? 'Updating...' : 'Update Product'}
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={() => navigate('/seller/products')}
            >
              Cancel
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}

export default EditProduct;


=== client/pages/seller/MyProducts.tsx ===
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAtom } from 'jotai';
import axios, { isAxiosError } from '@/lib/axios';
import type { SellerProduct } from '@/types/Seller';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Spinner } from '@/components/ui/spinner';
import { formatIDR } from '@/lib/utils';
import { sellerProductsRefreshAtom } from '@/atoms/sellerAtoms';

function MyProducts() {
  const navigate = useNavigate();
  const [products, setProducts] = useState<SellerProduct[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [refreshCounter] = useAtom(sellerProductsRefreshAtom);

  const fetchData = async () => {
    setLoading(true);
    try {
      const res = await axios.get<SellerProduct[]>('/api/seller/products');
      setProducts(res.data);
    } catch (err: unknown) {
      if (isAxiosError(err)) setError(err.message);
      else setError('Failed to load products');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (productId: number) => {
    if (!confirm('Are you sure you want to delete this product?')) return;

    try {
      await axios.delete(`/api/seller/products/${productId}`);
      await fetchData();
    } catch (err: unknown) {
      if (isAxiosError(err)) setError(err.message);
      else setError('Failed to delete product');
    }
  };

  useEffect(() => {
    fetchData();
  }, [refreshCounter]);

  if (loading) return <Spinner />;
  if (error) return <div className="text-red-600">{error}</div>;

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>My Products</CardTitle>
        <Button onClick={() => navigate('/seller/add-product')}>
          Create Product
        </Button>
      </CardHeader>
      <CardContent>
        {products.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            No products yet. Create your first product!
          </div>
        ) : (
          <div className="space-y-4">
            {products.map((product) => (
              <div
                key={product.id}
                className="flex items-center justify-between p-4 border rounded-lg"
              >
                <div>
                  <h3 className="font-semibold">{product.name}</h3>
                  <p className="text-sm text-muted-foreground">
                    {formatIDR(product.price)}
                  </p>
                  {product.description && (
                    <p className="text-sm text-muted-foreground mt-1">
                      {product.description}
                    </p>
                  )}
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() =>
                      navigate(`/seller/view-product/${product.id}`)
                    }
                  >
                    View
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() =>
                      navigate(`/seller/edit-product/${product.id}`)
                    }
                  >
                    Edit
                  </Button>
                  <Button
                    variant="destructive"
                    size="sm"
                    onClick={() => handleDelete(product.id)}
                  >
                    Delete
                  </Button>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}

export default MyProducts;


=== client/pages/seller/OrdersReceived.tsx ===
import { useEffect, useState } from 'react';
import axios, { isAxiosError } from '@/lib/axios';
import type { Order } from '@/types/Seller';
import { DataTable } from '@/components/DataTable';
import type { ColumnDef } from '@tanstack/react-table';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { formatIDR } from '@/lib/utils';

function OrdersReceived() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [target, setTarget] = useState<{
    order: Order;
    action: 'shipped' | 'delivered';
  } | null>(null);

  const fetchData = async () => {
    setLoading(true);
    try {
      const res = await axios.get<Order[]>('/api/seller/orders');
      setOrders(res.data);
    } catch (err: unknown) {
      if (isAxiosError(err)) setError(err.message);
      else setError('Failed to load orders');
    } finally {
      setLoading(false);
    }
  };

  const updateStatus = async (
    order: Order,
    status: 'shipped' | 'delivered'
  ) => {
    try {
      await axios.patch(`/api/seller/orders/${order.id}`, { status });
      await fetchData();
      setError(null);
    } catch (err: unknown) {
      if (isAxiosError(err)) setError(err.message);
      else setError('Failed to update order status');
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'processing':
        return 'bg-blue-100 text-blue-800';
      case 'shipped':
        return 'bg-purple-100 text-purple-800';
      case 'delivered':
        return 'bg-green-100 text-green-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const columns: ColumnDef<Order>[] = [
    {
      accessorKey: 'productName',
      header: 'Product',
      meta: { widthClass: 'w-40', cellClass: 'truncate' },
    },
    {
      accessorKey: 'quantity',
      header: 'Qty',
      meta: { widthClass: 'w-12' },
    },
    {
      accessorKey: 'total',
      header: 'Total',
      cell: ({ row }) => formatIDR(row.original.total),
      meta: { widthClass: 'w-28', cellClass: 'truncate' },
    },
    {
      accessorKey: 'status',
      header: 'Status',
      cell: ({ row }) => (
        <Badge
          variant="secondary"
          className={`rounded-full ${getStatusColor(row.original.status || 'pending')}`}
        >
          {row.original.status}
        </Badge>
      ),
      meta: { widthClass: 'w-24', cellClass: 'truncate' },
    },
    {
      id: 'actions',
      header: 'Actions',
      cell: ({ row }) => {
        const o = row.original;
        return (
          <div className="flex gap-1">
            {o.status !== 'shipped' && o.status !== 'delivered' && (
              <Button
                size="sm"
                onClick={() => setTarget({ order: o, action: 'shipped' })}
              >
                Ship
              </Button>
            )}
            {o.status !== 'delivered' && (
              <Button
                size="sm"
                onClick={() => setTarget({ order: o, action: 'delivered' })}
              >
                Deliver
              </Button>
            )}
          </div>
        );
      },
      enableSorting: false,
      meta: { widthClass: 'w-40' },
    },
  ];

  return (
    <>
      <DataTable columns={columns} data={orders} isLoading={loading} />
      {error && <div className="text-red-600 mt-2">{error}</div>}
      <AlertDialog open={!!target} onOpenChange={(o) => !o && setTarget(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              {target?.action === 'shipped'
                ? 'Mark as shipped?'
                : 'Mark as delivered?'}
            </AlertDialogTitle>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (target) updateStatus(target.order, target.action);
                setTarget(null);
              }}
            >
              Confirm
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

export default OrdersReceived;


=== client/pages/seller/Payouts.tsx ===
import { useEffect, useState } from 'react';
import axios from '@/lib/axios';
import type { SellerPayout } from '@/types/Seller';
import { DataTable } from '@/components/DataTable';
import type { ColumnDef } from '@tanstack/react-table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Plus } from 'lucide-react';
import { formatIDR } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';

function Payouts() {
  const [payouts, setPayouts] = useState<SellerPayout[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [requestLoading, setRequestLoading] = useState(false);
  const [requestError, setRequestError] = useState<string | null>(null);

  const fetchData = async () => {
    setLoading(true);
    try {
      const res = await axios.get<SellerPayout[]>('/api/seller/payouts');
      setPayouts(res.data);
      setError(null);
    } catch (err) {
      console.error('Failed to load payouts:', err);
      setError('Failed to load payouts');
    } finally {
      setLoading(false);
    }
  };

  const handleRequestPayout = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setRequestLoading(true);
    setRequestError(null);

    const formData = new FormData(e.currentTarget);
    const amount = Number(formData.get('amount'));
    const bankAccount = formData.get('bankAccount') as string;

    try {
      await axios.post('/api/seller/payouts', {
        amount,
        bankAccount,
      });

      // Refresh the payouts list
      await fetchData();
      setIsDialogOpen(false);

      // Reset form
      e.currentTarget.reset();
    } catch (err) {
      console.error('Failed to request payout:', err);
      setRequestError('Failed to request payout');
    } finally {
      setRequestLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'processed':
        return 'bg-green-100 text-green-800';
      case 'failed':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const columns: ColumnDef<SellerPayout>[] = [
    {
      accessorKey: 'id',
      header: 'ID',
      meta: { widthClass: 'w-16' },
    },
    {
      accessorKey: 'amount',
      header: 'Amount',
      cell: ({ row }) => formatIDR(row.original.amount ?? 0),
      meta: { widthClass: 'w-28', cellClass: 'truncate' },
    },
    {
      accessorKey: 'processedAt',
      header: 'Date',
      cell: ({ row }) =>
        row.original.processedAt
          ? new Date(row.original.processedAt).toLocaleDateString()
          : row.original.createdAt
            ? new Date(row.original.createdAt).toLocaleDateString()
            : 'N/A',
      meta: { widthClass: 'w-28', cellClass: 'truncate' },
    },
    {
      accessorKey: 'status',
      header: 'Status',
      cell: ({ row }) => (
        <Badge
          variant="secondary"
          className={`rounded-full ${getStatusColor(row.original.status || 'pending')}`}
        >
          {row.original.status}
        </Badge>
      ),
      meta: { widthClass: 'w-28', cellClass: 'truncate' },
    },
  ];

  if (error) return <div className="text-red-600">{error}</div>;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Payouts</h2>
        <DialogTrigger asChild>
          <Button>
            <Plus className="h-4 w-4 mr-2" />
            Request Payout
          </Button>
        </DialogTrigger>
      </div>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Request New Payout</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleRequestPayout} className="space-y-4">
            <div>
              <Label htmlFor="amount">Amount ($)</Label>
              <Input
                id="amount"
                name="amount"
                type="number"
                step="0.01"
                min="0"
                required
                placeholder="Enter amount"
              />
            </div>
            <div>
              <Label htmlFor="bankAccount">Bank Account Details</Label>
              <Textarea
                id="bankAccount"
                name="bankAccount"
                required
                placeholder="Enter your bank account information"
                rows={3}
              />
            </div>
            {requestError && (
              <div className="text-red-600 text-sm">{requestError}</div>
            )}
            <DialogFooter>
              <Button
                type="submit"
                disabled={requestLoading}
                className="flex-1"
              >
                {requestLoading ? 'Requesting...' : 'Request Payout'}
              </Button>
              <DialogClose asChild>
                <Button type="button" variant="outline">
                  Cancel
                </Button>
              </DialogClose>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      <DataTable columns={columns} data={payouts} isLoading={loading} />
    </div>
  );
}

export default Payouts;


=== client/pages/seller/SellerDashboard.tsx ===
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAtom } from 'jotai';
import axios from '@/lib/axios';
import type { SellerProduct, Order } from '@/types/Seller';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Spinner } from '@/components/ui/spinner';
import { sellerProductsRefreshAtom } from '@/atoms/sellerAtoms';

function SellerDashboard() {
  const navigate = useNavigate();
  const [products, setProducts] = useState<SellerProduct[]>([]);
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [refreshCounter] = useAtom(sellerProductsRefreshAtom);

  const fetchData = async () => {
    setLoading(true);
    try {
      // Fetch seller products from the API
      const productsRes = await axios.get<SellerProduct[]>(
        '/api/seller/products'
      );
      setProducts(productsRes.data);
      // Fetch seller orders from the API
      const ordersRes = await axios.get<Order[]>('/api/seller/orders');
      setOrders(ordersRes.data);
    } catch (err) {
      console.error('Failed to load dashboard data:', err);
      setError('Failed to load dashboard data');
    } finally {
      setLoading(false);
    }
  };

  const handleManageProducts = () => {
    navigate('/seller/products');
  };

  useEffect(() => {
    fetchData();
  }, [refreshCounter]); // Refresh when the counter changes

  if (loading) return <Spinner />;
  if (error) return <div className="text-red-600">{error}</div>;

  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Products</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{products.length}</div>
            <div className="text-sm text-muted-foreground">Total products</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Orders</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{orders.length}</div>
            <div className="text-sm text-muted-foreground">Total orders</div>
          </CardContent>
        </Card>
      </div>

      <div className="flex justify-end">
        <Button onClick={handleManageProducts}>Manage Products</Button>
      </div>
    </div>
  );
}

export default SellerDashboard;


=== client/pages/seller/StoreProfile.tsx ===
import { useEffect, useState } from 'react';
import axios from '@/lib/axios';
import type { SellerProfile } from '@/types/Seller';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { toast } from 'sonner';
import { Store, Save, AlertCircle, Loader2 } from 'lucide-react';

function StoreProfile() {
  const [profile, setProfile] = useState<SellerProfile | null>(null);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await axios.get<SellerProfile>('/api/seller/profile');
      setProfile(res.data);
    } catch (err) {
      console.error('Failed to load profile:', err);
      setError('Failed to load profile. Please try again.');
      toast.error('Failed to load profile');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!profile) return;

    setSaving(true);
    setError(null);

    try {
      const res = await axios.put<SellerProfile>(
        '/api/seller/profile',
        profile
      );
      setProfile(res.data);
      toast.success('Store profile updated successfully!');
    } catch (err) {
      console.error('Failed to update profile:', err);
      setError('Failed to update profile. Please try again.');
      toast.error('Failed to update profile');
    } finally {
      setSaving(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case 'active':
        return 'default';
      case 'inactive':
        return 'secondary';
      case 'pending':
        return 'outline';
      default:
        return 'outline';
    }
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="space-y-2">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-4 w-64" />
        </div>
        <Card>
          <CardContent className="p-6 space-y-4">
            {Array.from({ length: 3 }).map((_, i) => (
              <div key={i} className="space-y-2">
                <Skeleton className="h-4 w-32" />
                <Skeleton className="h-10 w-full" />
              </div>
            ))}
            <Skeleton className="h-10 w-32" />
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error && !profile) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  if (!profile) {
    return (
      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>No store profile data available</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <div className="p-2 bg-primary/10 rounded-lg">
            <Store className="h-5 w-5 text-primary" />
          </div>
          <h1 className="text-3xl font-bold tracking-tight">Store Profile</h1>
        </div>
        <p className="text-muted-foreground">
          Manage your store information and settings
        </p>
      </div>

      {/* Store Profile Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Store Information</span>
            <Badge variant={getStatusBadgeVariant(profile.status || 'pending')}>
              {profile.status || 'pending'}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="name" className="text-sm font-medium">
                  Store Name
                </Label>
                <Input
                  id="name"
                  name="name"
                  value={profile.name || ''}
                  onChange={(e) =>
                    setProfile({ ...profile, name: e.target.value })
                  }
                  placeholder="Enter your store name"
                  disabled={saving}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="contact" className="text-sm font-medium">
                  Contact Information
                </Label>
                <Input
                  id="contact"
                  name="contact"
                  value={profile.contact || ''}
                  onChange={(e) =>
                    setProfile({ ...profile, contact: e.target.value })
                  }
                  placeholder="Email, phone, or website"
                  disabled={saving}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="bio" className="text-sm font-medium">
                Store Description
              </Label>
              <Input
                id="bio"
                name="bio"
                value={profile.bio || ''}
                onChange={(e) =>
                  setProfile({ ...profile, bio: e.target.value })
                }
                placeholder="Tell customers about your store"
                disabled={saving}
              />
              <p className="text-xs text-muted-foreground">
                This description will be visible to customers browsing your
                store
              </p>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="flex items-center gap-4 pt-4">
              <Button
                type="submit"
                disabled={saving || loading}
                className="min-w-[140px]"
              >
                {saving ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Updating...
                  </>
                ) : (
                  <>
                    <Save className="mr-2 h-4 w-4" />
                    Update Profile
                  </>
                )}
              </Button>

              {saving && (
                <p className="text-sm text-muted-foreground">
                  Saving store information...
                </p>
              )}
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

export default StoreProfile;


=== client/pages/seller/ViewProduct.tsx ===
import { useEffect, useState, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from '@/lib/axios';
import type { SellerProduct } from '@/types/Seller';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft } from 'lucide-react';
import { Spinner } from '@/components/ui/spinner';
import { formatIDR } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';

function ViewProduct() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [product, setProduct] = useState<SellerProduct | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchProduct = useCallback(async () => {
    if (!id) return;

    setLoading(true);
    try {
      const res = await axios.get<SellerProduct>(`/api/seller/products/${id}`);
      setProduct(res.data);
    } catch (err) {
      console.error('Failed to load product:', err);
      setError('Failed to load product details');
    } finally {
      setLoading(false);
    }
  }, [id]);

  useEffect(() => {
    fetchProduct();
  }, [fetchProduct]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'inactive':
        return 'bg-gray-100 text-gray-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'flagged':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) return <Spinner />;
  if (error) return <div className="text-red-600">{error}</div>;
  if (!product) return <div>Product not found.</div>;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Product Details</h1>
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={() => navigate(`/seller/edit-product/${product.id}`)}
          >
            Edit Product
          </Button>
          <Button
            variant="outline"
            onClick={() => navigate('/seller/products')}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to My Products
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>{product.name}</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="font-semibold text-sm text-muted-foreground">
                Price
              </h3>
              <p className="text-lg font-bold">{formatIDR(product.price)}</p>
            </div>
            <div>
              <h3 className="font-semibold text-sm text-muted-foreground">
                Status
              </h3>
              <Badge
                variant="secondary"
                className={`rounded-full ${getStatusColor(product.status || 'inactive')}`}
              >
                {product.status}
              </Badge>
            </div>
          </div>

          {product.description && (
            <div>
              <h3 className="font-semibold text-sm text-muted-foreground">
                Description
              </h3>
              <p className="text-sm">{product.description}</p>
            </div>
          )}

          {product.imageUrl && (
            <div>
              <h3 className="font-semibold text-sm text-muted-foreground">
                Image
              </h3>
              <img
                src={product.imageUrl}
                alt={product.name}
                className="w-32 h-32 object-cover rounded-lg"
              />
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

export default ViewProduct;


=== client/types/Admin.ts ===
// Import Admin types from schema.ts as the single source of truth
export type {
  AdminUser,
  AdminSeller,
  AdminProduct,
  AdminReport,
} from '@/server/schema';

// AdminSettings interface for site settings
export interface AdminSettings {
  fees: number;
  payoutDelay: number;
}

// UserRole type for role management
export type UserRole = 'buyer' | 'seller' | 'admin';


=== client/types/Product.ts ===
// Import Product type from schema.ts as the single source of truth
export type { Product } from '@/server/schema';


=== client/types/Seller.ts ===
// Import Seller types from schema.ts as the single source of truth
export type {
  SellerProduct,
  SellerProfile,
  Order,
  SellerPayout,
} from '@/server/schema';


=== client/types/Transaction.ts ===
export type { StabletokenTransaction } from '@/server/schema';


=== client/types/Wallet.ts ===
// Import Wallet type from schema.ts as the single source of truth
export type { Wallet } from '@/server/schema';

// Balance is stored as a string representing stablecoin amount
export type Balance = string;


=== client/vite-env.d.ts ===
/// <reference types="vite/client" />

declare const __COMMIT_HASH__: string;
declare const __COMMIT_MSG__: string;


=== server/controllers.ts ===
// server/controllers.ts
// Controllers for all API endpoints using drizzle and db.ts

import {
  stabletokenBalances,
  stabletokenTransactions,
} from './schema';
import type { User, PublicUser, Product, Seller, Report, Setting, DashboardStats, Order, SellerPayout, Wallet, StabletokenBalance, StabletokenTransaction } from './schema';
import { drizzleDb } from './db';
import { users, sellers, products, reports, settings, orders, sellerPayouts, wallets } from './schema';
import { and, eq, sql } from 'drizzle-orm';
import { SiweMessage } from 'siwe';

const TEST_ADDRESSES = [
  '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
  '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
  '0xcccccccccccccccccccccccccccccccccccccccc',
];

interface RateRecord {
  count: number;
  ts: number;
}

const siweAttempts: Record<string, RateRecord> = {};

export function resetSiweRateLimit(): void {
  for (const key of Object.keys(siweAttempts)) {
    delete siweAttempts[key];
  }
}

// === AUTHENTICATION CONTROLLERS ===

export interface LoginResponse {
  token: string;
  user: PublicUser & {
    createdAt: string;
    updatedAt: string;
  };
}

export interface LoginError {
  MESSAGE: string;
}

/**
 * Creates a PublicUser object from User (removes password)
 */

export function createPublicUser(user: User): PublicUser {
  const publicUser = { ...user }; // ai: skip
  delete (publicUser as Record<string, unknown>).password;
  return publicUser as PublicUser;
}

/**
 * Generates a simple token from user ID
 */
export function generateToken(userId: number): string {
  return btoa(String(userId));
}

/**
 * Validates token and returns user
 */
export async function validateToken(token: string): Promise<PublicUser | null> {
  try {
    const userId = Number(atob(token));
    if (Number.isNaN(userId)) {
      return null;
    }

    const db = await drizzleDb();
    const rows: User[] = await db
      .select()
      .from(users)
      .where(eq(users.id, userId))
      .all();

    if (rows.length === 0) {
      return null;
    }

    return createPublicUser(rows[0]);
  } catch {
    return null;
  }
}

export interface SiweLoginRequest {
  message: string;
  signature: string;
}

export async function loginWithSiwe(data: SiweLoginRequest | unknown): Promise<LoginResponse | LoginError> {
  if (!data || typeof data !== 'object') {
    return { MESSAGE: 'Invalid request body' };
  }

  const { message, signature } = data as SiweLoginRequest;
  if (!message || !signature) {
    return { MESSAGE: 'Message and signature are required' };
  }

  try {
    const siweMsg = new SiweMessage(message);
    const address = siweMsg.address.toLowerCase();

    const timestamp = Date.now();
    const attempt = siweAttempts[address] || { count: 0, ts: timestamp };
    if (timestamp - attempt.ts < 60000) {
      attempt.count += 1;
    } else {
      attempt.count = 1;
      attempt.ts = timestamp;
    }
    siweAttempts[address] = attempt;
    if (attempt.count > 5) {
      return { MESSAGE: 'Too many requests' };
    }

    let verified = false;
    try {
      const result = await siweMsg.verify({ signature });
      verified = result.success;
    } catch {
      verified = false;
    }

    if (!verified && !TEST_ADDRESSES.includes(address)) {
      return { MESSAGE: 'Invalid SIWE signature' };
    }
    const db = await drizzleDb();
    let user: User | undefined;
    const rows: User[] = await db
      .select()
      .from(users)
      .where(eq(users.ethereumAddress, address))
      .all();

    if (rows.length === 0) {
        user = await db
          .insert(users)
          .values({
            name: address,
            username: address,
            ethereumAddress: address,
            role: 'buyer',
            status: 'active',
          })
          .returning()
          .get();
    } else {
      user = rows[0];
    }

    const token = generateToken(user.id);
    const publicUser = createPublicUser(user);
    const now = new Date().toISOString();
    return {
      token,
      user: { ...publicUser, createdAt: now, updatedAt: now },
    };
  } catch (err) {
    console.error(err)
    return { MESSAGE: 'SIWE verification failed' };
  }
}

// === REGISTRATION CONTROLLERS ===

export interface RegisterRequest {
  name: string;
  username: string;
  password: string;
  role: 'buyer' | 'seller';
  storeName?: string;
  contact?: string;
  bio?: string;
}

export type RegisterResponse = LoginResponse;
export type RegisterError = LoginError;

export function validateRegisterRequest(data: unknown): RegisterRequest | RegisterError {
  if (!data || typeof data !== 'object') {
    return { MESSAGE: 'Invalid request body' };
  }

  const { name, username, password, role, storeName } = data as RegisterRequest;

  if (!name || typeof name !== 'string') {
    return { MESSAGE: 'Name is required' };
  }
  if (!username || typeof username !== 'string') {
    return { MESSAGE: 'Username is required' };
  }
  if (!password || typeof password !== 'string') {
    return { MESSAGE: 'Password is required' };
  }
  if (role !== 'buyer' && role !== 'seller') {
    return { MESSAGE: 'Role must be buyer or seller' };
  }
  if (role === 'seller' && (!storeName || typeof storeName !== 'string')) {
    return { MESSAGE: 'Store name is required for sellers' };
  }

  return data as RegisterRequest;
}

export async function registerUser(_data: RegisterRequest | unknown): Promise<RegisterResponse | RegisterError> {
  return { MESSAGE: 'Registration disabled' };
}

// === SETTINGS CONTROLLERS ===

/**
 * Get all application settings
 */
export async function getSettings(): Promise<Setting[]> {
  const db = await drizzleDb();
  return await db.select().from(settings).all();
}

// === ADMIN CONTROLLERS ===

/**
 * Check if user is admin
 */
export async function checkAdminAccess(token: string): Promise<PublicUser | null> {
  const user = await validateToken(token);
  if (!user || user.role !== 'admin') {
    return null;
  }
  return user;
}

/**
 * Get dashboard statistics
 */
export async function getDashboardStats(): Promise<DashboardStats> {
  const db = await drizzleDb();

  const [{ count: totalUsers }] = await db
    .select({ count: sql<number>`COUNT(*)` })
    .from(users)
    .all();

  const [{ count: totalSellers }] = await db
    .select({ count: sql<number>`COUNT(*)` })
    .from(sellers)
    .where(eq(sellers.status, 'active'))
    .all();

  // Sum the total value of all orders to compute sales
  const [{ sum: totalSalesRaw }] = await db
    .select({ sum: sql<number>`SUM(${orders.total})` })
    .from(orders)
    .all();
  const totalSales = Number(totalSalesRaw ?? 0);

  const [{ count: openReports }] = await db
    .select({ count: sql<number>`COUNT(*)` })
    .from(reports)
    .where(eq(reports.status, 'open'))
    .all();

  const [{ count: totalWallets }] = await db
    .select({ count: sql<number>`COUNT(*)` })
    .from(wallets)
    .all();

  return {
    totalUsers,
    totalSellers,
    totalSales,
    openReports,
    totalWallets,
  };
}

/**
 * Get all users
 */
export async function getAllUsers(): Promise<PublicUser[]> {
  const db = await drizzleDb();
  const rows: User[] = await db.select().from(users).all();
  return rows.map(createPublicUser);
}

/**
 * Get user by ID
 */
export async function getUserById(id: number): Promise<PublicUser | null> {
  const db = await drizzleDb();
  const rows: User[] = await db
    .select()
    .from(users)
    .where(eq(users.id, id))
    .all();

  if (rows.length === 0) {
    return null;
  }

  return createPublicUser(rows[0]);
}

/**
 * Update user status (ban/unban)
 */
export async function updateUserStatus(id: number, action: string): Promise<PublicUser | null> {
  const db = await drizzleDb();
  const user = await getUserById(id);

  if (!user) {
    return null;
  }

  let newStatus = user.status;
  if (action === 'toggleBan') {
    newStatus = user.status === 'banned' ? 'active' : 'banned';
  }

  await db.update(users).set({ status: newStatus, updatedAt: new Date().toISOString() }).where(eq(users.id, id)).run();

  return { ...user, status: newStatus };
}

/**
 * Update user profile
 */
export async function updateUserProfile(
  token: string,
  profileData: {
    name?: string;
    username?: string;
    role?: 'buyer' | 'seller';
  },
): Promise<PublicUser | null> {
  const user = await validateToken(token);
  if (!user) {
    return null;
  }

  const db = await drizzleDb();

  // Check if username is being changed and if it already exists
  if (profileData.username && profileData.username !== user.username) {
    const existingUser = await db
      .select()
      .from(users)
      .where(eq(users.username, profileData.username))
      .all();

    if (existingUser.length > 0) {
      throw new Error('Username already exists');
    }
  }

  // Update user profile
  const updateData: Partial<User> = {
    updatedAt: new Date().toISOString()
  };

  if (profileData.name !== undefined) {
    updateData.name = profileData.name;
  }

  if (profileData.username !== undefined) {
    updateData.username = profileData.username;
  }

  if (profileData.role !== undefined) {
    updateData.role = profileData.role;
  }

  await db.update(users).set(updateData).where(eq(users.id, user.id)).run();

  if (profileData.role === 'seller') {
    const existing = await db
      .select()
      .from(sellers)
      .where(eq(sellers.userId, user.id))
      .all();
    if (existing.length === 0) {
      await db
        .insert(sellers)
        .values({
          userId: user.id,
          name: profileData.name || user.name || user.username,
          status: 'active',
        })
        .run();
    }
  }

  // Return updated user
  const updatedUser = await db
    .select()
    .from(users)
    .where(eq(users.id, user.id))
    .all();

  if (updatedUser.length === 0) {
    return null;
  }

  return createPublicUser(updatedUser[0]);
}

/**
 * Get all sellers
 */
export async function getAllSellers(): Promise<Seller[]> {
  const db = await drizzleDb();
  return await db.select().from(sellers).all();
}

/**
 * Get seller by ID
 */
export async function getSellerById(id: number): Promise<Seller | null> {
  const db = await drizzleDb();
  const rows = await db.select().from(sellers).where(eq(sellers.id, id)).all();
  return rows[0] || null;
}

/**
 * Update seller status
 */
export async function updateSellerStatus(id: number, action: string): Promise<Seller | null> {
  const db = await drizzleDb();
  const seller = await getSellerById(id);

  if (!seller) {
    return null;
  }

  let newStatus = seller.status;
  if (action === 'approve' || action === 'activate') {
    newStatus = 'active';
  } else if (action === 'reject' || action === 'deactivate') {
    newStatus = 'inactive';
  }

  await db.update(sellers).set({ status: newStatus, updatedAt: new Date().toISOString() }).where(eq(sellers.id, id)).run();

  return { ...seller, status: newStatus };
}

/**
 * Get all products
 */
export async function getAllProducts(): Promise<Product[]> {
  const db = await drizzleDb();
  return await db.select().from(products).all();
}

/**
 * Get product by ID
 */
export async function getProductById(id: number): Promise<Product | null> {
  const db = await drizzleDb();
  const rows = await db.select().from(products).where(eq(products.id, id)).all();
  return rows[0] || null;
}

/**
 * Update product status
 */
export async function updateProductStatus(id: number, action: string): Promise<Product | null> {
  const db = await drizzleDb();
  const product = await getProductById(id);

  if (!product) {
    return null;
  }

  let newStatus = product.status;
  if (action === 'approve') {
    newStatus = 'active';
  } else if (action === 'reject' || action === 'flag') {
    newStatus = 'flagged';
  }

  if (action === 'remove') {
    await db.delete(products).where(eq(products.id, id)).run();
    return null;
  }

  await db.update(products).set({ status: newStatus, updatedAt: new Date().toISOString() }).where(eq(products.id, id)).run();

  return { ...product, status: newStatus };
}

/**
 * Get all reports
 */
export async function getAllReports(): Promise<Report[]> {
  const db = await drizzleDb();
  return await db.select().from(reports).all();
}

/**
 * Get report by ID
 */
export async function getReportById(id: number): Promise<Report | null> {
  const db = await drizzleDb();
  const rows = await db.select().from(reports).where(eq(reports.id, id)).all();
  return rows[0] || null;
}

/**
 * Resolve report
 */
export async function resolveReport(id: number): Promise<Report | null> {
  const db = await drizzleDb();
  const report = await getReportById(id);

  if (!report) {
    return null;
  }

  await db.update(reports).set({ status: 'resolved', updatedAt: new Date().toISOString() }).where(eq(reports.id, id)).run();

  return { ...report, status: 'resolved' };
}

/**
 * Get admin settings
 */
export async function getAdminSettings(): Promise<Record<string, string>> {
  const settingsList = await getSettings();
  const settingsObj: Record<string, string> = {};

  for (const setting of settingsList) {
    if (setting.key && setting.value) {
      settingsObj[setting.key] = setting.value;
    }
  }

  return settingsObj;
}

/**
 * Update admin settings
 */
export async function updateAdminSettings(newSettings: Record<string, string>): Promise<Record<string, string>> {
  const db = await drizzleDb();

  for (const [key, value] of Object.entries(newSettings)) {
    await db
      .insert(settings)
      .values({ key, value })
      .onConflictDoUpdate({ target: settings.key, set: { value } })
      .run();
  }

  return newSettings;
}

/**
 * Creates standardized error response
 */
export function createErrorResponse(message: string): LoginError {
  return { MESSAGE: message };
}

/**
 * Get wallet for authenticated user
 */
export async function getWallet(token: string): Promise<Wallet | null> {
  const user = await validateToken(token);
  if (!user) {
    return null;
  }

  const db = await drizzleDb();
  const rows = await db
    .select()
    .from(wallets)
    .where(eq(wallets.userId, user.id))
    .all();

  return rows[0] || null;
}

// === SELLER CONTROLLERS ===

/**
 * Check if user is seller
 */
export async function checkSellerAccess(token: string): Promise<PublicUser | null> {
  const user = await validateToken(token);
  if (!user || user.role !== 'seller') {
    return null;
  }
  return user;
}

/**
 * Get seller's products
 */
export async function getSellerProducts(token: string): Promise<Product[]> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  return await db
    .select()
    .from(products)
    .where(eq(products.sellerId, sellerProfile[0].id))
    .all();
}

/**
 * Get seller's product by ID
 */
export async function getSellerProduct(token: string, productId: number): Promise<Product | null> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  const rows = await db
    .select()
    .from(products)
    .where(and(eq(products.id, productId), eq(products.sellerId, sellerProfile[0].id)))
    .all();

  return rows[0] || null;
}

/**
 * Create a new product for seller
 */
export async function createSellerProduct(token: string, productData: {
  name: string;
  price: number;
  description?: string;
  imageUrl?: string;
}): Promise<Product> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  // Validate required fields
  if (!productData.name || productData.name.length < 1 || productData.name.length > 100) {
    throw new Error('Product name is required and must be between 1 and 100 characters');
  }

  if (typeof productData.price !== 'number' || productData.price < 0) {
    throw new Error('Price must be a non-negative number');
  }

  if (productData.description && productData.description.length > 500) {
    throw new Error('Description must be 500 characters or less');
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  const result = await db
    .insert(products)
    .values({
      name: productData.name,
      price: productData.price,
      description: productData.description || null,
      imageUrl: productData.imageUrl || null,
      sellerId: sellerProfile[0].id,
      status: 'active',
    })
    .returning()
    .get();

  return result;
}

/**
 * Update seller's product
 */
export async function updateSellerProduct(token: string, productId: number, productData: {
  name?: string;
  price?: number;
  description?: string;
  imageUrl?: string;
}): Promise<Product | null> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  // Check if product exists and belongs to seller
  const existingProduct = await getSellerProduct(token, productId);
  if (!existingProduct) {
    return null;
  }

  // Validate fields if provided
  if (productData.name !== undefined) {
    if (!productData.name || productData.name.length < 1 || productData.name.length > 100) {
      throw new Error('Product name must be between 1 and 100 characters');
    }
  }

  if (productData.price !== undefined) {
    if (typeof productData.price !== 'number' || productData.price < 0) {
      throw new Error('Price must be a non-negative number');
    }
  }

  if (productData.description !== undefined && productData.description && productData.description.length > 500) {
    throw new Error('Description must be 500 characters or less');
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  const result = await db
    .update(products)
    .set({
      ...(productData.name !== undefined && { name: productData.name }),
      ...(productData.price !== undefined && { price: productData.price }),
      ...(productData.description !== undefined && { description: productData.description }),
      ...(productData.imageUrl !== undefined && { imageUrl: productData.imageUrl }),
      updatedAt: new Date().toISOString(),
    })
    .where(and(eq(products.id, productId), eq(products.sellerId, sellerProfile[0].id)))
    .returning()
    .get();

  return result;
}

/**
 * Delete seller's product
 */
export async function deleteSellerProduct(token: string, productId: number): Promise<boolean> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  // Check if product exists and belongs to seller
  const existingProduct = await getSellerProduct(token, productId);
  if (!existingProduct) {
    return false;
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  await db
    .delete(products)
    .where(and(eq(products.id, productId), eq(products.sellerId, sellerProfile[0].id)))
    .run();

  return true;
}

// === BUYER CONTROLLERS ===

/**
 * Check if user is buyer
 */
export async function checkBuyerAccess(token: string): Promise<PublicUser | null> {
  const user = await validateToken(token);
  if (!user || user.role !== 'buyer') {
    return null;
  }
  return user;
}

/**
 * Get all products for buyers
 */
export async function getBuyerProducts(): Promise<Product[]> {
  const db = await drizzleDb();
  return await db.select().from(products).where(eq(products.status, 'active')).all();
}

/**
 * Get product details for buyer
 */
export async function getBuyerProduct(productId: number): Promise<Product | null> {
  const db = await drizzleDb();
  const productRows = await db.select().from(products).where(and(eq(products.id, productId), eq(products.status, 'active'))).all();

  if (productRows.length === 0) {
    return null;
  }

  return productRows[0];
}

/**
 * Get product details for admin
 */
export async function getAdminProduct(productId: number): Promise<Product | null> {
  const db = await drizzleDb();
  const productRows = await db.select().from(products).where(eq(products.id, productId)).all();

  if (productRows.length === 0) {
    return null;
  }

  return productRows[0];
}



/**
 * Get buyer's orders
 */
export async function getBuyerOrders(token: string): Promise<Order[]> {
  const buyer = await checkBuyerAccess(token);
  if (!buyer) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();
  return await db.select().from(orders).where(eq(orders.buyerId, buyer.id)).all();
}

/**
 * Get buyer's order details
 */
export async function getBuyerOrder(token: string, orderId: number): Promise<Order | null> {
  const buyer = await checkBuyerAccess(token);
  if (!buyer) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();
  const orderRows = await db.select().from(orders).where(and(eq(orders.id, orderId), eq(orders.buyerId, buyer.id))).all();

  if (orderRows.length === 0) {
    return null;
  }

  return orderRows[0];
}

// === SELLER PROFILE CONTROLLERS ===

/**
 * Get seller profile
 */
export async function getSellerProfile(token: string): Promise<Seller | null> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();
  const sellerRows = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();

  if (sellerRows.length === 0) {
    return null;
  }

  return sellerRows[0];
}

/**
 * Update seller profile
 */
export async function updateSellerProfile(token: string, profileData: {
  name?: string;
  logo?: string;
  bio?: string;
  contact?: string;
}): Promise<Seller | null> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();
  await db.update(sellers).set({ ...profileData, updatedAt: new Date().toISOString() }).where(eq(sellers.userId, seller.id)).run();

  return await getSellerProfile(token);
}

/**
 * Get seller orders
 */
export async function getSellerOrders(token: string): Promise<Order[]> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  return await db.select().from(orders).where(eq(orders.sellerId, sellerProfile[0].id)).all();
}

/**
 * Get seller payouts
 */
export async function getSellerPayouts(token: string): Promise<SellerPayout[]> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  return await db.select().from(sellerPayouts).where(eq(sellerPayouts.sellerId, sellerProfile[0].id)).all();
}

/**
 * Create seller payout
 */
export async function createSellerPayout(token: string, payoutData: {
  amount: number;
  bankAccount: string;
}): Promise<SellerPayout | null> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  const payout = await db.insert(sellerPayouts).values({
    amount: payoutData.amount,
    bankAccount: payoutData.bankAccount,
    processedAt: null,
    sellerId: sellerProfile[0].id,
    status: 'pending'
  }).returning().get();

  return payout;
}

/**
 * Update seller order status
 */
export async function updateSellerOrderStatus(token: string, orderId: number, statusData: {
  status: 'processing' | 'shipped' | 'delivered';
  trackingNumber?: string;
}): Promise<Order | null> {
  const seller = await checkSellerAccess(token);
  if (!seller) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();

  // Find the seller profile that belongs to this user
  const sellerProfile = await db.select().from(sellers).where(eq(sellers.userId, seller.id)).all();
  if (sellerProfile.length === 0) {
    throw new Error('Seller profile not found');
  }

  // Check if order exists and belongs to this seller
  const orderRows = await db.select().from(orders).where(and(eq(orders.id, orderId), eq(orders.sellerId, sellerProfile[0].id))).all();
  if (orderRows.length === 0) {
    return null;
  }

  // Update order status
  await db.update(orders).set({
    status: statusData.status,
    trackingNumber: statusData.trackingNumber,
    updatedAt: new Date().toISOString()
  }).where(eq(orders.id, orderId)).run();

  // Return updated order
  const updatedOrder = await db.select().from(orders).where(eq(orders.id, orderId)).all();
  return updatedOrder[0] || null;
}

/**
 * Create buyer order
 */
export async function createBuyerOrder(token: string, orderData: {
  items: Array<{ productId: number; quantity: number }>;
  shippingAddress: string;
  paymentMethod?: 'credit_card' | 'bank_transfer' | 'cash_on_delivery';
}): Promise<Order | null> {
  const buyer = await checkBuyerAccess(token);
  if (!buyer) {
    throw new Error('Access denied');
  }

  const db = await drizzleDb();

  // Calculate total and create orders for each item
  const createdOrders: Order[] = [];

  for (const item of orderData.items) {
    // Get product details
    const product = await db.select().from(products).where(eq(products.id, item.productId)).all();
    if (product.length === 0) {
      throw new Error(`Product ${item.productId} not found`);
    }

    const productData = product[0];
    const itemTotal = productData.price * item.quantity;

    // Create order
    const order = await db.insert(orders).values({
      productId: item.productId,
      productName: productData.name,
      quantity: item.quantity,
      items: JSON.stringify([{ productId: item.productId, quantity: item.quantity }]),
      total: itemTotal,
      status: 'pending',
      shippingAddress: orderData.shippingAddress,
      paymentMethod: orderData.paymentMethod,
      buyerId: buyer.id,
      sellerId: productData.sellerId
    }).returning().get();

    createdOrders.push(order);
  }


  // Return the first order (or you could return all orders)
  return createdOrders[0] || null;
}

// === STABLETOKEN CONTROLLERS ===

export async function getStabletokenBalance(userId: number): Promise<number> {
  const db = await drizzleDb();
  const rows: StabletokenBalance[] = await db
    .select()
    .from(stabletokenBalances)
    .where(eq(stabletokenBalances.userId, userId))
    .all();
  return rows.length > 0 ? rows[0].balance : 0;
}

export async function mintStabletoken(
  userId: number,
  amount: number
): Promise<number> {
  const db = await drizzleDb();
  const rows: StabletokenBalance[] = await db
    .select()
    .from(stabletokenBalances)
    .where(eq(stabletokenBalances.userId, userId))
    .all();

  let newBalance = amount;
  if (rows.length === 0) {
    await db
      .insert(stabletokenBalances)
      .values({ userId, balance: newBalance })
      .run();
  } else {
    newBalance = rows[0].balance + amount;
    await db
      .update(stabletokenBalances)
      .set({ balance: newBalance })
      .where(eq(stabletokenBalances.userId, userId))
      .run();
  }

  return newBalance;
}

export async function burnStabletoken(
  userId: number,
  amount: number
): Promise<number> {
  const db = await drizzleDb();
  const rows: StabletokenBalance[] = await db
    .select()
    .from(stabletokenBalances)
    .where(eq(stabletokenBalances.userId, userId))
    .all();

  if (rows.length === 0) {
    return 0;
  }

  let newBalance = rows[0].balance - amount;
  if (newBalance < 0) newBalance = 0;

  await db
    .update(stabletokenBalances)
    .set({ balance: newBalance })
    .where(eq(stabletokenBalances.userId, userId))
    .run();

  return newBalance;
}

// === STABLETOKEN TRANSACTION CONTROLLERS ===

export async function createStabletokenTransaction(
  userId: number,
  amount: number,
  type: string,
  reference?: string | null
): Promise<StabletokenTransaction> {
  const db = await drizzleDb();
  const tx = await db
    .insert(stabletokenTransactions)
    .values({ userId, amount, type, reference })
    .returning()
    .get();
  return tx;
}

export async function getTransactionsForUser(
  userId: number
): Promise<StabletokenTransaction[]> {
  const db = await drizzleDb();
  return await db
    .select()
    .from(stabletokenTransactions)
    .where(eq(stabletokenTransactions.userId, userId))
    .all();
}

export async function handlePaymentWebhook(data: {
  paymentId: string;
  userId: number;
  amount: number;
  status: string;
}): Promise<void> {
  if (data.status === 'success') {
    await createStabletokenTransaction(
      data.userId,
      data.amount,
      'payment',
      data.paymentId
    );
    await mintStabletoken(data.userId, data.amount);
  }
}

// === WALLET CONTROLLERS ===

/**
 * Get wallet for current user
 */
export async function getUserWallet(token: string): Promise<Wallet | null> {
  const user = await validateToken(token);
  if (!user) {
    return null;
  }

  const db = await drizzleDb();
  const walletRows = await db
    .select()
    .from(wallets)
    .where(eq(wallets.userId, user.id))
    .all();

  return walletRows[0] || null;
}

/**
 * Get wallet balance for current user
 */
export async function getWalletBalance(token: string): Promise<string | null> {
  const wallet = await getUserWallet(token);
  return wallet ? wallet.balance : null;
}

/**
 * Admin: get wallet for any user
 */
export async function getWalletByUserId(token: string, userId: number): Promise<Wallet | null> {
  const admin = await checkAdminAccess(token);
  if (!admin) {
    return null;
  }

  const db = await drizzleDb();
  const walletRows = await db
    .select()
    .from(wallets)
    .where(eq(wallets.userId, userId))
    .all();

  return walletRows[0] || null;
}

/**
 * Admin: get all wallets
 */
export async function getAllWallets(token: string): Promise<Wallet[] | null> {
  const admin = await checkAdminAccess(token);
  if (!admin) {
    return null;
  }

  const db = await drizzleDb();
  return await db.select().from(wallets).all();
}

// === EXISTING CONTROLLERS ===


=== server/db.ts ===
import initSqlJs from 'sql.js'
import { drizzle } from 'drizzle-orm/sql-js'
import * as schema from './schema'
import { createTableStatements } from './schema'
import { seedDb } from './seed'
let db: ReturnType<typeof drizzle> | null = null

/**
 * Initialize the in-memory SQLite database and return a drizzle instance.
 * The database is seeded on first initialization.
 */
export async function initDrizzle(): Promise<ReturnType<typeof drizzle>> {
  if (db) return db // Already initialized

  // INSERT_YOUR_CODE
  // Detect if running in a test environment (Jest, Vitest, etc.)
  const isTestEnv =
    typeof process !== 'undefined' &&
    (process.env.NODE_ENV === 'test' ||
      process.env.VITEST ||
      process.env.JEST_WORKER_ID !== undefined ||
      process.env.JEST !== undefined ||
      process.env.TEST === 'true' ||
      // fallback for browser-based test runners
      (typeof window !== 'undefined' && (window as { __TEST__?: boolean }).__TEST__));

  const sqlWasmLocation = isTestEnv ? './public/sql-wasm.wasm' : '/webappx/sql-wasm.wasm'
  
  const SQL = await initSqlJs({
    locateFile: (file) => {
      void file
      return sqlWasmLocation
    },
  })

  const sqlite = new SQL.Database()
  db = drizzle(sqlite, { schema })

  for (const statement of createTableStatements) {
    await db.run(statement)
  }

  console.log('[sql.js] DB ready!')

  await seedDb(db)
  return db
}

// Always returns the same Promise if already running
let dbPromise: Promise<ReturnType<typeof drizzle>> | null = null

/**
 * Get the drizzle database instance, initializing it if necessary.
 */
export function drizzleDb(): Promise<ReturnType<typeof drizzle>> {
  if (!dbPromise) {
    dbPromise = initDrizzle()
  }
  return dbPromise
}


=== server/handlers.ts ===
import { rest } from 'msw';
import {
  validateToken,
  getSettings,
  checkAdminAccess,
  getDashboardStats,
  getAllUsers,
  getUserById,
  updateUserStatus,
  getAllSellers,
  getSellerById,
  updateSellerStatus,
  getAllProducts,
  getAdminProduct,
  updateProductStatus,
  getAllReports,
  resolveReport,
  getAdminSettings,
  updateAdminSettings,
  createErrorResponse,
  // Add seller product controllers
  getSellerProducts,
  getSellerProduct,
  createSellerProduct,
  updateSellerProduct,
  deleteSellerProduct,
  // Add buyer controllers
  getBuyerProducts,
  getBuyerProduct,
  getBuyerOrders,
  getBuyerOrder,
  // Add seller profile controllers
  getSellerProfile,
  updateSellerProfile,
  getSellerOrders,
  getSellerPayouts,
  // Add new controllers
  createSellerPayout,
  updateSellerOrderStatus,
  getStabletokenBalance,
  mintStabletoken,
  createBuyerOrder,
  updateUserProfile,
  registerUser,
  handlePaymentWebhook,
  getTransactionsForUser,
  loginWithSiwe,
  getUserWallet,
  getWalletBalance,
  getWalletByUserId,
  getAllWallets,
} from './controllers';

// === AUTHORIZATION HELPERS ===

type AuthResult = {
  success: boolean;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  user?: any;
  error?: { status: number; message: string };
};

/**
 * Extract and validate Bearer token from request headers
 */
async function extractToken(req: { headers: { get: (name: string) => string | null } }): Promise<AuthResult> {
  const auth = req.headers.get('authorization');
  if (!auth || !auth.startsWith('Bearer ')) {
    return {
      success: false,
      error: { status: 401, message: 'Invalid authentication token' }
    };
  }
  
  const token = auth.split(' ')[1];
  const user = await validateToken(token);
  
  if (!user) {
    return {
      success: false,
      error: { status: 401, message: 'Invalid authentication token' }
    };
  }
  
  return { success: true, user: { ...user, token } };
}

/**
 * Check if user has admin access
 */
async function requireAdmin(req: { headers: { get: (name: string) => string | null } }): Promise<AuthResult> {
  const authResult = await extractToken(req);
  if (!authResult.success) {
    return authResult;
  }
  
  const admin = await checkAdminAccess(authResult.user.token);
  if (!admin) {
    return {
      success: false,
      error: { status: 403, message: 'Access denied' }
    };
  }
  
  return { success: true, user: admin };
}

/**
 * Check if user has seller access
 */
async function requireSeller(req: { headers: { get: (name: string) => string | null } }): Promise<AuthResult> {
  const authResult = await extractToken(req);
  if (!authResult.success) {
    return authResult;
  }
  
  if (authResult.user.role !== 'seller') {
    return {
      success: false,
      error: { status: 403, message: 'Access denied' }
    };
  }
  
  return { success: true, user: authResult.user };
}


/**
 * Check if user is authenticated (any role)
 */
async function requireAuth(req: { headers: { get: (name: string) => string | null } }): Promise<AuthResult> {
  return extractToken(req);
}

/**
 * Add a delay to simulate real API latency
 */
async function addDelay(): Promise<void> {
  await new Promise(resolve => setTimeout(resolve, 1000));
}

// === HANDLERS ===
export const handlers = [
  // === AUTHENTICATION ===
  

  // POST /api/login/siwe - Authenticate via Sign-In with Ethereum
  rest.post('/api/login/siwe', async (req, res, ctx) => {
    try {
      await addDelay();
      const body = await req.json();
      const result = await loginWithSiwe(body);
      if ('MESSAGE' in result) {
        return res(ctx.status(400), ctx.json(result));
      }
      return res(ctx.status(200), ctx.json(result));
    } catch (error) {
      console.error('SIWE login error:', error);
      return res(
        ctx.status(500),
        ctx.json(createErrorResponse('Internal server error'))
      );
    }
  }),

  // POST /api/register - Create new user account
  rest.post('/api/register', async (req, res, ctx) => {
    try {
      await addDelay();

      const body = await req.json();
      const result = await registerUser(body);

      if ('MESSAGE' in result) {
        if (result.MESSAGE.includes('required') || result.MESSAGE.includes('Invalid')) {
          return res(ctx.status(400), ctx.json(result));
        }
        if (result.MESSAGE.includes('exists')) {
          return res(ctx.status(409), ctx.json(result));
        }
        return res(ctx.status(500), ctx.json(result));
      }

      return res(ctx.status(201), ctx.json(result));
    } catch (error) {
      console.error('Register handler error:', error);
      return res(
        ctx.status(500),
        ctx.json(createErrorResponse('Internal server error'))
      );
    }
  }),

  // GET /api/me - Get current user profile
  rest.get('/api/me', async (req, res, ctx) => {
    try {
      await addDelay();
      
      const authResult = await requireAuth(req);
      if (!authResult.success) {
        return res(ctx.status(authResult.error!.status), ctx.json(createErrorResponse(authResult.error!.message)));
      }
      
      return res(ctx.status(200), ctx.json(authResult.user));
      
    } catch (error) {
      console.error('Get user profile error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PUT /api/me - Update current user profile
  rest.put('/api/me', async (req, res, ctx) => {
    try {
      await addDelay();
      
      const authResult = await requireAuth(req);
      if (!authResult.success) {
        return res(ctx.status(authResult.error!.status), ctx.json(createErrorResponse(authResult.error!.message)));
      }
      
      const body = await req.json();
      const user = await updateUserProfile(authResult.user.token, body);
      
      if (!user) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      return res(ctx.status(200), ctx.json(user));
      
    } catch (error) {
      console.error('Update user profile error:', error);
      if (error instanceof Error && error.message === 'Username already exists') {
        return res(ctx.status(409), ctx.json(createErrorResponse('Username already exists')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/wallet - Get current user's wallet
  rest.get('/api/wallet', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAuth(req);
      if (!authResult.success) {
        return res(
          ctx.status(authResult.error!.status),
          ctx.json(createErrorResponse(authResult.error!.message))
        );
      }

      const wallet = await getUserWallet(authResult.user.token);
      if (!wallet) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Wallet not found')));
      }

      return res(ctx.status(200), ctx.json(wallet));
    } catch (error) {
      console.error('Get wallet error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/wallet/balance - Get wallet balance
  rest.get('/api/wallet/balance', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAuth(req);
      if (!authResult.success) {
        return res(
          ctx.status(authResult.error!.status),
          ctx.json(createErrorResponse(authResult.error!.message))
        );
      }

      const balance = await getWalletBalance(authResult.user.token);
      if (balance === null) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Wallet not found')));
      }

      return res(ctx.status(200), ctx.json({ balance }));
    } catch (error) {
      console.error('Get wallet balance error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/wallet/:userId - Admin get user wallet
  rest.get('/api/wallet/:userId', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAdmin(req);
      if (!authResult.success) {
        return res(
          ctx.status(authResult.error!.status),
          ctx.json(createErrorResponse(authResult.error!.message))
        );
      }

      const userId = Number(req.params.userId);
      const wallet = await getWalletByUserId(authResult.user.token, userId);
      if (!wallet) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Wallet not found')));
      }

      return res(ctx.status(200), ctx.json(wallet));
    } catch (error) {
      console.error('Get wallet by user error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === SETTINGS ===
  
  // GET /api/settings - Get application settings
  rest.get('/api/settings', async (_req, res, ctx) => {
    try {
      await addDelay();
      const settings = await getSettings();
      return res(ctx.status(200), ctx.json(settings));
    } catch (error) {
      console.error('Get settings error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === ADMIN DASHBOARD ===
  
  // GET /api/admin/dashboard - Get admin dashboard statistics
  rest.get('/api/admin/dashboard', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAdmin(req);
      if (!authResult.success) {
        return res(ctx.status(authResult.error!.status), ctx.json(createErrorResponse(authResult.error!.message)));
      }
      
      const stats = await getDashboardStats();
      return res(ctx.status(200), ctx.json(stats));
      
    } catch (error) {
      console.error('Get dashboard stats error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === ADMIN USERS ===
  
  // GET /api/admin/users - Get all users
  rest.get('/api/admin/users', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAdmin(req);
      if (!authResult.success) {
        return res(ctx.status(authResult.error!.status), ctx.json(createErrorResponse(authResult.error!.message)));
      }
      
      const users = await getAllUsers();
      return res(ctx.status(200), ctx.json(users));
      
    } catch (error) {
      console.error('Get users error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/admin/users/{id} - Get user details
  rest.get('/api/admin/users/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAdmin(req);
      if (!authResult.success) {
        return res(ctx.status(authResult.error!.status), ctx.json(createErrorResponse(authResult.error!.message)));
      }
      
      const id = Number(req.params.id);
      const user = await getUserById(id);
      
      if (!user) {
        return res(ctx.status(404), ctx.json(createErrorResponse('User not found')));
      }
      
      return res(ctx.status(200), ctx.json(user));
      
    } catch (error) {
      console.error('Get admin user error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PATCH /api/admin/users/{id} - Update user status
  rest.patch('/api/admin/users/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAdmin(req);
      if (!authResult.success) {
        return res(ctx.status(authResult.error!.status), ctx.json(createErrorResponse(authResult.error!.message)));
      }
      
      const id = Number(req.params.id);
      const body = await req.json();
      const { action } = body;
      
      if (action !== 'toggleBan') {
        return res(ctx.status(400), ctx.json(createErrorResponse('Invalid action')));
      }
      
      const user = await updateUserStatus(id, action);
      
      if (!user) {
        return res(ctx.status(404), ctx.json(createErrorResponse('User not found')));
      }
      
      return res(ctx.status(200), ctx.json(user));
      
    } catch (error) {
      console.error('Update user error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === ADMIN SELLERS ===
  
  // GET /api/admin/sellers - Get all sellers
  rest.get('/api/admin/sellers', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAdmin(req);
      if (!authResult.success) {
        return res(ctx.status(authResult.error!.status), ctx.json(createErrorResponse(authResult.error!.message)));
      }
      
      const sellers = await getAllSellers();
      return res(ctx.status(200), ctx.json(sellers));
      
    } catch (error) {
      console.error('Get sellers error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/admin/sellers/{id} - Get seller details
  rest.get('/api/admin/sellers/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      
      const id = Number(req.params.id);
      const seller = await getSellerById(id);
      
      if (!seller) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Seller not found')));
      }
      
      return res(ctx.status(200), ctx.json(seller));
      
    } catch (error) {
      console.error('Get admin seller error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PATCH /api/admin/sellers/{id} - Update seller status
  rest.patch('/api/admin/sellers/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      
      const id = Number(req.params.id);
      const body = await req.json();
      const { action } = body;
      
      if (!['approve', 'reject', 'activate', 'deactivate'].includes(action)) {
        return res(ctx.status(400), ctx.json(createErrorResponse('Invalid action')));
      }
      
      const seller = await updateSellerStatus(id, action);
      
      if (!seller) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Seller not found')));
      }
      
      return res(ctx.status(200), ctx.json(seller));
      
    } catch (error) {
      console.error('Update seller error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === ADMIN PRODUCTS ===
  
  // GET /api/admin/products - Get all products
  rest.get('/api/admin/products', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      
      const products = await getAllProducts();
      return res(ctx.status(200), ctx.json(products));
      
    } catch (error) {
      console.error('Get products error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/admin/products/{id} - Get product details for admin
  rest.get('/api/admin/products/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      
      const id = Number(req.params.id);
      const product = await getAdminProduct(id);
      
      if (!product) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Product not found')));
      }
      
      return res(ctx.status(200), ctx.json(product));
      
    } catch (error) {
      console.error('Get admin product error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PATCH /api/admin/products/{id} - Update product status
  rest.patch('/api/admin/products/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      
      const id = Number(req.params.id);
      const body = await req.json();
      const { action } = body;
      
      if (!['approve', 'reject', 'flag', 'remove'].includes(action)) {
        return res(ctx.status(400), ctx.json(createErrorResponse('Invalid action')));
      }
      
      const product = await updateProductStatus(id, action);
      
      if (action === 'remove') {
        return res(ctx.status(200));
      }
      
      if (!product) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Product not found')));
      }
      
      return res(ctx.status(200), ctx.json(product));
      
    } catch (error) {
      console.error('Update product error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/admin/wallets - Get all user wallets
  rest.get('/api/admin/wallets', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAdmin(req);
      if (!authResult.success) {
        return res(
          ctx.status(authResult.error!.status),
          ctx.json(createErrorResponse(authResult.error!.message))
        );
      }

      const wallets = await getAllWallets(authResult.user.token);
      if (!wallets) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }

      return res(ctx.status(200), ctx.json(wallets));
    } catch (error) {
      console.error('Get wallets error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === ADMIN REPORTS ===
  
  // GET /api/admin/reports - Get all reports
  rest.get('/api/admin/reports', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      
      const reports = await getAllReports();
      return res(ctx.status(200), ctx.json(reports));
      
    } catch (error) {
      console.error('Get reports error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PATCH /api/admin/reports/:id - Resolve report
  rest.patch('/api/admin/reports/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      const id = Number(req.params.id);
      const body = await req.json();
      if (body.action !== 'resolve') {
        return res(ctx.status(400), ctx.json(createErrorResponse('Invalid action')));
      }
      const report = await resolveReport(id);
      if (!report) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Report not found')));
      }
      return res(ctx.status(200), ctx.json(report));
    } catch (error) {
      console.error('Resolve report error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === ADMIN SETTINGS ===
  
  // GET /api/admin/settings - Get admin settings
  rest.get('/api/admin/settings', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      
      const settings = await getAdminSettings();
      return res(ctx.status(200), ctx.json(settings));
      
    } catch (error) {
      console.error('Get admin settings error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PUT /api/admin/settings - Update admin settings
  rest.put('/api/admin/settings', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const admin = await checkAdminAccess(token);
      
      if (!admin) {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      
      const newSettings = await req.json();
      const updatedSettings = await updateAdminSettings(newSettings);
      return res(ctx.status(200), ctx.json(updatedSettings));
      
    } catch (error) {
      console.error('Update admin settings error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === SELLER PRODUCTS ===
  
  // GET /api/seller/products - Get seller's products
  rest.get('/api/seller/products', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireSeller(req);
      if (!authResult.success) {
        return res(ctx.status(authResult.error!.status), ctx.json(createErrorResponse(authResult.error!.message)));
      }
      
      const products = await getSellerProducts(authResult.user.token);
      return res(ctx.status(200), ctx.json(products));
      
    } catch (error) {
      console.error('Get seller products error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // POST /api/seller/products - Create new product
  rest.post('/api/seller/products', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const productData = await req.json();
      
      const product = await createSellerProduct(token, productData);
      return res(ctx.status(201), ctx.json(product));
      
    } catch (error) {
      console.error('Create seller product error:', error);
      if (error instanceof Error) {
        if (error.message === 'Access denied') {
          return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
        }
        if (error.message.includes('required') || error.message.includes('must be')) {
          return res(ctx.status(400), ctx.json(createErrorResponse(error.message)));
        }
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/seller/products/{id} - Get seller's product details
  rest.get('/api/seller/products/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const productId = Number(req.params.id);
      
      const product = await getSellerProduct(token, productId);
      
      if (!product) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Product not found')));
      }
      
      return res(ctx.status(200), ctx.json(product));
      
    } catch (error) {
      console.error('Get seller product error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PUT /api/seller/products/{id} - Update seller's product
  rest.put('/api/seller/products/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const productId = Number(req.params.id);
      const productData = await req.json();
      
      const product = await updateSellerProduct(token, productId, productData);
      
      if (!product) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Product not found')));
      }
      
      return res(ctx.status(200), ctx.json(product));
      
    } catch (error) {
      console.error('Update seller product error:', error);
      if (error instanceof Error) {
        if (error.message === 'Access denied') {
          return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
        }
        if (error.message.includes('must be')) {
          return res(ctx.status(400), ctx.json(createErrorResponse(error.message)));
        }
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // DELETE /api/seller/products/{id} - Delete seller's product
  rest.delete('/api/seller/products/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const productId = Number(req.params.id);
      
      const deleted = await deleteSellerProduct(token, productId);
      
      if (!deleted) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Product not found')));
      }
      
      return res(ctx.status(204));
      
    } catch (error) {
      console.error('Delete seller product error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === BUYER ENDPOINTS ===
  

  // GET /api/buyer/products - Get all products for buyers
  rest.get('/api/buyer/products', async (_req, res, ctx) => {
    try {
      await addDelay();
      const products = await getBuyerProducts();
      return res(ctx.status(200), ctx.json(products));
    } catch (error) {
      console.error('Get buyer products error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/buyer/products/{id} - Get product details for buyer
  rest.get('/api/buyer/products/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const id = Number(req.params.id);
      const product = await getBuyerProduct(id);
      
      if (!product) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Product not found')));
      }
      
      return res(ctx.status(200), ctx.json(product));
      
    } catch (error) {
      console.error('Get buyer product error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/buyer/orders - Get buyer's orders
  rest.get('/api/buyer/orders', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const orders = await getBuyerOrders(token);
      
      return res(ctx.status(200), ctx.json(orders));
      
    } catch (error) {
      console.error('Get buyer orders error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/buyer/orders/{id} - Get buyer's order details
  rest.get('/api/buyer/orders/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const orderId = Number(req.params.id);
      const order = await getBuyerOrder(token, orderId);
      
      if (!order) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Order not found')));
      }
      
      return res(ctx.status(200), ctx.json(order));
      
    } catch (error) {
      console.error('Get buyer order error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PATCH /api/seller/orders/:id - Update order status
  rest.patch('/api/seller/orders/:id', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      const token = auth.split(' ')[1];
      const orderId = Number(req.params.id);
      const body = await req.json();
      const order = await updateSellerOrderStatus(token, orderId, body);
      if (!order) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Order not found')));
      }
      return res(ctx.status(200), ctx.json(order));
    } catch (error) {
      console.error('Update seller order status error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // POST /api/buyer/orders - Create new order
  rest.post('/api/buyer/orders', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      const token = auth.split(' ')[1];
      const body = await req.json();
      const order = await createBuyerOrder(token, body);
      if (!order) {
        return res(ctx.status(400), ctx.json(createErrorResponse('Invalid order request')));
      }
      return res(ctx.status(201), ctx.json(order));
    } catch (error) {
      console.error('Create buyer order error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // === SELLER PROFILE ENDPOINTS ===
  
  // GET /api/seller/profile - Get seller profile
  rest.get('/api/seller/profile', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const profile = await getSellerProfile(token);
      
      if (!profile) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Seller profile not found')));
      }
      
      return res(ctx.status(200), ctx.json(profile));
      
    } catch (error) {
      console.error('Get seller profile error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // PUT /api/seller/profile - Update seller profile
  rest.put('/api/seller/profile', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const body = await req.json();
      
      const profile = await updateSellerProfile(token, body);
      
      if (!profile) {
        return res(ctx.status(404), ctx.json(createErrorResponse('Seller profile not found')));
      }
      
      return res(ctx.status(200), ctx.json(profile));
      
    } catch (error) {
      console.error('Update seller profile error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/seller/orders - Get seller orders
  rest.get('/api/seller/orders', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      
      const token = auth.split(' ')[1];
      const orders = await getSellerOrders(token);
      
      return res(ctx.status(200), ctx.json(orders));
      
    } catch (error) {
      console.error('Get seller orders error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/seller/payouts - Get seller payouts
  rest.get('/api/seller/payouts', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      const token = auth.split(' ')[1];
      const payouts = await getSellerPayouts(token);
      return res(ctx.status(200), ctx.json(payouts));
    } catch (error) {
      console.error('Get seller payouts error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // POST /api/seller/payouts - Request new payout
  rest.post('/api/seller/payouts', async (req, res, ctx) => {
    try {
      await addDelay();
      const auth = req.headers.get('authorization');
      if (!auth || !auth.startsWith('Bearer ')) {
        return res(ctx.status(401), ctx.json(createErrorResponse('Invalid authentication token')));
      }
      const token = auth.split(' ')[1];
      const body = await req.json();
      const payout = await createSellerPayout(token, body);
      if (!payout) {
        return res(ctx.status(400), ctx.json(createErrorResponse('Invalid payout request')));
      }
      return res(ctx.status(201), ctx.json(payout));
    } catch (error) {
      console.error('Create seller payout error:', error);
      if (error instanceof Error && error.message === 'Access denied') {
        return res(ctx.status(403), ctx.json(createErrorResponse('Access denied')));
      }
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/balance - Get stabletoken balance for current user
  rest.get('/api/balance', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAuth(req);
      if (!authResult.success) {
        return res(
          ctx.status(authResult.error!.status),
          ctx.json(createErrorResponse(authResult.error!.message))
        );
      }

      const balance = await getStabletokenBalance(authResult.user.id);
      return res(ctx.status(200), ctx.json({ balance }));
    } catch (error) {
      console.error('Get balance error:', error);
      return res(
        ctx.status(500),
        ctx.json(createErrorResponse('Internal server error'))
      );
    }
  }),

  // POST /api/payments/initiate - Initiate payment via Xendit
  rest.post('/api/payments/initiate', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAuth(req);
      if (!authResult.success) {
        return res(
          ctx.status(authResult.error!.status),
          ctx.json(createErrorResponse(authResult.error!.message))
        );
      }

      const body = await req.json();
      const amount = Number(body.amount);
      if (!amount || Number.isNaN(amount) || amount <= 0) {
        return res(ctx.status(400), ctx.json(createErrorResponse('Invalid amount')));
      }

      const paymentId = `pay_${Date.now()}`;
      const paymentUrl = `https://checkout.xendit.co/${paymentId}`;
      return res(ctx.status(200), ctx.json({ paymentId, paymentUrl }));
    } catch (error) {
      console.error('Initiate payment error:', error);
      return res(
        ctx.status(500),
        ctx.json(createErrorResponse('Internal server error'))
      );
    }
  }),

  // POST /api/payments/webhook - Handle payment status update
  rest.post('/api/payments/webhook', async (req, res, ctx) => {
    try {
      const body = await req.json();
      await handlePaymentWebhook(body);
      return res(ctx.status(200), ctx.json({ received: true }));
    } catch (error) {
      console.error('Payment webhook error:', error);
      return res(ctx.status(500), ctx.json(createErrorResponse('Internal server error')));
    }
  }),

  // GET /api/transactions - Get user transaction history
  rest.get('/api/transactions', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAuth(req);
      if (!authResult.success) {
        return res(
          ctx.status(authResult.error!.status),
          ctx.json(createErrorResponse(authResult.error!.message))
        );
      }

      const transactions = await getTransactionsForUser(authResult.user.id);
      return res(ctx.status(200), ctx.json({ transactions }));
    } catch (error) {
      console.error('Get transactions error:', error);
      return res(
        ctx.status(500),
        ctx.json(createErrorResponse('Internal server error'))
      );
    }
  }),

  // POST /api/mint - Mint stabletoken (admin only)
  rest.post('/api/mint', async (req, res, ctx) => {
    try {
      await addDelay();
      const authResult = await requireAdmin(req);
      if (!authResult.success) {
        return res(
          ctx.status(authResult.error!.status),
          ctx.json(createErrorResponse(authResult.error!.message))
        );
      }

      const body = await req.json();
      const amount = Number(body.amount);
      const userId = Number(body.userId ?? authResult.user.id);

      if (!amount || Number.isNaN(amount) || amount <= 0) {
        return res(ctx.status(400), ctx.json(createErrorResponse('Invalid amount')));
      }

      const balance = await mintStabletoken(userId, amount);
      return res(ctx.status(200), ctx.json({ balance }));
    } catch (error) {
      console.error('Mint stabletoken error:', error);
      return res(
        ctx.status(500),
        ctx.json(createErrorResponse('Internal server error'))
      );
    }
  }),
];




=== server/schema.ts ===
import type { InferSelectModel } from 'drizzle-orm'
import {
  sqliteTable,
  integer,
  text,
  real,
  primaryKey,
  uniqueIndex,
  index,
} from 'drizzle-orm/sqlite-core'
import { sql } from 'drizzle-orm'

//
// USERS TABLE
//
export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    username: text('username').notNull(),
    ethereumAddress: text('ethereum_address').notNull().unique(),
    authMethod: text('auth_method').default('siwe'),
    role: text('role'), // 'admin' | 'buyer' | 'seller'
    status: text('status'), // 'active' | 'banned' | 'inactive'
    createdAt: text('createdAt').default(sql`CURRENT_TIMESTAMP`),
    updatedAt: text('updatedAt').default(sql`CURRENT_TIMESTAMP`),
  },
  (table) => ({
    usernameIndex: uniqueIndex('username_unique').on(table.username),
    nameIndex: uniqueIndex('name_unique').on(table.name),
    authMethodIndex: index('auth_method_idx').on(table.authMethod),
    ethereumAddressIndex: index('ethereum_address_idx').on(table.ethereumAddress),
  })
)

//
// STABLETOKEN BALANCES TABLE
//
export const stabletokenBalances = sqliteTable('stabletokenBalances', {
  userId: integer('userId').primaryKey(),
  balance: real('balance').default(0).notNull(),
})

//
// STABLETOKEN TRANSACTIONS TABLE
//
export const stabletokenTransactions = sqliteTable('stabletokenTransactions', {
  id: integer('id').primaryKey(),
  userId: integer('userId').notNull(),
  amount: real('amount').notNull(),
  type: text('type').notNull(), // 'payment' | 'mint' | 'burn'
  reference: text('reference'),
  createdAt: text('createdAt').default(sql`CURRENT_TIMESTAMP`),
})

//
// SELLERS TABLE
//
export const sellers = sqliteTable('sellers', {
  id: integer('id').primaryKey(),
  userId: integer('userId').notNull().unique(), // ID of the user who owns this seller profile (unique - one seller per user)
  name: text('name').notNull(),
  logo: text('logo'),
  bio: text('bio'),
  contact: text('contact'),
  address: text('address'),
  website: text('website'),
  status: text('status'), // 'active' | 'inactive' | 'pending'
  createdAt: text('createdAt').default(sql`CURRENT_TIMESTAMP`),
  updatedAt: text('updatedAt').default(sql`CURRENT_TIMESTAMP`),
})

//
// PRODUCTS TABLE
//
export const products = sqliteTable('products', {
  id: integer('id').primaryKey(),
  name: text('name').notNull(),
  price: real('price').notNull(),
  description: text('description'),
  imageUrl: text('imageUrl'),
  sellerId: integer('sellerId'),
  status: text('status'), // 'active' | 'inactive' | 'pending' | 'flagged'
  createdAt: text('createdAt').default(sql`CURRENT_TIMESTAMP`),
  updatedAt: text('updatedAt').default(sql`CURRENT_TIMESTAMP`),
})

//
// WALLETS TABLE
//
export const wallets = sqliteTable('wallets', {
  id: integer('id').primaryKey(),
  userId: integer('userId').notNull().unique(),
  balance: text('balance').notNull().default('0'),
  createdAt: text('createdAt').default(sql`CURRENT_TIMESTAMP`),
  updatedAt: text('updatedAt').default(sql`CURRENT_TIMESTAMP`),
})

//
// ORDERS TABLE (Unified for both buyer and seller views)
//
export const orders = sqliteTable('orders', {
  id: integer('id').primaryKey(),
  productId: integer('productId').notNull(),
  productName: text('productName').notNull(),
  quantity: integer('quantity').notNull(),
  items: text('items'), // JSON string of cart items
  total: real('total').notNull(),
  status: text('status'), // 'pending' | 'processing' | 'shipped' | 'delivered'
  shippingAddress: text('shippingAddress'),
  paymentMethod: text('paymentMethod'),
  trackingNumber: text('trackingNumber'),
  buyerId: integer('buyerId'), // ID of the buyer who placed the order
  sellerId: integer('sellerId'), // ID of the seller who owns the product
  createdAt: text('createdAt').default(sql`CURRENT_TIMESTAMP`),
  updatedAt: text('updatedAt').default(sql`CURRENT_TIMESTAMP`),
})

//
// SELLER PAYOUTS TABLE
//
export const sellerPayouts = sqliteTable('sellerPayouts', {
  id: integer('id').primaryKey(),
  amount: real('amount').notNull(),
  bankAccount: text('bankAccount'),
  processedAt: text('processedAt'),
  sellerId: integer('sellerId'),
  status: text('status'), // 'pending' | 'completed' | 'failed'
  createdAt: text('createdAt').default(sql`CURRENT_TIMESTAMP`),
  updatedAt: text('updatedAt').default(sql`CURRENT_TIMESTAMP`),
})

//
// REPORTS TABLE
//
export const reports = sqliteTable('reports', {
  id: integer('id').primaryKey(),
  message: text('message'),
  status: text('status'), // 'open' | 'closed' | 'resolved'
  createdAt: text('createdAt').default(sql`CURRENT_TIMESTAMP`),
  updatedAt: text('updatedAt').default(sql`CURRENT_TIMESTAMP`),
})

//
// SETTINGS TABLE
//
export const settings = sqliteTable(
  'settings',
  {
    key: text('key').notNull(),
    value: text('value'),
  },
  (table) => ({
    pk: primaryKey({ columns: [table.key] }),
  })
)

//
// Type helpers
//

export interface DashboardStats {
  totalUsers: number
  totalSellers: number
  totalSales: number
  openReports: number
  totalWallets: number
}

// Export all types from drizzle schemas
export type User = InferSelectModel<typeof users>
export type PublicUser = User
export type Product = InferSelectModel<typeof products>
export type Seller = InferSelectModel<typeof sellers>
export type Wallet = InferSelectModel<typeof wallets>
export type Order = InferSelectModel<typeof orders>
export type SellerPayout = InferSelectModel<typeof sellerPayouts>
export type Report = InferSelectModel<typeof reports>
export type Setting = InferSelectModel<typeof settings>
export type StabletokenBalance = InferSelectModel<typeof stabletokenBalances>
export type StabletokenTransaction = InferSelectModel<
  typeof stabletokenTransactions
>

// Type aliases for backward compatibility
export type SellerProduct = Product
export type SellerProfile = Seller
export type AdminUser = User
export type AdminSeller = Seller
export type AdminProduct = Product
export type AdminReport = Report
export type AdminSettings = Record<string, string>

//
// Raw SQL DDL — always keep in sync with your Drizzle schema!
//
export const createTableStatements = [
  `
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    name TEXT UNIQUE,
    username TEXT NOT NULL UNIQUE,
    ethereum_address TEXT NOT NULL UNIQUE,
    auth_method TEXT DEFAULT 'siwe',
    role TEXT,
    status TEXT,
    createdAt TEXT,
    updatedAt TEXT
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS sellers (
    id INTEGER PRIMARY KEY,
    userId INTEGER NOT NULL UNIQUE,
    name TEXT NOT NULL,
    logo TEXT,
    bio TEXT,
    contact TEXT,
    address TEXT,
    website TEXT,
    status TEXT,
    createdAt TEXT,
    updatedAt TEXT
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    description TEXT,
    imageUrl TEXT,
    sellerId INTEGER,
    status TEXT,
    createdAt TEXT,
    updatedAt TEXT
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS wallets (
    id INTEGER PRIMARY KEY,
    userId INTEGER NOT NULL UNIQUE,
    balance TEXT NOT NULL DEFAULT '0',
    createdAt TEXT,
    updatedAt TEXT
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY,
    productId INTEGER NOT NULL,
    productName TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    items TEXT,
    total REAL NOT NULL,
    status TEXT,
    shippingAddress TEXT,
    paymentMethod TEXT,
    trackingNumber TEXT,
    buyerId INTEGER,
    sellerId INTEGER,
    createdAt TEXT,
    updatedAt TEXT
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS sellerPayouts (
    id INTEGER PRIMARY KEY,
    amount REAL NOT NULL,
    bankAccount TEXT,
    processedAt TEXT,
    sellerId INTEGER,
    status TEXT,
    createdAt TEXT,
    updatedAt TEXT
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS stabletokenBalances (
    userId INTEGER PRIMARY KEY,
    balance REAL NOT NULL
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS stabletokenTransactions (
    id INTEGER PRIMARY KEY,
    userId INTEGER NOT NULL,
    amount REAL NOT NULL,
    type TEXT NOT NULL,
    reference TEXT,
    createdAt TEXT
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS reports (
    id INTEGER PRIMARY KEY,
    message TEXT,
    status TEXT,
    createdAt TEXT,
    updatedAt TEXT
  );
  `,
  `
  CREATE TABLE IF NOT EXISTS settings (
    key TEXT PRIMARY KEY,
    value TEXT
  );
  `,
]


=== server/seed.ts ===
// seed.ts

import { drizzle } from 'drizzle-orm/sql-js' // or drizzle-orm/better-sqlite3 for Node
import {
  users,
  sellers,
  products,
  reports,
  settings,
  orders,
  sellerPayouts,
  stabletokenBalances,
  wallets,
} from './schema'

// --- Seed data ---
const seedUsers = [
  {
    id: 1,
    name: 'Budi Santoso',
    username: 'alice',
    ethereumAddress: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
    authMethod: 'siwe',
    role: 'admin',
    status: 'active',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 2,
    name: 'Sari Dewi',
    username: 'bob',
    ethereumAddress: '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
    authMethod: 'siwe',
    role: 'buyer',
    status: 'active',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 3,
    name: 'Ahmad Rizki',
    username: 'carol',
    ethereumAddress: '0xcccccccccccccccccccccccccccccccccccccccc',
    authMethod: 'siwe',
    role: 'seller',
    status: 'active',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 4,
    name: 'Dewi Sartika',
    username: 'dewi_sartika',
    ethereumAddress: '0xdddddddddddddddddddddddddddddddddddddddd',
    authMethod: 'siwe',
    role: 'seller',
    status: 'banned',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 5,
    name: 'Eko Prasetyo',
    username: 'eko_prasetyo',
    ethereumAddress: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
    authMethod: 'siwe',
    role: 'seller',
    status: 'active',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 6,
    name: 'Fitri Handayani',
    username: 'fitri_handayani',
    ethereumAddress: '0xffffffffffffffffffffffffffffffffffffffff',
    authMethod: 'siwe',
    role: 'buyer',
    status: 'active',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 7,
    name: 'Gunawan Setiawan',
    username: 'gunawan_setiawan',
    ethereumAddress: '0x1111111111111111111111111111111111111111',
    authMethod: 'siwe',
    role: 'seller',
    status: 'active',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 8,
    name: 'Test User',
    username: 'test',
    ethereumAddress: '0x2222222222222222222222222222222222222222',
    authMethod: 'siwe',
    role: 'buyer',
    status: 'active',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
]

const seedSellers = [
  {
    id: 1,
    userId: 3,
    name: 'Toko Elektronik Maju',
    status: 'active',
    logo: 'https://picsum.photos/id/1/150/150',
    bio: 'Toko elektronik terpercaya dengan produk berkualitas tinggi',
    contact: 'info@tokomaju.com',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  }, // Ahmad owns Toko Elektronik Maju
  {
    id: 2,
    userId: 4,
    name: 'Warung Buah Segar',
    status: 'active',
    logo: 'https://picsum.photos/id/2/150/150',
    bio: 'Buah-buahan segar langsung dari petani lokal',
    contact: 'hello@warungbuah.com',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  }, // Dewi owns Warung Buah Segar
  {
    id: 3,
    userId: 5,
    name: 'Toko Gadget Indonesia',
    status: 'active',
    logo: 'https://picsum.photos/id/3/150/150',
    bio: 'Solusi teknologi terdepan untuk kebutuhan digital Anda',
    contact: 'info@gadgetindo.com',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  }, // Eko owns Toko Gadget Indonesia
  {
    id: 4,
    userId: 7,
    name: 'Boutique Fashion Nusantara',
    status: 'active',
    logo: 'https://picsum.photos/id/4/150/150',
    bio: 'Fashion lokal dengan sentuhan budaya Indonesia',
    contact: 'gunawan@boutiquenusantara.com',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  }, // Gunawan owns Boutique Fashion Nusantara
]

const seedProducts = [
  // Toko Elektronik Maju products (sellerId: 1)
  {
    id: 1,
    name: 'Headphone Wireless Sony WH-1000XM4',
    price: 2500000,
    status: 'active',
    sellerId: 1,
    description: 'Headphone wireless premium dengan noise cancellation terbaik',
    imageUrl: 'https://picsum.photos/id/10/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 2,
    name: 'Speaker Bluetooth JBL Flip 5',
    price: 850000,
    status: 'active',
    sellerId: 1,
    description: 'Speaker portable dengan suara jernih dan tahan air',
    imageUrl: 'https://picsum.photos/id/11/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 3,
    name: 'Smartwatch Samsung Galaxy Watch 5',
    price: 3500000,
    status: 'active',
    sellerId: 1,
    description: 'Smartwatch canggih dengan fitur kesehatan lengkap',
    imageUrl: 'https://picsum.photos/id/12/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },

  // Warung Buah Segar products (sellerId: 2)
  {
    id: 4,
    name: 'Alpukat Mentega Segar',
    price: 25000,
    status: 'active',
    sellerId: 2,
    description: 'Alpukat mentega segar dari petani lokal Jawa Barat',
    imageUrl: 'https://picsum.photos/id/20/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 5,
    name: 'Stroberi Segar Lembang',
    price: 45000,
    status: 'active',
    sellerId: 2,
    description: 'Stroberi segar dari kebun Lembang, Bandung',
    imageUrl: 'https://picsum.photos/id/21/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 6,
    name: 'Pisang Raja Premium',
    price: 15000,
    status: 'active',
    sellerId: 2,
    description: 'Pisang raja premium kaya kalium dan vitamin',
    imageUrl: 'https://picsum.photos/id/22/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },

  // Toko Gadget Indonesia products (sellerId: 3)
  {
    id: 7,
    name: 'Laptop Stand Aluminium Premium',
    price: 350000,
    status: 'active',
    sellerId: 3,
    description: 'Stand laptop aluminium untuk ergonomi kerja yang lebih baik',
    imageUrl: 'https://picsum.photos/id/30/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 8,
    name: 'Keyboard Mechanical RGB Logitech',
    price: 1200000,
    status: 'active',
    sellerId: 3,
    description: 'Keyboard mechanical premium dengan lampu RGB yang cantik',
    imageUrl: 'https://picsum.photos/id/31/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 9,
    name: 'Mouse Gaming Razer DeathAdder V3',
    price: 850000,
    status: 'active',
    sellerId: 3,
    description:
      'Mouse gaming presisi tinggi dengan tombol yang dapat dikustomisasi',
    imageUrl: 'https://picsum.photos/id/32/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },

  // Boutique Fashion Nusantara products (sellerId: 4)
  {
    id: 10,
    name: 'Tas Kulit Asli Batik',
    price: 1800000,
    status: 'active',
    sellerId: 4,
    description: 'Tas kulit asli dengan motif batik tradisional Indonesia',
    imageUrl: 'https://picsum.photos/id/40/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 11,
    name: 'Selendang Sutra Batik Pesisir',
    price: 550000,
    status: 'active',
    sellerId: 4,
    description: 'Selendang sutra dengan motif batik pesisir yang elegan',
    imageUrl: 'https://picsum.photos/id/41/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 12,
    name: 'Dompet Kulit Asli Garut',
    price: 350000,
    status: 'active',
    sellerId: 4,
    description: 'Dompet kulit asli dari Garut dengan kualitas terbaik',
    imageUrl: 'https://picsum.photos/id/42/300/200',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
]

const seedReports = [
  {
    id: 1,
    message: 'Produk palsu yang menyesatkan',
    status: 'open',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 2,
    message: 'Penjual melakukan penipuan',
    status: 'resolved',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 3,
    message: 'Gambar produk tidak sesuai',
    status: 'open',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
]

const seedSettings = [
  { key: 'siteName', value: 'PasarNusantara' },
  { key: 'currency', value: 'IDR' },
  { key: 'payoutDelayDays', value: '7' },
]

const seedOrders = [
  // Sari's orders (buyerId: 2)
  {
    id: 1,
    productId: 1,
    productName: 'Headphone Wireless Sony WH-1000XM4',
    quantity: 2,
    items: '[{"productId":1,"quantity":2}]',
    total: 5000000,
    status: 'pending',
    shippingAddress: '123 Main St',
    paymentMethod: 'credit_card',
    buyerId: 2,
    sellerId: 1,
    createdAt: '2024-01-15T10:30:00Z',
    updatedAt: '2024-01-15T10:30:00Z',
  },
  {
    id: 2,
    productId: 4,
    productName: 'Alpukat Mentega Segar',
    quantity: 5,
    items: '[{"productId":4,"quantity":5}]',
    total: 125000,
    status: 'shipped',
    shippingAddress: '123 Main St',
    paymentMethod: 'credit_card',
    trackingNumber: 'TRK1002',
    buyerId: 2,
    sellerId: 2,
    createdAt: '2024-01-14T09:15:00Z',
    updatedAt: '2024-01-14T09:15:00Z',
  },
  {
    id: 3,
    productId: 7,
    productName: 'Laptop Stand Aluminium Premium',
    quantity: 1,
    items: '[{"productId":7,"quantity":1}]',
    total: 350000,
    status: 'delivered',
    shippingAddress: '123 Main St',
    paymentMethod: 'credit_card',
    trackingNumber: 'TRK1003',
    buyerId: 2,
    sellerId: 3,
    createdAt: '2024-01-13T14:20:00Z',
    updatedAt: '2024-01-13T14:20:00Z',
  },

  // Fitri's orders (buyerId: 6)
  {
    id: 4,
    productId: 10,
    productName: 'Tas Kulit Asli Batik',
    quantity: 1,
    items: '[{"productId":10,"quantity":1}]',
    total: 1800000,
    status: 'pending',
    shippingAddress: '123 Main St',
    paymentMethod: 'credit_card',
    buyerId: 6,
    sellerId: 4,
    createdAt: '2024-01-16T11:45:00Z',
    updatedAt: '2024-01-16T11:45:00Z',
  },
  {
    id: 5,
    productId: 8,
    productName: 'Keyboard Mechanical RGB Logitech',
    quantity: 1,
    items: '[{"productId":8,"quantity":1}]',
    total: 1200000,
    status: 'processing',
    shippingAddress: '123 Main St',
    paymentMethod: 'credit_card',
    buyerId: 6,
    sellerId: 3,
    createdAt: '2024-01-15T16:30:00Z',
    updatedAt: '2024-01-15T16:30:00Z',
  },

  // Fitri's additional orders (buyerId: 6)
  {
    id: 6,
    productId: 3,
    productName: 'Smartwatch Samsung Galaxy Watch 5',
    quantity: 1,
    items: '[{"productId":3,"quantity":1}]',
    total: 3500000,
    status: 'shipped',
    shippingAddress: '123 Main St',
    paymentMethod: 'credit_card',
    trackingNumber: 'TRK1006',
    buyerId: 6,
    sellerId: 1,
    createdAt: '2024-01-14T13:10:00Z',
    updatedAt: '2024-01-14T13:10:00Z',
  },
  {
    id: 7,
    productId: 5,
    productName: 'Stroberi Segar Lembang',
    quantity: 3,
    items: '[{"productId":5,"quantity":3}]',
    total: 135000,
    status: 'delivered',
    shippingAddress: '123 Main St',
    paymentMethod: 'credit_card',
    trackingNumber: 'TRK1007',
    buyerId: 6,
    sellerId: 2,
    createdAt: '2024-01-13T10:25:00Z',
    updatedAt: '2024-01-13T10:25:00Z',
  },
]

const seedSellerPayouts = [
  // Toko Elektronik Maju payouts (sellerId: 1)
  {
    id: 1,
    amount: 8500000,
    bankAccount: '1234567890',
    sellerId: 1,
    status: 'completed',
    processedAt: '2024-01-15T00:00:00Z',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 2,
    amount: 12500000,
    bankAccount: '1234567890',
    sellerId: 1,
    status: 'completed',
    processedAt: '2024-01-10T00:00:00Z',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },

  // Warung Buah Segar payouts (sellerId: 2)
  {
    id: 3,
    amount: 5000000,
    bankAccount: '1234567890',
    sellerId: 2,
    status: 'completed',
    processedAt: '2024-01-15T00:00:00Z',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 4,
    amount: 7500000,
    bankAccount: '1234567890',
    sellerId: 2,
    status: 'completed',
    processedAt: '2024-01-08T00:00:00Z',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },

  // Toko Gadget Indonesia payouts (sellerId: 3)
  {
    id: 5,
    amount: 10000000,
    bankAccount: '1234567890',
    sellerId: 3,
    status: 'pending',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 6,
    amount: 6500000,
    bankAccount: '1234567890',
    sellerId: 3,
    status: 'completed',
    processedAt: '2024-01-12T00:00:00Z',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },

  // Boutique Fashion Nusantara payouts (sellerId: 4)
  {
    id: 7,
    amount: 13500000,
    bankAccount: '1234567890',
    sellerId: 4,
    status: 'pending',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
  },
]

const seedStabletokenBalances = [{ userId: 8, balance: 0 }]
const seedWallets = seedUsers.map((u, idx) => ({
  id: idx + 1,
  userId: u.id,
  balance: '0',
  createdAt: '2024-01-01T00:00:00Z',
  updatedAt: '2024-01-01T00:00:00Z',
}))

// --- Seed function ---
export async function seedDb(db: ReturnType<typeof drizzle>) {
  const existingUsers = await db.select().from(users).all()
  if (existingUsers.length > 0) {
    console.log('[seed] Already seeded.')
    return
  }

  for (const u of seedUsers) {
    await db.insert(users).values(u).onConflictDoNothing().run()
  }

  for (const s of seedSellers) {
    await db.insert(sellers).values(s).onConflictDoNothing().run()
  }

  for (const p of seedProducts) {
    await db.insert(products).values(p).onConflictDoNothing().run()
  }

  for (const r of seedReports) {
    await db.insert(reports).values(r).onConflictDoNothing().run()
  }

  for (const s of seedSettings) {
    await db
      .insert(settings)
      .values(s)
      .onConflictDoUpdate({
        target: settings.key,
        set: { value: s.value },
      })
      .run()
  }

  // Seed orders
  for (const o of seedOrders) {
    await db.insert(orders).values(o).onConflictDoNothing().run()
  }

  // Seed wallets
  for (const w of seedWallets) {
    await db.insert(wallets).values(w).onConflictDoNothing().run()
  }

  // Seed seller payouts
  for (const p of seedSellerPayouts) {
    await db.insert(sellerPayouts).values(p).onConflictDoNothing().run()
  }

  // Seed stabletoken balances
  for (const b of seedStabletokenBalances) {
    await db.insert(stabletokenBalances).values(b).onConflictDoNothing().run()
  }

  console.log('[seed] DB seeded successfully.')
}

